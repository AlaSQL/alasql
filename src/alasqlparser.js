
/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

        
    
            var alasqlparser = (function () {


// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




        // helper: reconstruct the productions[] table
        function bp(s) {
            var rv = [];
            var p = s.pop;
            var r = s.rule;
            for (var i = 0, l = p.length; i < l; i++) {
                rv.push([
                    p[i],
                    r[i]
                ]);
            }
            return rv;
        }
    


        // helper: reconstruct the defaultActions[] table
        function bda(s) {
            var rv = {};
            var d = s.idx;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var j = d[i];
                rv[j] = g[i];
            }
            return rv;
        }
    


        // helper: reconstruct the 'goto' table
        function bt(s) {
            var rv = [];
            var d = s.len;
            var y = s.symbol;
            var t = s.type;
            var a = s.state;
            var m = s.mode;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var n = d[i];
                var q = {};
                for (var j = 0; j < n; j++) {
                    var z = y.shift();
                    switch (t.shift()) {
                    case 2:
                        q[z] = [
                            m.shift(),
                            g.shift()
                        ];
                        break;

                    case 0:
                        q[z] = a.shift();
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [
                            3
                        ];
                    }
                }
                rv.push(q);
            }
            return rv;
        }
    


        // helper: runlength encoding with increment step: code, length: step (default step = 0)
        // `this` references an array
        function s(c, l, a) {
            a = a || 0;
            for (var i = 0; i < l; i++) {
                this.push(c);
                c += a;
            }
        }

        // helper: duplicate sequence from *relative* offset and length.
        // `this` references an array
        function c(i, l) {
            i = this.length - i;
            for (l += i; i < l; i++) {
                this.push(this[i]);
            }
        }

        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
        function u(a) {
            var rv = [];
            for (var i = 0, l = a.length; i < l; i++) {
                var e = a[i];
                // Is this entry a helper function?
                if (typeof e === 'function') {
                    i++;
                    e.apply(rv, a[i]);
                } else {
                    rv.push(e);
                }
            }
            return rv;
        }
    

var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... commonjs
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. true
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... false
    //   assigns location: ................ false
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... false
    //   has error recovery: .............. true
    //   has error reporting: ............. true
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3,
  ebnf: true
},
symbols_: {
  "$accept": 0,
  "$end": 1,
  "A": 3,
  "ABSENT": 236,
  "ABSOLUTE": 237,
  "ACCORDING": 238,
  "ACTION": 186,
  "ADA": 239,
  "ADD": 193,
  "ADMIN": 240,
  "AFTER": 233,
  "AGGR": 129,
  "AGGREGATE": 117,
  "ALL": 60,
  "ALTER": 191,
  "ALWAYS": 241,
  "AMPERSAND": 156,
  "AND": 64,
  "ANTI": 95,
  "ANY": 61,
  "APPLY": 84,
  "ARRAY": 130,
  "ARRAYLBRA": 141,
  "ARROW": 28,
  "AS": 18,
  "ASC": 242,
  "ASSERT": 205,
  "ASSERTION": 243,
  "ASSIGNMENT": 244,
  "AStatement": 482,
  "AT": 51,
  "ATLBRA": 206,
  "ATTACH": 195,
  "ATTRIBUTE": 245,
  "ATTRIBUTES": 246,
  "AVG": 128,
  "AddRule": 687,
  "AggrValue": 540,
  "Aggregator": 544,
  "AllSome": 562,
  "AlterTable": 607,
  "ApplyClause": 506,
  "ArrayValue": 553,
  "ArrowDot": 496,
  "AsClause": 612,
  "AsList": 491,
  "AsLiteral": 490,
  "AsPart": 492,
  "Assert": 627,
  "AtDollar": 637,
  "AttachDatabase": 609,
  "BAR": 157,
  "BARBAR": 154,
  "BASE64": 247,
  "BEFORE": 232,
  "BEGIN": 213,
  "BERNOULLI": 248,
  "BETWEEN": 165,
  "BLOCKED": 249,
  "BOM": 250,
  "BRALITERAL": 11,
  "BRAQUESTION": 143,
  "BREADTH": 251,
  "BREAK": 216,
  "BY": 31,
  "BeforeAfter": 693,
  "BeginEnd": 649,
  "BeginTransaction": 643,
  "Break": 648,
  "C": 4,
  "CALL": 230,
  "CARET": 33,
  "CASCADE": 252,
  "CASE": 144,
  "CAST": 119,
  "CATALOG": 253,
  "CATALOG_NAME": 254,
  "CHAIN": 255,
  "CHARACTERISTICS": 256,
  "CHARACTERS": 257,
  "CHARACTER_SET_CATALOG": 258,
  "CHARACTER_SET_NAME": 259,
  "CHARACTER_SET_SCHEMA": 260,
  "CHECK": 180,
  "CLASS": 37,
  "CLASS_ORIGIN": 261,
  "COBOL": 262,
  "COLLATE": 108,
  "COLLATION": 263,
  "COLLATION_CATALOG": 264,
  "COLLATION_NAME": 265,
  "COLLATION_SCHEMA": 266,
  "COLON": 56,
  "COLONDASH": 228,
  "COLUMN": 76,
  "COLUMNS": 267,
  "COLUMN_NAME": 268,
  "COMMA": 17,
  "COMMAND_FUNCTION": 269,
  "COMMAND_FUNCTION_CODE": 270,
  "COMMIT": 210,
  "COMMITTED": 271,
  "CONDITION_NUMBER": 272,
  "CONNECTION": 273,
  "CONNECTION_NAME": 274,
  "CONSTRAINT": 179,
  "CONSTRAINTS": 275,
  "CONSTRAINT_CATALOG": 276,
  "CONSTRAINT_NAME": 277,
  "CONSTRAINT_SCHEMA": 278,
  "CONSTRUCTOR": 279,
  "CONTENT": 226,
  "CONTINUE": 215,
  "CONTROL": 280,
  "CONVERT": 120,
  "CORRESPONDING": 103,
  "COUNT": 125,
  "CREATE": 115,
  "CROSS": 83,
  "CUBE": 101,
  "CURRENT_TIMESTAMP": 113,
  "CURSOR_NAME": 281,
  "Call": 691,
  "CaseValue": 555,
  "CastClause": 538,
  "Check": 585,
  "ColFunc": 560,
  "ColonLiteral": 683,
  "ColsList": 594,
  "Column": 532,
  "ColumnConstraint": 603,
  "ColumnConstraint_option": 740,
  "ColumnConstraint_option2": 741,
  "ColumnConstraints": 187,
  "ColumnConstraintsClause": 600,
  "ColumnConstraintsList": 601,
  "ColumnDef": 596,
  "ColumnDefsList": 595,
  "ColumnType": 598,
  "ColumnsList": 573,
  "CommitTransaction": 641,
  "CondOp": 561,
  "Constraint": 583,
  "ConstraintName": 584,
  "ConstraintsList": 582,
  "Continue": 647,
  "CreateAggregate": 536,
  "CreateDatabase": 611,
  "CreateEdge": 673,
  "CreateEdge_option": 748,
  "CreateFunction": 535,
  "CreateGraph": 674,
  "CreateIndex": 615,
  "CreateTable": 574,
  "CreateTableDefClause": 581,
  "CreateTableOption": 578,
  "CreateTableOptions": 577,
  "CreateTableOptionsClause": 576,
  "CreateTrigger": 692,
  "CreateTrigger_option": 768,
  "CreateTrigger_option2": 769,
  "CreateVertex": 670,
  "CreateVertexSet": 672,
  "CreateVertex_option": 745,
  "CreateVertex_option2": 746,
  "CreateVertex_option3": 747,
  "CreateView": 622,
  "CreateView_option": 743,
  "CreateView_option2": 744,
  "DATA": 282,
  "DATABASE": 196,
  "DATEADD": 132,
  "DATEDIFF": 133,
  "DATETIME_INTERVAL_CODE": 283,
  "DATETIME_INTERVAL_PRECISION": 284,
  "DB": 285,
  "DECLARE": 220,
  "DEFAULT": 173,
  "DEFAULTS": 286,
  "DEFERRABLE": 287,
  "DEFERRED": 288,
  "DEFINED": 289,
  "DEFINER": 290,
  "DEGREE": 291,
  "DELETE": 171,
  "DEPTH": 292,
  "DERIVED": 293,
  "DESC": 294,
  "DESCRIPTOR": 295,
  "DETACH": 197,
  "DIAGNOSTICS": 296,
  "DIRECTION": 107,
  "DISPATCH": 297,
  "DISTINCT": 73,
  "DOCUMENT": 298,
  "DOLLAR": 50,
  "DOMAIN": 299,
  "DOT": 29,
  "DOTDOT": 32,
  "DOUBLECOLON": 168,
  "DROP": 190,
  "DYNAMIC_FUNCTION": 300,
  "DYNAMIC_FUNCTION_CODE": 301,
  "DateValue": 175,
  "Declare": 656,
  "DeclareItem": 658,
  "DeclaresList": 657,
  "Delete": 566,
  "DeleteEdge": 686,
  "DeleteEdge_option": 765,
  "DeleteEdge_option2": 766,
  "DeleteEdge_option3": 767,
  "DeleteVertex": 685,
  "DeleteVertex_option": 764,
  "DetachDatabase": 610,
  "DropDatabase": 614,
  "DropIndex": 616,
  "DropTable": 604,
  "DropTable_group": 742,
  "DropTrigger": 695,
  "DropView": 624,
  "ECHO": 219,
  "EDGE": 42,
  "ELSE": 148,
  "EMPTY": 302,
  "ENCODING": 303,
  "END": 145,
  "ENFORCED": 304,
  "ENUM": 188,
  "EOF": 1,
  "EQ": 34,
  "EQEQ": 160,
  "EQEQEQ": 161,
  "ESCAPE": 152,
  "EXCEPT": 63,
  "EXCLAMATION": 43,
  "EXCLUDE": 305,
  "EXCLUDING": 306,
  "EXISTS": 140,
  "EXPLAIN": 12,
  "EXPRESSION": 307,
  "Echo": 653,
  "ElseClause": 558,
  "ElseStatement": 645,
  "EndTransaction": 15,
  "ExistsValue": 552,
  "ExplainStatement": 481,
  "ExprList": 546,
  "Expression": 533,
  "ExpressionStatement": 625,
  "Expression_group": 731,
  "FALSE": 137,
  "FETCH": 112,
  "FILE": 308,
  "FINAL": 309,
  "FIRST": 105,
  "FLAG": 310,
  "FOLLOWING": 311,
  "FOR": 23,
  "FOREIGN": 183,
  "FORTRAN": 312,
  "FOUND": 313,
  "FROM": 72,
  "FS": 314,
  "FULL": 93,
  "FUNCTION": 116,
  "ForeignKey": 587,
  "ForeignKey_option": 737,
  "FromClause": 505,
  "FromString": 509,
  "FromTable": 508,
  "FromTable_option": 723,
  "FromTable_option2": 724,
  "FromTablesList": 507,
  "FuncValue": 545,
  "FuncValue_option": 733,
  "FuncValue_option_group": 732,
  "G": 5,
  "GE": 158,
  "GENERAL": 315,
  "GENERATED": 316,
  "GLOB": 151,
  "GO": 317,
  "GOTO": 318,
  "GRANTED": 319,
  "GRAPH": 227,
  "GROUP": 98,
  "GROUPING": 99,
  "GT": 46,
  "GTGT": 48,
  "GraphAsClause": 679,
  "GraphAtClause": 680,
  "GraphElement": 682,
  "GraphElement2": 681,
  "GraphElement2_option": 754,
  "GraphElement2_option2": 755,
  "GraphElement2_option3": 756,
  "GraphElement2_option4": 757,
  "GraphElementVar": 677,
  "GraphElement_option": 758,
  "GraphElement_option2": 759,
  "GraphElement_option3": 760,
  "GraphElement_option4": 761,
  "GraphElement_option5": 762,
  "GraphElement_option6": 763,
  "GraphList": 675,
  "GraphVar": 678,
  "GraphVertexEdge": 676,
  "GraphVertexEdge_option": 749,
  "GraphVertexEdge_option2": 750,
  "GraphVertexEdge_option3": 751,
  "GraphVertexEdge_option4": 752,
  "GraphVertexEdge_option5": 753,
  "GroupClause": 518,
  "GroupExpression": 520,
  "GroupExpressionsList": 519,
  "HAVING": 102,
  "HEX": 320,
  "HIERARCHY": 321,
  "HavingClause": 521,
  "ID": 322,
  "IDENTITY": 177,
  "IF": 58,
  "IGNORE": 323,
  "IMMEDIATE": 324,
  "IMMEDIATELY": 325,
  "IMPLEMENTATION": 326,
  "IN": 25,
  "INCLUDING": 327,
  "INCREMENT": 328,
  "INDENT": 329,
  "INDEX": 79,
  "INDEXED": 86,
  "INITIALLY": 330,
  "INNER": 90,
  "INPUT": 331,
  "INSERT": 172,
  "INSERTED": 87,
  "INSTANCE": 332,
  "INSTANTIABLE": 333,
  "INSTEAD": 234,
  "INTEGRITY": 334,
  "INTERSECT": 62,
  "INTERVAL": 135,
  "INTO": 82,
  "INVOKER": 335,
  "IS": 167,
  "ISOLATION": 336,
  "If": 644,
  "IfExists": 606,
  "IfNotExists": 580,
  "IndexKey": 593,
  "Insert": 567,
  "InsertDeleteUpdate": 694,
  "Into": 569,
  "IntoClause": 504,
  "JAVASCRIPT": 114,
  "JOIN": 89,
  "JavaScript": 534,
  "JoinMode": 514,
  "JoinModeMode": 515,
  "JoinTable": 512,
  "JoinTableAs": 513,
  "JoinTableAs_option": 725,
  "JoinTableAs_option2": 726,
  "JoinTablesList": 511,
  "Json": 628,
  "JsonArray": 632,
  "JsonElementsList": 635,
  "JsonObject": 631,
  "JsonPrimitiveValue": 630,
  "JsonPropertiesList": 633,
  "JsonProperty": 634,
  "JsonValue": 629,
  "K": 6,
  "KEY": 182,
  "KEY_MEMBER": 337,
  "KEY_TYPE": 338,
  "LAST": 106,
  "LCUR": 207,
  "LE": 159,
  "LEFT": 91,
  "LENGTH": 339,
  "LEVEL": 340,
  "LIBRARY": 341,
  "LIKE": 27,
  "LIMIT": 110,
  "LINK": 342,
  "LITERAL": 10,
  "LOCATION": 343,
  "LOCATOR": 344,
  "LPAR": 19,
  "LT": 47,
  "LTLT": 49,
  "LimitClause": 527,
  "LimitClause_option": 727,
  "LimitClause_option2": 728,
  "LimitClause_option3": 729,
  "LimitClause_option4": 730,
  "Literal": 477,
  "LiteralWithSpaces": 478,
  "LogicValue": 548,
  "M": 7,
  "MAP": 345,
  "MAPPING": 346,
  "MATCHED": 223,
  "MATRIX": 77,
  "MAX": 127,
  "MAXNUM": 189,
  "MAXVALUE": 347,
  "MERGE": 222,
  "MESSAGE_LENGTH": 348,
  "MESSAGE_OCTET_LENGTH": 349,
  "MESSAGE_TEXT": 350,
  "MIN": 126,
  "MINUS": 155,
  "MINVALUE": 351,
  "MODIFY": 194,
  "MODULO": 45,
  "MORE": 352,
  "MUMPS": 353,
  "Merge": 660,
  "MergeInto": 661,
  "MergeMatched": 665,
  "MergeMatchedAction": 666,
  "MergeMatchedList": 664,
  "MergeNotMatched": 667,
  "MergeNotMatchedAction": 668,
  "MergeOn": 663,
  "MergeUsing": 662,
  "NAME": 354,
  "NAMES": 355,
  "NAMESPACE": 356,
  "NATURAL": 88,
  "NE": 162,
  "NEEQEQ": 163,
  "NEEQEQEQ": 164,
  "NESTING": 357,
  "NEW": 118,
  "NEXT": 358,
  "NFC": 359,
  "NFD": 360,
  "NFKC": 361,
  "NFKD": 362,
  "NIL": 363,
  "NO": 185,
  "NOCASE": 109,
  "NORMALIZED": 364,
  "NOT": 57,
  "NOT_BETWEEN": 166,
  "NOT_LIKE": 153,
  "NSTRING": 138,
  "NULL": 139,
  "NULLABLE": 365,
  "NULLS": 104,
  "NUMBER": 38,
  "NewClause": 537,
  "NonReserved": 697,
  "NullValue": 550,
  "NullsOrder": 525,
  "NumValue": 547,
  "NumberMax": 599,
  "OBJECT": 366,
  "OCTETS": 367,
  "OF": 36,
  "OFF": 209,
  "OFFSET": 111,
  "ON": 96,
  "ONLY": 202,
  "OPTION": 203,
  "OPTIONS": 368,
  "OR": 65,
  "ORDER": 30,
  "ORDERING": 369,
  "ORDINALITY": 370,
  "OTHERS": 371,
  "OUTER": 85,
  "OUTPUT": 225,
  "OVER": 121,
  "OVERRIDING": 372,
  "OffsetClause": 528,
  "OnClause": 516,
  "OnDeleteClause": 590,
  "OnForeignKeyClause": 589,
  "OnOff": 640,
  "OnUpdateClause": 591,
  "Op": 559,
  "OrderClause": 523,
  "OrderExpression": 526,
  "OrderExpressionsList": 524,
  "OutputClause": 669,
  "OverClause": 541,
  "OverOrderByClause": 543,
  "OverPartitionClause": 542,
  "P": 8,
  "PAD": 373,
  "PARAMETER_MODE": 374,
  "PARAMETER_NAME": 375,
  "PARAMETER_ORDINAL_POSITION": 376,
  "PARAMETER_SPECIFIC_CATALOG": 377,
  "PARAMETER_SPECIFIC_NAME": 378,
  "PARAMETER_SPECIFIC_SCHEMA": 379,
  "PARTIAL": 380,
  "PARTITION": 122,
  "PASCAL": 381,
  "PASSING": 382,
  "PASSTHROUGH": 383,
  "PATH": 66,
  "PERCENT": 475,
  "PERMISSION": 384,
  "PIVOT": 22,
  "PLACING": 385,
  "PLAN": 14,
  "PLI": 386,
  "PLUS": 69,
  "PRECEDING": 387,
  "PRESERVE": 388,
  "PRIMARY": 181,
  "PRINT": 217,
  "PRIOR": 389,
  "PRIVILEGES": 390,
  "PUBLIC": 391,
  "ParColsList": 588,
  "ParLiteral": 602,
  "ParamValue": 554,
  "ParamValue_group": 734,
  "PivotClause": 488,
  "PivotClause2": 489,
  "PivotClause_option": 703,
  "PivotClause_option2": 704,
  "PivotClause_option3": 705,
  "Plugin": 652,
  "PluginsList": 655,
  "PlusStar": 499,
  "PrimaryKey": 586,
  "PrimaryKey_option": 736,
  "PrimitiveValue": 539,
  "Print": 650,
  "QUERY": 13,
  "QUESTION": 71,
  "QUESTIONDASH": 229,
  "Query": 690,
  "RBRA": 142,
  "RCUR": 208,
  "READ": 201,
  "RECORDSET": 80,
  "RECOVERY": 392,
  "REFERENCES": 184,
  "REGEXP": 149,
  "REINDEX": 235,
  "RELATIVE": 393,
  "REMOVE": 26,
  "RENAME": 192,
  "REPEAT": 68,
  "REPEATABLE": 394,
  "REPLACE": 131,
  "REQUIRE": 218,
  "REQUIRING": 395,
  "RESPECT": 396,
  "RESTART": 397,
  "RESTORE": 398,
  "RESTRICT": 399,
  "RETURN": 67,
  "RETURNED_CARDINALITY": 400,
  "RETURNED_LENGTH": 401,
  "RETURNED_OCTET_LENGTH": 402,
  "RETURNED_SQLSTATE": 403,
  "RETURNING": 404,
  "RIGHT": 92,
  "ROLE": 405,
  "ROLLBACK": 212,
  "ROLLUP": 100,
  "ROUTINE": 406,
  "ROUTINE_CATALOG": 407,
  "ROUTINE_NAME": 408,
  "ROUTINE_SCHEMA": 409,
  "ROW": 55,
  "ROWS": 476,
  "ROW_COUNT": 410,
  "RPAR": 20,
  "Reindex": 696,
  "RemoveClause": 493,
  "RemoveClause_option": 706,
  "RemoveColumn": 495,
  "RemoveColumnsList": 494,
  "RenameTable": 608,
  "Require": 651,
  "ResultColumn": 530,
  "ResultColumns": 529,
  "RollbackTransaction": 642,
  "SCALE": 411,
  "SCHEMA": 412,
  "SCHEMA_NAME": 413,
  "SCOPE_CATALOG": 414,
  "SCOPE_NAME": 415,
  "SCOPE_SCHEMA": 416,
  "SEARCH": 21,
  "SECTION": 417,
  "SECURITY": 418,
  "SELECT": 75,
  "SELECTIVE": 419,
  "SELF": 420,
  "SEMI": 94,
  "SEMICOLON": 474,
  "SEQUENCE": 421,
  "SERIALIZABLE": 422,
  "SERVER": 423,
  "SERVER_NAME": 424,
  "SESSION": 425,
  "SET": 52,
  "SETS": 426,
  "SHARP": 44,
  "SHOW": 199,
  "SIMPLE": 427,
  "SIZE": 428,
  "SLASH": 40,
  "SOME": 169,
  "SOURCE": 204,
  "SPACE": 429,
  "SPECIFIC_NAME": 430,
  "STANDALONE": 431,
  "STAR": 70,
  "STATE": 432,
  "STATEMENT": 433,
  "STRING": 39,
  "STRIP": 434,
  "STRUCTURE": 435,
  "STYLE": 436,
  "SUBCLASS_ORIGIN": 437,
  "SUM": 123,
  "SearchFrom": 500,
  "SearchSelector": 497,
  "SearchSelectorList": 498,
  "SearchSelectorList_repetition": 719,
  "SearchSelectorList_repetition2": 720,
  "SearchSelector_group": 714,
  "SearchSelector_option": 707,
  "SearchSelector_option2": 710,
  "SearchSelector_repetition": 711,
  "SearchSelector_repetition2": 712,
  "SearchSelector_repetition3": 713,
  "SearchSelector_repetition4": 715,
  "SearchSelector_repetition5": 716,
  "SearchSelector_repetition6": 717,
  "SearchSelector_repetition7": 718,
  "SearchSelector_repetition_plus": 708,
  "SearchSelector_repetition_plus2": 709,
  "Select": 487,
  "SelectClause": 501,
  "SelectClause_option": 721,
  "SelectModifier": 502,
  "Select_option": 699,
  "Select_option2": 700,
  "Select_option3": 702,
  "Select_repetition": 701,
  "SetColumn": 565,
  "SetColumn_group": 735,
  "SetColumnsList": 564,
  "SetProp": 639,
  "SetPropsList": 638,
  "SetVariable": 636,
  "SharpLiteral": 684,
  "SharpValue": 671,
  "ShowColumns": 619,
  "ShowCreateTable": 621,
  "ShowDatabases": 617,
  "ShowIndex": 620,
  "ShowTables": 618,
  "SingularColumnType": 597,
  "Source": 626,
  "Star": 531,
  "Statement": 483,
  "Statements": 480,
  "Statements_group": 698,
  "StringValue": 549,
  "StringValuesList": 654,
  "SubqueryRestriction": 623,
  "T": 9,
  "TABLE": 176,
  "TABLE_NAME": 438,
  "TARGET": 224,
  "TEMP": 178,
  "TEMPORARY": 439,
  "TEXTSTRING": 78,
  "THEN": 147,
  "TIES": 440,
  "TILDA": 150,
  "TIMESTAMPDIFF": 134,
  "TO": 53,
  "TOKEN": 441,
  "TOP": 81,
  "TOP_LEVEL_COUNT": 442,
  "TOTAL": 124,
  "TRANSACTION": 211,
  "TRANSACTIONS_COMMITTED": 443,
  "TRANSACTIONS_ROLLED_BACK": 444,
  "TRANSACTION_ACTIVE": 445,
  "TRANSFORM": 446,
  "TRANSFORMS": 447,
  "TRIGGER": 231,
  "TRIGGER_CATALOG": 448,
  "TRIGGER_NAME": 449,
  "TRIGGER_SCHEMA": 450,
  "TRUE": 136,
  "TRUNCATE": 221,
  "TYPE": 451,
  "Table": 510,
  "TableClass": 575,
  "TablesList": 605,
  "TemporaryClause": 579,
  "Term": 689,
  "TermsList": 688,
  "TopClause": 503,
  "TopClause_option": 722,
  "TruncateTable": 659,
  "UNBOUNDED": 452,
  "UNCOMMITTED": 453,
  "UNDER": 454,
  "UNION": 59,
  "UNIQUE": 74,
  "UNLINK": 455,
  "UNNAMED": 456,
  "UNPIVOT": 24,
  "UNTYPED": 457,
  "UPDATE": 170,
  "URI": 458,
  "USAGE": 459,
  "USE": 198,
  "USER_DEFINED_TYPE_CATALOG": 460,
  "USER_DEFINED_TYPE_CODE": 461,
  "USER_DEFINED_TYPE_NAME": 462,
  "USER_DEFINED_TYPE_SCHEMA": 463,
  "USING": 97,
  "UnionClause": 522,
  "UniqueKey": 592,
  "UniqueKey_option": 738,
  "UniqueKey_option2": 739,
  "Update": 563,
  "UseDatabase": 613,
  "VALID": 464,
  "VALUE": 54,
  "VALUES": 174,
  "VERSION": 465,
  "VERTEX": 41,
  "VIEW": 200,
  "Value": 572,
  "Values": 568,
  "ValuesList": 571,
  "ValuesListsList": 570,
  "VarValue": 551,
  "WHEN": 146,
  "WHERE": 35,
  "WHILE": 214,
  "WHITESPACE": 466,
  "WITH": 16,
  "WORK": 467,
  "WRAPPER": 468,
  "WRITE": 469,
  "When": 557,
  "WhensList": 556,
  "WhereClause": 517,
  "While": 646,
  "WithSelect": 484,
  "WithTable": 486,
  "WithTablesList": 485,
  "XMLDECLARATION": 470,
  "XMLSCHEMA": 471,
  "YES": 472,
  "ZONE": 473,
  "error": 2,
  "main": 479
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "A",
  4: "C",
  5: "G",
  6: "K",
  7: "M",
  8: "P",
  9: "T",
  10: "LITERAL",
  11: "BRALITERAL",
  12: "EXPLAIN",
  13: "QUERY",
  14: "PLAN",
  15: "EndTransaction",
  16: "WITH",
  17: "COMMA",
  18: "AS",
  19: "LPAR",
  20: "RPAR",
  21: "SEARCH",
  22: "PIVOT",
  23: "FOR",
  24: "UNPIVOT",
  25: "IN",
  26: "REMOVE",
  27: "LIKE",
  28: "ARROW",
  29: "DOT",
  30: "ORDER",
  31: "BY",
  32: "DOTDOT",
  33: "CARET",
  34: "EQ",
  35: "WHERE",
  36: "OF",
  37: "CLASS",
  38: "NUMBER",
  39: "STRING",
  40: "SLASH",
  41: "VERTEX",
  42: "EDGE",
  43: "EXCLAMATION",
  44: "SHARP",
  45: "MODULO",
  46: "GT",
  47: "LT",
  48: "GTGT",
  49: "LTLT",
  50: "DOLLAR",
  51: "AT",
  52: "SET",
  53: "TO",
  54: "VALUE",
  55: "ROW",
  56: "COLON",
  57: "NOT",
  58: "IF",
  59: "UNION",
  60: "ALL",
  61: "ANY",
  62: "INTERSECT",
  63: "EXCEPT",
  64: "AND",
  65: "OR",
  66: "PATH",
  67: "RETURN",
  68: "REPEAT",
  69: "PLUS",
  70: "STAR",
  71: "QUESTION",
  72: "FROM",
  73: "DISTINCT",
  74: "UNIQUE",
  75: "SELECT",
  76: "COLUMN",
  77: "MATRIX",
  78: "TEXTSTRING",
  79: "INDEX",
  80: "RECORDSET",
  81: "TOP",
  82: "INTO",
  83: "CROSS",
  84: "APPLY",
  85: "OUTER",
  86: "INDEXED",
  87: "INSERTED",
  88: "NATURAL",
  89: "JOIN",
  90: "INNER",
  91: "LEFT",
  92: "RIGHT",
  93: "FULL",
  94: "SEMI",
  95: "ANTI",
  96: "ON",
  97: "USING",
  98: "GROUP",
  99: "GROUPING",
  100: "ROLLUP",
  101: "CUBE",
  102: "HAVING",
  103: "CORRESPONDING",
  104: "NULLS",
  105: "FIRST",
  106: "LAST",
  107: "DIRECTION",
  108: "COLLATE",
  109: "NOCASE",
  110: "LIMIT",
  111: "OFFSET",
  112: "FETCH",
  113: "CURRENT_TIMESTAMP",
  114: "JAVASCRIPT",
  115: "CREATE",
  116: "FUNCTION",
  117: "AGGREGATE",
  118: "NEW",
  119: "CAST",
  120: "CONVERT",
  121: "OVER",
  122: "PARTITION",
  123: "SUM",
  124: "TOTAL",
  125: "COUNT",
  126: "MIN",
  127: "MAX",
  128: "AVG",
  129: "AGGR",
  130: "ARRAY",
  131: "REPLACE",
  132: "DATEADD",
  133: "DATEDIFF",
  134: "TIMESTAMPDIFF",
  135: "INTERVAL",
  136: "TRUE",
  137: "FALSE",
  138: "NSTRING",
  139: "NULL",
  140: "EXISTS",
  141: "ARRAYLBRA",
  142: "RBRA",
  143: "BRAQUESTION",
  144: "CASE",
  145: "END",
  146: "WHEN",
  147: "THEN",
  148: "ELSE",
  149: "REGEXP",
  150: "TILDA",
  151: "GLOB",
  152: "ESCAPE",
  153: "NOT_LIKE",
  154: "BARBAR",
  155: "MINUS",
  156: "AMPERSAND",
  157: "BAR",
  158: "GE",
  159: "LE",
  160: "EQEQ",
  161: "EQEQEQ",
  162: "NE",
  163: "NEEQEQ",
  164: "NEEQEQEQ",
  165: "BETWEEN",
  166: "NOT_BETWEEN",
  167: "IS",
  168: "DOUBLECOLON",
  169: "SOME",
  170: "UPDATE",
  171: "DELETE",
  172: "INSERT",
  173: "DEFAULT",
  174: "VALUES",
  175: "DateValue",
  176: "TABLE",
  177: "IDENTITY",
  178: "TEMP",
  179: "CONSTRAINT",
  180: "CHECK",
  181: "PRIMARY",
  182: "KEY",
  183: "FOREIGN",
  184: "REFERENCES",
  185: "NO",
  186: "ACTION",
  187: "ColumnConstraints",
  188: "ENUM",
  189: "MAXNUM",
  190: "DROP",
  191: "ALTER",
  192: "RENAME",
  193: "ADD",
  194: "MODIFY",
  195: "ATTACH",
  196: "DATABASE",
  197: "DETACH",
  198: "USE",
  199: "SHOW",
  200: "VIEW",
  201: "READ",
  202: "ONLY",
  203: "OPTION",
  204: "SOURCE",
  205: "ASSERT",
  206: "ATLBRA",
  207: "LCUR",
  208: "RCUR",
  209: "OFF",
  210: "COMMIT",
  211: "TRANSACTION",
  212: "ROLLBACK",
  213: "BEGIN",
  214: "WHILE",
  215: "CONTINUE",
  216: "BREAK",
  217: "PRINT",
  218: "REQUIRE",
  219: "ECHO",
  220: "DECLARE",
  221: "TRUNCATE",
  222: "MERGE",
  223: "MATCHED",
  224: "TARGET",
  225: "OUTPUT",
  226: "CONTENT",
  227: "GRAPH",
  228: "COLONDASH",
  229: "QUESTIONDASH",
  230: "CALL",
  231: "TRIGGER",
  232: "BEFORE",
  233: "AFTER",
  234: "INSTEAD",
  235: "REINDEX",
  236: "ABSENT",
  237: "ABSOLUTE",
  238: "ACCORDING",
  239: "ADA",
  240: "ADMIN",
  241: "ALWAYS",
  242: "ASC",
  243: "ASSERTION",
  244: "ASSIGNMENT",
  245: "ATTRIBUTE",
  246: "ATTRIBUTES",
  247: "BASE64",
  248: "BERNOULLI",
  249: "BLOCKED",
  250: "BOM",
  251: "BREADTH",
  252: "CASCADE",
  253: "CATALOG",
  254: "CATALOG_NAME",
  255: "CHAIN",
  256: "CHARACTERISTICS",
  257: "CHARACTERS",
  258: "CHARACTER_SET_CATALOG",
  259: "CHARACTER_SET_NAME",
  260: "CHARACTER_SET_SCHEMA",
  261: "CLASS_ORIGIN",
  262: "COBOL",
  263: "COLLATION",
  264: "COLLATION_CATALOG",
  265: "COLLATION_NAME",
  266: "COLLATION_SCHEMA",
  267: "COLUMNS",
  268: "COLUMN_NAME",
  269: "COMMAND_FUNCTION",
  270: "COMMAND_FUNCTION_CODE",
  271: "COMMITTED",
  272: "CONDITION_NUMBER",
  273: "CONNECTION",
  274: "CONNECTION_NAME",
  275: "CONSTRAINTS",
  276: "CONSTRAINT_CATALOG",
  277: "CONSTRAINT_NAME",
  278: "CONSTRAINT_SCHEMA",
  279: "CONSTRUCTOR",
  280: "CONTROL",
  281: "CURSOR_NAME",
  282: "DATA",
  283: "DATETIME_INTERVAL_CODE",
  284: "DATETIME_INTERVAL_PRECISION",
  285: "DB",
  286: "DEFAULTS",
  287: "DEFERRABLE",
  288: "DEFERRED",
  289: "DEFINED",
  290: "DEFINER",
  291: "DEGREE",
  292: "DEPTH",
  293: "DERIVED",
  294: "DESC",
  295: "DESCRIPTOR",
  296: "DIAGNOSTICS",
  297: "DISPATCH",
  298: "DOCUMENT",
  299: "DOMAIN",
  300: "DYNAMIC_FUNCTION",
  301: "DYNAMIC_FUNCTION_CODE",
  302: "EMPTY",
  303: "ENCODING",
  304: "ENFORCED",
  305: "EXCLUDE",
  306: "EXCLUDING",
  307: "EXPRESSION",
  308: "FILE",
  309: "FINAL",
  310: "FLAG",
  311: "FOLLOWING",
  312: "FORTRAN",
  313: "FOUND",
  314: "FS",
  315: "GENERAL",
  316: "GENERATED",
  317: "GO",
  318: "GOTO",
  319: "GRANTED",
  320: "HEX",
  321: "HIERARCHY",
  322: "ID",
  323: "IGNORE",
  324: "IMMEDIATE",
  325: "IMMEDIATELY",
  326: "IMPLEMENTATION",
  327: "INCLUDING",
  328: "INCREMENT",
  329: "INDENT",
  330: "INITIALLY",
  331: "INPUT",
  332: "INSTANCE",
  333: "INSTANTIABLE",
  334: "INTEGRITY",
  335: "INVOKER",
  336: "ISOLATION",
  337: "KEY_MEMBER",
  338: "KEY_TYPE",
  339: "LENGTH",
  340: "LEVEL",
  341: "LIBRARY",
  342: "LINK",
  343: "LOCATION",
  344: "LOCATOR",
  345: "MAP",
  346: "MAPPING",
  347: "MAXVALUE",
  348: "MESSAGE_LENGTH",
  349: "MESSAGE_OCTET_LENGTH",
  350: "MESSAGE_TEXT",
  351: "MINVALUE",
  352: "MORE",
  353: "MUMPS",
  354: "NAME",
  355: "NAMES",
  356: "NAMESPACE",
  357: "NESTING",
  358: "NEXT",
  359: "NFC",
  360: "NFD",
  361: "NFKC",
  362: "NFKD",
  363: "NIL",
  364: "NORMALIZED",
  365: "NULLABLE",
  366: "OBJECT",
  367: "OCTETS",
  368: "OPTIONS",
  369: "ORDERING",
  370: "ORDINALITY",
  371: "OTHERS",
  372: "OVERRIDING",
  373: "PAD",
  374: "PARAMETER_MODE",
  375: "PARAMETER_NAME",
  376: "PARAMETER_ORDINAL_POSITION",
  377: "PARAMETER_SPECIFIC_CATALOG",
  378: "PARAMETER_SPECIFIC_NAME",
  379: "PARAMETER_SPECIFIC_SCHEMA",
  380: "PARTIAL",
  381: "PASCAL",
  382: "PASSING",
  383: "PASSTHROUGH",
  384: "PERMISSION",
  385: "PLACING",
  386: "PLI",
  387: "PRECEDING",
  388: "PRESERVE",
  389: "PRIOR",
  390: "PRIVILEGES",
  391: "PUBLIC",
  392: "RECOVERY",
  393: "RELATIVE",
  394: "REPEATABLE",
  395: "REQUIRING",
  396: "RESPECT",
  397: "RESTART",
  398: "RESTORE",
  399: "RESTRICT",
  400: "RETURNED_CARDINALITY",
  401: "RETURNED_LENGTH",
  402: "RETURNED_OCTET_LENGTH",
  403: "RETURNED_SQLSTATE",
  404: "RETURNING",
  405: "ROLE",
  406: "ROUTINE",
  407: "ROUTINE_CATALOG",
  408: "ROUTINE_NAME",
  409: "ROUTINE_SCHEMA",
  410: "ROW_COUNT",
  411: "SCALE",
  412: "SCHEMA",
  413: "SCHEMA_NAME",
  414: "SCOPE_CATALOG",
  415: "SCOPE_NAME",
  416: "SCOPE_SCHEMA",
  417: "SECTION",
  418: "SECURITY",
  419: "SELECTIVE",
  420: "SELF",
  421: "SEQUENCE",
  422: "SERIALIZABLE",
  423: "SERVER",
  424: "SERVER_NAME",
  425: "SESSION",
  426: "SETS",
  427: "SIMPLE",
  428: "SIZE",
  429: "SPACE",
  430: "SPECIFIC_NAME",
  431: "STANDALONE",
  432: "STATE",
  433: "STATEMENT",
  434: "STRIP",
  435: "STRUCTURE",
  436: "STYLE",
  437: "SUBCLASS_ORIGIN",
  438: "TABLE_NAME",
  439: "TEMPORARY",
  440: "TIES",
  441: "TOKEN",
  442: "TOP_LEVEL_COUNT",
  443: "TRANSACTIONS_COMMITTED",
  444: "TRANSACTIONS_ROLLED_BACK",
  445: "TRANSACTION_ACTIVE",
  446: "TRANSFORM",
  447: "TRANSFORMS",
  448: "TRIGGER_CATALOG",
  449: "TRIGGER_NAME",
  450: "TRIGGER_SCHEMA",
  451: "TYPE",
  452: "UNBOUNDED",
  453: "UNCOMMITTED",
  454: "UNDER",
  455: "UNLINK",
  456: "UNNAMED",
  457: "UNTYPED",
  458: "URI",
  459: "USAGE",
  460: "USER_DEFINED_TYPE_CATALOG",
  461: "USER_DEFINED_TYPE_CODE",
  462: "USER_DEFINED_TYPE_NAME",
  463: "USER_DEFINED_TYPE_SCHEMA",
  464: "VALID",
  465: "VERSION",
  466: "WHITESPACE",
  467: "WORK",
  468: "WRAPPER",
  469: "WRITE",
  470: "XMLDECLARATION",
  471: "XMLSCHEMA",
  472: "YES",
  473: "ZONE",
  474: "SEMICOLON",
  475: "PERCENT",
  476: "ROWS"
},
TERROR: 2,
    EOF: 1,

    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,

    __reentrant_call_depth: 0,      // INTERNAL USE ONLY
    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,

    // Helper APIs
    // -----------

    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },

    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) {
            return this.terminals_[symbol];
        }

        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for (var key in s) {
            if (s[key] === symbol) {
                return key;
            }
        }
        return null;
    },

    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
            return this.terminal_descriptions_[symbol];
        }
        else if (symbol === this.EOF) {
            return 'end of input';
        }
        var id = this.getSymbolName(symbol);
        if (id) {
            return this.quoteName(id);
        }
        return null;
    },

    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
            return [
                this.state_descriptions_[state]
            ];
        }
        for (var p in this.table[state]) {
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
productions_: bp({
  pop: u([
  s,
  [477, 3],
  478,
  478,
  479,
  s,
  [480, 3],
  481,
  481,
  482,
  s,
  [483, 55],
  484,
  485,
  485,
  486,
  487,
  487,
  488,
  488,
  489,
  490,
  490,
  491,
  491,
  492,
  492,
  493,
  494,
  494,
  495,
  495,
  496,
  496,
  s,
  [497, 52],
  498,
  498,
  s,
  [499, 3],
  500,
  s,
  [501, 4],
  s,
  [502, 8],
  s,
  [503, 3],
  s,
  [504, 6],
  s,
  [505, 4],
  s,
  [506, 4],
  507,
  507,
  s,
  [508, 21],
  509,
  510,
  510,
  s,
  [511, 4],
  512,
  s,
  [513, 14],
  514,
  514,
  s,
  [515, 11],
  s,
  [516, 3],
  517,
  517,
  518,
  518,
  519,
  519,
  s,
  [520, 4],
  521,
  521,
  s,
  [522, 9],
  523,
  523,
  524,
  524,
  525,
  525,
  s,
  [526, 5],
  s,
  [527, 3],
  528,
  528,
  529,
  529,
  s,
  [530, 7],
  s,
  [531, 3],
  s,
  [532, 4],
  s,
  [533, 23],
  s,
  [534, 4, 1],
  537,
  s,
  [538, 4],
  s,
  [539, 7],
  s,
  [540, 3],
  s,
  [541, 4],
  542,
  543,
  s,
  [544, 10],
  s,
  [545, 10],
  546,
  546,
  547,
  548,
  548,
  549,
  s,
  [549, 6, 1],
  s,
  [554, 3],
  555,
  555,
  556,
  556,
  557,
  558,
  558,
  s,
  [559, 61],
  s,
  [560, 3],
  s,
  [561, 6],
  s,
  [562, 3],
  563,
  563,
  564,
  564,
  565,
  565,
  566,
  566,
  s,
  [567, 12],
  568,
  568,
  569,
  569,
  s,
  [570, 6],
  571,
  571,
  s,
  [572, 6],
  573,
  573,
  574,
  574,
  575,
  575,
  576,
  576,
  577,
  577,
  s,
  [578, 4],
  579,
  579,
  580,
  580,
  s,
  [581, 3],
  582,
  582,
  s,
  [583, 5],
  584,
  s,
  [584, 6, 1],
  s,
  [589, 5, 1],
  593,
  s,
  [594, 4],
  595,
  595,
  s,
  [596, 3],
  s,
  [597, 4],
  598,
  598,
  599,
  599,
  600,
  600,
  601,
  601,
  602,
  s,
  [603, 14],
  604,
  605,
  605,
  606,
  606,
  s,
  [607, 5],
  608,
  s,
  [609, 4],
  610,
  s,
  [611, 4],
  612,
  612,
  613,
  613,
  s,
  [614, 3],
  615,
  615,
  616,
  s,
  [617, 4],
  s,
  [618, 4],
  619,
  619,
  620,
  620,
  621,
  621,
  622,
  622,
  s,
  [623, 3],
  s,
  [624, 4, 1],
  627,
  627,
  s,
  [628, 8],
  629,
  629,
  s,
  [630, 8],
  s,
  [631, 3],
  s,
  [632, 3],
  633,
  633,
  s,
  [634, 3],
  635,
  635,
  s,
  [636, 6],
  637,
  637,
  638,
  638,
  s,
  [639, 3],
  640,
  s,
  [640, 5, 1],
  s,
  [644, 7, 1],
  650,
  651,
  651,
  652,
  652,
  653,
  654,
  654,
  655,
  655,
  656,
  657,
  657,
  s,
  [658, 4],
  659,
  660,
  661,
  s,
  [661, 4, 1],
  s,
  [664, 3],
  665,
  665,
  666,
  666,
  s,
  [667, 6],
  s,
  [668, 4],
  s,
  [669, 5],
  670,
  671,
  s,
  [672, 4],
  673,
  674,
  674,
  675,
  675,
  s,
  [676, 5],
  677,
  s,
  [677, 6, 1],
  s,
  [682, 3],
  683,
  684,
  s,
  [684, 4, 1],
  687,
  688,
  688,
  689,
  s,
  [689, 4, 1],
  692,
  692,
  s,
  [693, 5],
  s,
  [694, 3],
  695,
  696,
  s,
  [697, 267],
  698,
  698,
  699,
  699,
  700,
  700,
  701,
  701,
  702,
  702,
  703,
  703,
  704,
  704,
  705,
  705,
  706,
  706,
  707,
  707,
  708,
  708,
  709,
  709,
  710,
  710,
  711,
  711,
  712,
  712,
  713,
  713,
  714,
  714,
  715,
  715,
  716,
  716,
  717,
  717,
  718,
  718,
  719,
  719,
  720,
  720,
  721,
  721,
  722,
  722,
  723,
  723,
  724,
  724,
  725,
  725,
  726,
  726,
  727,
  727,
  728,
  728,
  729,
  729,
  730,
  730,
  731,
  731,
  732,
  732,
  733,
  733,
  734,
  734,
  735,
  735,
  736,
  736,
  737,
  737,
  738,
  738,
  739,
  739,
  740,
  740,
  741,
  741,
  742,
  742,
  743,
  743,
  744,
  744,
  745,
  745,
  746,
  746,
  747,
  747,
  748,
  748,
  749,
  749,
  750,
  750,
  751,
  751,
  752,
  752,
  753,
  753,
  754,
  754,
  755,
  755,
  756,
  756,
  757,
  757,
  758,
  758,
  759,
  759,
  760,
  760,
  761,
  761,
  762,
  762,
  763,
  763,
  764,
  764,
  765,
  765,
  766,
  766,
  767,
  767,
  768,
  768,
  769,
  769
]),
  rule: u([
  1,
  1,
  2,
  1,
  2,
  2,
  3,
  c,
  [7, 3],
  4,
  1,
  0,
  s,
  [1, 54],
  3,
  3,
  1,
  5,
  10,
  4,
  8,
  11,
  4,
  2,
  1,
  c,
  [72, 3],
  s,
  [3, 3],
  c,
  [84, 4],
  1,
  1,
  5,
  5,
  c,
  [91, 6],
  s,
  [4, 5],
  s,
  [1, 6],
  s,
  [2, 3],
  c,
  [9, 7],
  3,
  4,
  3,
  1,
  4,
  2,
  2,
  s,
  [4, 5],
  5,
  s,
  [4, 8],
  6,
  c,
  [58, 3],
  c,
  [137, 4],
  4,
  c,
  [29, 3],
  s,
  [2, 7],
  3,
  4,
  0,
  0,
  c,
  [10, 7],
  5,
  0,
  6,
  7,
  6,
  7,
  1,
  3,
  4,
  5,
  3,
  3,
  c,
  [177, 3],
  c,
  [4, 4],
  c,
  [72, 3],
  c,
  [4, 5],
  c,
  [15, 4],
  c,
  [50, 3],
  c,
  [125, 3],
  c,
  [11, 3],
  c,
  [25, 3],
  4,
  c,
  [123, 3],
  c,
  [22, 5],
  c,
  [129, 5],
  2,
  c,
  [18, 3],
  s,
  [2, 5],
  c,
  [75, 3],
  0,
  4,
  1,
  3,
  c,
  [112, 3],
  1,
  c,
  [10, 3],
  c,
  [21, 4],
  c,
  [135, 3],
  3,
  0,
  c,
  [76, 4],
  c,
  [41, 3],
  3,
  c,
  [108, 3],
  3,
  8,
  c,
  [23, 3],
  c,
  [91, 4],
  c,
  [29, 3],
  1,
  5,
  c,
  [216, 3],
  c,
  [205, 4],
  c,
  [241, 19],
  c,
  [22, 4],
  5,
  5,
  2,
  2,
  6,
  8,
  6,
  8,
  s,
  [1, 7],
  5,
  6,
  6,
  0,
  c,
  [204, 3],
  c,
  [49, 12],
  5,
  c,
  [252, 3],
  s,
  [8, 5],
  c,
  [159, 4],
  c,
  [248, 6],
  4,
  c,
  [107, 4],
  1,
  5,
  c,
  [299, 3],
  4,
  2,
  0,
  s,
  [3, 4],
  5,
  3,
  c,
  [51, 3],
  s,
  [3, 11],
  c,
  [14, 4],
  c,
  [18, 12],
  6,
  6,
  c,
  [209, 3],
  c,
  [256, 6],
  6,
  5,
  6,
  c,
  [96, 3],
  4,
  c,
  [180, 4],
  c,
  [130, 5],
  c,
  [341, 7],
  s,
  [1, 3],
  6,
  c,
  [214, 3],
  c,
  [280, 4],
  5,
  4,
  s,
  [7, 4, -1],
  5,
  8,
  7,
  4,
  c,
  [297, 3],
  c,
  [463, 3],
  c,
  [37, 3],
  c,
  [145, 4],
  c,
  [147, 8],
  3,
  9,
  5,
  c,
  [22, 4],
  c,
  [296, 4],
  c,
  [247, 3],
  1,
  c,
  [128, 3],
  c,
  [12, 3],
  c,
  [283, 7],
  2,
  4,
  6,
  9,
  3,
  c,
  [6, 3],
  4,
  6,
  c,
  [440, 3],
  c,
  [467, 4],
  c,
  [119, 3],
  c,
  [88, 4],
  c,
  [170, 3],
  c,
  [52, 6],
  3,
  2,
  5,
  3,
  6,
  c,
  [193, 3],
  c,
  [298, 3],
  c,
  [32, 3],
  5,
  c,
  [419, 3],
  0,
  2,
  s,
  [6, 3],
  8,
  c,
  [113, 3],
  7,
  c,
  [59, 3],
  c,
  [63, 3],
  6,
  c,
  [339, 4],
  4,
  5,
  5,
  8,
  9,
  c,
  [7, 3],
  3,
  5,
  c,
  [76, 4],
  4,
  6,
  c,
  [4, 4],
  11,
  8,
  c,
  [212, 3],
  c,
  [494, 3],
  c,
  [496, 4],
  s,
  [2, 4],
  c,
  [427, 5],
  c,
  [332, 9],
  c,
  [19, 3],
  c,
  [163, 4],
  c,
  [212, 5],
  c,
  [221, 3],
  5,
  5,
  6,
  c,
  [22, 3],
  c,
  [460, 5],
  c,
  [517, 4],
  c,
  [305, 3],
  c,
  [597, 4],
  c,
  [55, 5],
  c,
  [488, 7],
  c,
  [236, 5],
  6,
  c,
  [141, 4],
  c,
  [22, 6],
  4,
  6,
  s,
  [1, 4, 2],
  7,
  9,
  7,
  9,
  3,
  c,
  [22, 3],
  0,
  2,
  c,
  [145, 4],
  c,
  [209, 3],
  2,
  1,
  8,
  c,
  [614, 4],
  3,
  7,
  6,
  3,
  c,
  [298, 3],
  c,
  [155, 4],
  s,
  [4, 4, -1],
  c,
  [83, 4],
  6,
  c,
  [84, 5],
  c,
  [120, 3],
  9,
  8,
  9,
  c,
  [756, 4],
  c,
  [142, 4],
  c,
  [114, 4],
  s,
  [1, 267],
  c,
  [542, 3],
  c,
  [804, 4],
  c,
  [8, 6],
  c,
  [4, 5],
  c,
  [844, 4],
  c,
  [20, 5],
  c,
  [347, 3],
  c,
  [32, 3],
  c,
  [8, 5],
  c,
  [4, 7],
  c,
  [38, 11],
  c,
  [46, 9],
  c,
  [68, 5],
  c,
  [74, 9],
  c,
  [22, 9],
  c,
  [44, 20],
  c,
  [4, 23],
  c,
  [94, 11]
])
}),
performAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : main $end */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
    break;

case 1:
    /*! Production::    Literal : LITERAL */

    if (alasql.options.casesensitive) this.$ = yyvstack[yysp];
    else this.$ = yyvstack[yysp].toLowerCase();
    break;

case 2:
    /*! Production::    Literal : BRALITERAL */

    this.$ = {val:doubleq(yyvstack[yysp].substr(1,yyvstack[yysp].length-2)), wrap:yyvstack[yysp].substr(0,1)};
    break;

case 3:
    /*! Production::    Literal : error NonReserved */

    this.$ = yyvstack[yysp].toLowerCase()
    break;

case 4:
    /*! Production::    LiteralWithSpaces : LITERAL */
case 312:
    /*! Production::    Expression : JavaScript */

    this.$ = yyvstack[yysp]
    break;

case 5:
    /*! Production::    LiteralWithSpaces : LiteralWithSpaces LITERAL */

    this.$ = yyvstack[yysp] ? yyvstack[yysp - 1] + ' ' + yyvstack[yysp] : yyvstack[yysp - 1]
    break;

case 6:
    /*! Production::    main : Statements EOF */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)
    
    
    return new yy.Statements({statements:yyvstack[yysp - 1]});
    break;

case 7:
    /*! Production::    Statements : Statements Statements_group AStatement */

    this.$ = yyvstack[yysp - 2]; if(yyvstack[yysp]) yyvstack[yysp - 2].push(yyvstack[yysp]);
    break;

case 8:
    /*! Production::    Statements : AStatement */
case 9:
    /*! Production::    Statements : ExplainStatement */
case 70:
    /*! Production::    WithTablesList : WithTable */
case 80:
    /*! Production::    AsList : AsPart */
case 85:
    /*! Production::    RemoveColumnsList : RemoveColumn */
case 143:
    /*! Production::    SearchSelectorList : SearchSelectorList_repetition2 */
case 177:
    /*! Production::    FromTablesList : FromTable */
case 205:
    /*! Production::    JoinTablesList : JoinTable */
case 206:
    /*! Production::    JoinTablesList : ApplyClause */
case 242:
    /*! Production::    GroupExpressionsList : GroupExpression */
case 261:
    /*! Production::    OrderExpressionsList : OrderExpression */
case 276:
    /*! Production::    ResultColumns : ResultColumn */
case 359:
    /*! Production::    ExprList : Expression */
case 377:
    /*! Production::    WhensList : When */
case 456:
    /*! Production::    SetColumnsList : SetColumn */
case 479:
    /*! Production::    ValuesListsList : Json */
case 480:
    /*! Production::    ValuesListsList : ParamValue */
case 484:
    /*! Production::    ValuesList : Expression */
case 492:
    /*! Production::    ColumnsList : Column */
case 513:
    /*! Production::    ConstraintsList : Constraint */
case 533:
    /*! Production::    ColsList : Literal */
case 534:
    /*! Production::    ColsList : STRING */
case 537:
    /*! Production::    ColumnDefsList : ColumnDef */
case 571:
    /*! Production::    TablesList : Table */
case 654:
    /*! Production::    JsonElementsList : JsonValue */
case 664:
    /*! Production::    SetPropsList : ArrowDot SetProp */
case 688:
    /*! Production::    StringValuesList : StringValue */
case 690:
    /*! Production::    PluginsList : Plugin */
case 692:
    /*! Production::    DeclaresList : DeclareItem */
case 706:
    /*! Production::    MergeMatchedList : MergeMatched */
case 707:
    /*! Production::    MergeMatchedList : MergeNotMatched */
case 737:
    /*! Production::    GraphList : GraphVertexEdge */
case 761:
    /*! Production::    TermsList : Term */
case 1066:
    /*! Production::    SearchSelector_repetition_plus : SearchSelector */
case 1068:
    /*! Production::    SearchSelector_repetition_plus2 : SearchSelector */

    this.$ = [yyvstack[yysp]];
    break;

case 10:
    /*! Production::    ExplainStatement : EXPLAIN AStatement */

    this.$ = yyvstack[yysp]; yyvstack[yysp].explain = true;
    break;

case 11:
    /*! Production::    ExplainStatement : EXPLAIN QUERY PLAN AStatement */

    this.$ = yyvstack[yysp];  yyvstack[yysp].explain = true;
    break;

case 12:
    /*! Production::    AStatement : Statement */

    this.$ = yyvstack[yysp];
    
    // TODO combine exists and queries
    if(yy.exists) this.$.exists = yy.exists;
    delete yy.exists;
    if(yy.queries) this.$.queries = yy.queries;
    delete yy.queries;
    break;

case 13:
    /*! Production::    Statement : %epsilon */
case 162:
    /*! Production::    TopClause : %epsilon */
case 163:
    /*! Production::    IntoClause : %epsilon */
case 172:
    /*! Production::    FromClause : %epsilon */
case 237:
    /*! Production::    OnClause : %epsilon */
case 238:
    /*! Production::    WhereClause : %epsilon */
case 240:
    /*! Production::    GroupClause : %epsilon */
case 248:
    /*! Production::    HavingClause : %epsilon */
case 250:
    /*! Production::    UnionClause : %epsilon */
case 259:
    /*! Production::    OrderClause : %epsilon */
case 270:
    /*! Production::    LimitClause : %epsilon */
case 273:
    /*! Production::    OffsetClause : %epsilon */
case 333:
    /*! Production::    OverClause : %epsilon */
case 380:
    /*! Production::    ElseClause : %epsilon */
case 496:
    /*! Production::    TableClass : TABLE */
case 506:
    /*! Production::    TemporaryClause : %epsilon */
case 508:
    /*! Production::    IfNotExists : %epsilon */
case 520:
    /*! Production::    ConstraintName : %epsilon */
case 526:
    /*! Production::    OnForeignKeyClause : %epsilon */
case 527:
    /*! Production::    OnForeignKeyClause : OnDeleteClause OnUpdateClause */
case 528:
    /*! Production::    OnDeleteClause : ON DELETE NO ACTION */
case 529:
    /*! Production::    OnUpdateClause : ON UPDATE NO ACTION */
case 572:
    /*! Production::    IfExists : %epsilon */
case 589:
    /*! Production::    AsClause : %epsilon */
case 729:
    /*! Production::    CreateVertexSet : %epsilon */
case 1048:
    /*! Production::    Select_option : %epsilon */
case 1050:
    /*! Production::    Select_option2 : %epsilon */
case 1054:
    /*! Production::    Select_option3 : %epsilon */
case 1056:
    /*! Production::    PivotClause_option : %epsilon */
case 1058:
    /*! Production::    PivotClause_option2 : %epsilon */
case 1060:
    /*! Production::    PivotClause_option3 : %epsilon */
case 1062:
    /*! Production::    RemoveClause_option : %epsilon */
case 1064:
    /*! Production::    SearchSelector_option : %epsilon */
case 1070:
    /*! Production::    SearchSelector_option2 : %epsilon */
case 1092:
    /*! Production::    SelectClause_option : %epsilon */
case 1094:
    /*! Production::    TopClause_option : %epsilon */
case 1096:
    /*! Production::    FromTable_option : %epsilon */
case 1098:
    /*! Production::    FromTable_option2 : %epsilon */
case 1100:
    /*! Production::    JoinTableAs_option : %epsilon */
case 1102:
    /*! Production::    JoinTableAs_option2 : %epsilon */
case 1104:
    /*! Production::    LimitClause_option : %epsilon */
case 1106:
    /*! Production::    LimitClause_option2 : %epsilon */
case 1108:
    /*! Production::    LimitClause_option3 : %epsilon */
case 1110:
    /*! Production::    LimitClause_option4 : %epsilon */
case 1116:
    /*! Production::    FuncValue_option : %epsilon */
case 1122:
    /*! Production::    PrimaryKey_option : %epsilon */
case 1124:
    /*! Production::    ForeignKey_option : %epsilon */
case 1126:
    /*! Production::    UniqueKey_option : %epsilon */
case 1128:
    /*! Production::    UniqueKey_option2 : %epsilon */
case 1130:
    /*! Production::    ColumnConstraint_option : %epsilon */
case 1132:
    /*! Production::    ColumnConstraint_option2 : %epsilon */
case 1136:
    /*! Production::    CreateView_option : %epsilon */
case 1138:
    /*! Production::    CreateView_option2 : %epsilon */
case 1140:
    /*! Production::    CreateVertex_option : %epsilon */
case 1142:
    /*! Production::    CreateVertex_option2 : %epsilon */
case 1144:
    /*! Production::    CreateVertex_option3 : %epsilon */
case 1146:
    /*! Production::    CreateEdge_option : %epsilon */
case 1148:
    /*! Production::    GraphVertexEdge_option : %epsilon */
case 1150:
    /*! Production::    GraphVertexEdge_option2 : %epsilon */
case 1152:
    /*! Production::    GraphVertexEdge_option3 : %epsilon */
case 1154:
    /*! Production::    GraphVertexEdge_option4 : %epsilon */
case 1156:
    /*! Production::    GraphVertexEdge_option5 : %epsilon */
case 1166:
    /*! Production::    GraphElement_option : %epsilon */
case 1168:
    /*! Production::    GraphElement_option2 : %epsilon */
case 1170:
    /*! Production::    GraphElement_option3 : %epsilon */
case 1172:
    /*! Production::    GraphElement_option4 : %epsilon */
case 1174:
    /*! Production::    GraphElement_option5 : %epsilon */
case 1176:
    /*! Production::    GraphElement_option6 : %epsilon */
case 1186:
    /*! Production::    CreateTrigger_option : %epsilon */
case 1188:
    /*! Production::    CreateTrigger_option2 : %epsilon */

    this.$ = undefined;
    break;

case 14:
    /*! Production::    Statement : AlterTable */
case 15:
    /*! Production::    Statement : AttachDatabase */
case 16:
    /*! Production::    Statement : Call */
case 17:
    /*! Production::    Statement : CreateDatabase */
case 18:
    /*! Production::    Statement : CreateIndex */
case 19:
    /*! Production::    Statement : CreateGraph */
case 20:
    /*! Production::    Statement : CreateTable */
case 21:
    /*! Production::    Statement : CreateView */
case 22:
    /*! Production::    Statement : CreateEdge */
case 23:
    /*! Production::    Statement : CreateVertex */
case 24:
    /*! Production::    Statement : Declare */
case 25:
    /*! Production::    Statement : Delete */
case 26:
    /*! Production::    Statement : DetachDatabase */
case 27:
    /*! Production::    Statement : DropDatabase */
case 28:
    /*! Production::    Statement : DropIndex */
case 29:
    /*! Production::    Statement : DropTable */
case 30:
    /*! Production::    Statement : DropView */
case 31:
    /*! Production::    Statement : If */
case 32:
    /*! Production::    Statement : Insert */
case 33:
    /*! Production::    Statement : Merge */
case 34:
    /*! Production::    Statement : Reindex */
case 35:
    /*! Production::    Statement : RenameTable */
case 36:
    /*! Production::    Statement : Select */
case 37:
    /*! Production::    Statement : ShowCreateTable */
case 38:
    /*! Production::    Statement : ShowColumns */
case 39:
    /*! Production::    Statement : ShowDatabases */
case 40:
    /*! Production::    Statement : ShowIndex */
case 41:
    /*! Production::    Statement : ShowTables */
case 42:
    /*! Production::    Statement : TruncateTable */
case 43:
    /*! Production::    Statement : WithSelect */
case 44:
    /*! Production::    Statement : CreateTrigger */
case 45:
    /*! Production::    Statement : DropTrigger */
case 46:
    /*! Production::    Statement : BeginTransaction */
case 47:
    /*! Production::    Statement : CommitTransaction */
case 48:
    /*! Production::    Statement : RollbackTransaction */
case 49:
    /*! Production::    Statement : EndTransaction */
case 50:
    /*! Production::    Statement : UseDatabase */
case 51:
    /*! Production::    Statement : Update */
case 52:
    /*! Production::    Statement : JavaScript */
case 53:
    /*! Production::    Statement : Source */
case 54:
    /*! Production::    Statement : Assert */
case 55:
    /*! Production::    Statement : While */
case 56:
    /*! Production::    Statement : Continue */
case 57:
    /*! Production::    Statement : Break */
case 58:
    /*! Production::    Statement : BeginEnd */
case 59:
    /*! Production::    Statement : Print */
case 60:
    /*! Production::    Statement : Require */
case 61:
    /*! Production::    Statement : SetVariable */
case 62:
    /*! Production::    Statement : ExpressionStatement */
case 63:
    /*! Production::    Statement : AddRule */
case 64:
    /*! Production::    Statement : Query */
case 65:
    /*! Production::    Statement : Echo */
case 66:
    /*! Production::    Statement : CreateFunction */
case 67:
    /*! Production::    Statement : CreateAggregate */
case 88:
    /*! Production::    ArrowDot : ARROW */
case 89:
    /*! Production::    ArrowDot : DOT */
case 474:
    /*! Production::    Values : VALUES */
case 475:
    /*! Production::    Values : VALUE */
case 477:
    /*! Production::    Into : INTO */
case 499:
    /*! Production::    CreateTableOptionsClause : CreateTableOptions */
case 501:
    /*! Production::    CreateTableOptions : CreateTableOption */
case 502:
    /*! Production::    CreateTableOption : DEFAULT */
case 779:
    /*! Production::    NonReserved : A */
case 780:
    /*! Production::    NonReserved : ABSENT */
case 781:
    /*! Production::    NonReserved : ABSOLUTE */
case 782:
    /*! Production::    NonReserved : ACCORDING */
case 783:
    /*! Production::    NonReserved : ACTION */
case 784:
    /*! Production::    NonReserved : ADA */
case 785:
    /*! Production::    NonReserved : ADD */
case 786:
    /*! Production::    NonReserved : ADMIN */
case 787:
    /*! Production::    NonReserved : AFTER */
case 788:
    /*! Production::    NonReserved : ALWAYS */
case 789:
    /*! Production::    NonReserved : ASC */
case 790:
    /*! Production::    NonReserved : ASSERTION */
case 791:
    /*! Production::    NonReserved : ASSIGNMENT */
case 792:
    /*! Production::    NonReserved : ATTRIBUTE */
case 793:
    /*! Production::    NonReserved : ATTRIBUTES */
case 794:
    /*! Production::    NonReserved : BASE64 */
case 795:
    /*! Production::    NonReserved : BEFORE */
case 796:
    /*! Production::    NonReserved : BERNOULLI */
case 797:
    /*! Production::    NonReserved : BLOCKED */
case 798:
    /*! Production::    NonReserved : BOM */
case 799:
    /*! Production::    NonReserved : BREADTH */
case 800:
    /*! Production::    NonReserved : C */
case 801:
    /*! Production::    NonReserved : CASCADE */
case 802:
    /*! Production::    NonReserved : CATALOG */
case 803:
    /*! Production::    NonReserved : CATALOG_NAME */
case 804:
    /*! Production::    NonReserved : CHAIN */
case 805:
    /*! Production::    NonReserved : CHARACTERISTICS */
case 806:
    /*! Production::    NonReserved : CHARACTERS */
case 807:
    /*! Production::    NonReserved : CHARACTER_SET_CATALOG */
case 808:
    /*! Production::    NonReserved : CHARACTER_SET_NAME */
case 809:
    /*! Production::    NonReserved : CHARACTER_SET_SCHEMA */
case 810:
    /*! Production::    NonReserved : CLASS_ORIGIN */
case 811:
    /*! Production::    NonReserved : COBOL */
case 812:
    /*! Production::    NonReserved : COLLATION */
case 813:
    /*! Production::    NonReserved : COLLATION_CATALOG */
case 814:
    /*! Production::    NonReserved : COLLATION_NAME */
case 815:
    /*! Production::    NonReserved : COLLATION_SCHEMA */
case 816:
    /*! Production::    NonReserved : COLUMNS */
case 817:
    /*! Production::    NonReserved : COLUMN_NAME */
case 818:
    /*! Production::    NonReserved : COMMAND_FUNCTION */
case 819:
    /*! Production::    NonReserved : COMMAND_FUNCTION_CODE */
case 820:
    /*! Production::    NonReserved : COMMITTED */
case 821:
    /*! Production::    NonReserved : CONDITION_NUMBER */
case 822:
    /*! Production::    NonReserved : CONNECTION */
case 823:
    /*! Production::    NonReserved : CONNECTION_NAME */
case 824:
    /*! Production::    NonReserved : CONSTRAINTS */
case 825:
    /*! Production::    NonReserved : CONSTRAINT_CATALOG */
case 826:
    /*! Production::    NonReserved : CONSTRAINT_NAME */
case 827:
    /*! Production::    NonReserved : CONSTRAINT_SCHEMA */
case 828:
    /*! Production::    NonReserved : CONSTRUCTOR */
case 829:
    /*! Production::    NonReserved : CONTENT */
case 830:
    /*! Production::    NonReserved : CONTINUE */
case 831:
    /*! Production::    NonReserved : CONTROL */
case 832:
    /*! Production::    NonReserved : CURSOR_NAME */
case 833:
    /*! Production::    NonReserved : DATA */
case 834:
    /*! Production::    NonReserved : DATETIME_INTERVAL_CODE */
case 835:
    /*! Production::    NonReserved : DATETIME_INTERVAL_PRECISION */
case 836:
    /*! Production::    NonReserved : DB */
case 837:
    /*! Production::    NonReserved : DEFAULTS */
case 838:
    /*! Production::    NonReserved : DEFERRABLE */
case 839:
    /*! Production::    NonReserved : DEFERRED */
case 840:
    /*! Production::    NonReserved : DEFINED */
case 841:
    /*! Production::    NonReserved : DEFINER */
case 842:
    /*! Production::    NonReserved : DEGREE */
case 843:
    /*! Production::    NonReserved : DEPTH */
case 844:
    /*! Production::    NonReserved : DERIVED */
case 845:
    /*! Production::    NonReserved : DESC */
case 846:
    /*! Production::    NonReserved : DESCRIPTOR */
case 847:
    /*! Production::    NonReserved : DIAGNOSTICS */
case 848:
    /*! Production::    NonReserved : DISPATCH */
case 849:
    /*! Production::    NonReserved : DOCUMENT */
case 850:
    /*! Production::    NonReserved : DOMAIN */
case 851:
    /*! Production::    NonReserved : DYNAMIC_FUNCTION */
case 852:
    /*! Production::    NonReserved : DYNAMIC_FUNCTION_CODE */
case 853:
    /*! Production::    NonReserved : EMPTY */
case 854:
    /*! Production::    NonReserved : ENCODING */
case 855:
    /*! Production::    NonReserved : ENFORCED */
case 856:
    /*! Production::    NonReserved : EXCLUDE */
case 857:
    /*! Production::    NonReserved : EXCLUDING */
case 858:
    /*! Production::    NonReserved : EXPRESSION */
case 859:
    /*! Production::    NonReserved : FILE */
case 860:
    /*! Production::    NonReserved : FINAL */
case 861:
    /*! Production::    NonReserved : FIRST */
case 862:
    /*! Production::    NonReserved : FLAG */
case 863:
    /*! Production::    NonReserved : FOLLOWING */
case 864:
    /*! Production::    NonReserved : FORTRAN */
case 865:
    /*! Production::    NonReserved : FOUND */
case 866:
    /*! Production::    NonReserved : FS */
case 867:
    /*! Production::    NonReserved : G */
case 868:
    /*! Production::    NonReserved : GENERAL */
case 869:
    /*! Production::    NonReserved : GENERATED */
case 870:
    /*! Production::    NonReserved : GO */
case 871:
    /*! Production::    NonReserved : GOTO */
case 872:
    /*! Production::    NonReserved : GRANTED */
case 873:
    /*! Production::    NonReserved : HEX */
case 874:
    /*! Production::    NonReserved : HIERARCHY */
case 875:
    /*! Production::    NonReserved : ID */
case 876:
    /*! Production::    NonReserved : IGNORE */
case 877:
    /*! Production::    NonReserved : IMMEDIATE */
case 878:
    /*! Production::    NonReserved : IMMEDIATELY */
case 879:
    /*! Production::    NonReserved : IMPLEMENTATION */
case 880:
    /*! Production::    NonReserved : INCLUDING */
case 881:
    /*! Production::    NonReserved : INCREMENT */
case 882:
    /*! Production::    NonReserved : INDENT */
case 883:
    /*! Production::    NonReserved : INITIALLY */
case 884:
    /*! Production::    NonReserved : INPUT */
case 885:
    /*! Production::    NonReserved : INSTANCE */
case 886:
    /*! Production::    NonReserved : INSTANTIABLE */
case 887:
    /*! Production::    NonReserved : INSTEAD */
case 888:
    /*! Production::    NonReserved : INTEGRITY */
case 889:
    /*! Production::    NonReserved : INVOKER */
case 890:
    /*! Production::    NonReserved : ISOLATION */
case 891:
    /*! Production::    NonReserved : K */
case 892:
    /*! Production::    NonReserved : KEY */
case 893:
    /*! Production::    NonReserved : KEY_MEMBER */
case 894:
    /*! Production::    NonReserved : KEY_TYPE */
case 895:
    /*! Production::    NonReserved : LAST */
case 896:
    /*! Production::    NonReserved : LENGTH */
case 897:
    /*! Production::    NonReserved : LEVEL */
case 898:
    /*! Production::    NonReserved : LIBRARY */
case 899:
    /*! Production::    NonReserved : LIMIT */
case 900:
    /*! Production::    NonReserved : LINK */
case 901:
    /*! Production::    NonReserved : LOCATION */
case 902:
    /*! Production::    NonReserved : LOCATOR */
case 903:
    /*! Production::    NonReserved : M */
case 904:
    /*! Production::    NonReserved : MAP */
case 905:
    /*! Production::    NonReserved : MAPPING */
case 906:
    /*! Production::    NonReserved : MATCHED */
case 907:
    /*! Production::    NonReserved : MAXVALUE */
case 908:
    /*! Production::    NonReserved : MESSAGE_LENGTH */
case 909:
    /*! Production::    NonReserved : MESSAGE_OCTET_LENGTH */
case 910:
    /*! Production::    NonReserved : MESSAGE_TEXT */
case 911:
    /*! Production::    NonReserved : MINVALUE */
case 912:
    /*! Production::    NonReserved : MORE */
case 913:
    /*! Production::    NonReserved : MUMPS */
case 914:
    /*! Production::    NonReserved : NAME */
case 915:
    /*! Production::    NonReserved : NAMES */
case 916:
    /*! Production::    NonReserved : NAMESPACE */
case 917:
    /*! Production::    NonReserved : NESTING */
case 918:
    /*! Production::    NonReserved : NEXT */
case 919:
    /*! Production::    NonReserved : NFC */
case 920:
    /*! Production::    NonReserved : NFD */
case 921:
    /*! Production::    NonReserved : NFKC */
case 922:
    /*! Production::    NonReserved : NFKD */
case 923:
    /*! Production::    NonReserved : NIL */
case 924:
    /*! Production::    NonReserved : NORMALIZED */
case 925:
    /*! Production::    NonReserved : NULLABLE */
case 926:
    /*! Production::    NonReserved : NULLS */
case 927:
    /*! Production::    NonReserved : NUMBER */
case 928:
    /*! Production::    NonReserved : OBJECT */
case 929:
    /*! Production::    NonReserved : OCTETS */
case 930:
    /*! Production::    NonReserved : OFF */
case 931:
    /*! Production::    NonReserved : OPTION */
case 932:
    /*! Production::    NonReserved : OPTIONS */
case 933:
    /*! Production::    NonReserved : ORDERING */
case 934:
    /*! Production::    NonReserved : ORDINALITY */
case 935:
    /*! Production::    NonReserved : OTHERS */
case 936:
    /*! Production::    NonReserved : OUTPUT */
case 937:
    /*! Production::    NonReserved : OVERRIDING */
case 938:
    /*! Production::    NonReserved : P */
case 939:
    /*! Production::    NonReserved : PAD */
case 940:
    /*! Production::    NonReserved : PARAMETER_MODE */
case 941:
    /*! Production::    NonReserved : PARAMETER_NAME */
case 942:
    /*! Production::    NonReserved : PARAMETER_ORDINAL_POSITION */
case 943:
    /*! Production::    NonReserved : PARAMETER_SPECIFIC_CATALOG */
case 944:
    /*! Production::    NonReserved : PARAMETER_SPECIFIC_NAME */
case 945:
    /*! Production::    NonReserved : PARAMETER_SPECIFIC_SCHEMA */
case 946:
    /*! Production::    NonReserved : PARTIAL */
case 947:
    /*! Production::    NonReserved : PASCAL */
case 948:
    /*! Production::    NonReserved : PASSING */
case 949:
    /*! Production::    NonReserved : PASSTHROUGH */
case 950:
    /*! Production::    NonReserved : PATH */
case 951:
    /*! Production::    NonReserved : PERMISSION */
case 952:
    /*! Production::    NonReserved : PLACING */
case 953:
    /*! Production::    NonReserved : PLI */
case 954:
    /*! Production::    NonReserved : PRECEDING */
case 955:
    /*! Production::    NonReserved : PRESERVE */
case 956:
    /*! Production::    NonReserved : PRIOR */
case 957:
    /*! Production::    NonReserved : PRIVILEGES */
case 958:
    /*! Production::    NonReserved : PUBLIC */
case 959:
    /*! Production::    NonReserved : READ */
case 960:
    /*! Production::    NonReserved : RECOVERY */
case 961:
    /*! Production::    NonReserved : RELATIVE */
case 962:
    /*! Production::    NonReserved : REPEATABLE */
case 963:
    /*! Production::    NonReserved : REQUIRING */
case 964:
    /*! Production::    NonReserved : RESPECT */
case 965:
    /*! Production::    NonReserved : RESTART */
case 966:
    /*! Production::    NonReserved : RESTORE */
case 967:
    /*! Production::    NonReserved : RESTRICT */
case 968:
    /*! Production::    NonReserved : RETURNED_CARDINALITY */
case 969:
    /*! Production::    NonReserved : RETURNED_LENGTH */
case 970:
    /*! Production::    NonReserved : RETURNED_OCTET_LENGTH */
case 971:
    /*! Production::    NonReserved : RETURNED_SQLSTATE */
case 972:
    /*! Production::    NonReserved : RETURNING */
case 973:
    /*! Production::    NonReserved : ROLE */
case 974:
    /*! Production::    NonReserved : ROUTINE */
case 975:
    /*! Production::    NonReserved : ROUTINE_CATALOG */
case 976:
    /*! Production::    NonReserved : ROUTINE_NAME */
case 977:
    /*! Production::    NonReserved : ROUTINE_SCHEMA */
case 978:
    /*! Production::    NonReserved : ROW_COUNT */
case 979:
    /*! Production::    NonReserved : SCALE */
case 980:
    /*! Production::    NonReserved : SCHEMA */
case 981:
    /*! Production::    NonReserved : SCHEMA_NAME */
case 982:
    /*! Production::    NonReserved : SCOPE_CATALOG */
case 983:
    /*! Production::    NonReserved : SCOPE_NAME */
case 984:
    /*! Production::    NonReserved : SCOPE_SCHEMA */
case 985:
    /*! Production::    NonReserved : SECTION */
case 986:
    /*! Production::    NonReserved : SECURITY */
case 987:
    /*! Production::    NonReserved : SELECTIVE */
case 988:
    /*! Production::    NonReserved : SELF */
case 989:
    /*! Production::    NonReserved : SEQUENCE */
case 990:
    /*! Production::    NonReserved : SERIALIZABLE */
case 991:
    /*! Production::    NonReserved : SERVER */
case 992:
    /*! Production::    NonReserved : SERVER_NAME */
case 993:
    /*! Production::    NonReserved : SESSION */
case 994:
    /*! Production::    NonReserved : SETS */
case 995:
    /*! Production::    NonReserved : SIMPLE */
case 996:
    /*! Production::    NonReserved : SIZE */
case 997:
    /*! Production::    NonReserved : SOURCE */
case 998:
    /*! Production::    NonReserved : SPACE */
case 999:
    /*! Production::    NonReserved : SPECIFIC_NAME */
case 1000:
    /*! Production::    NonReserved : STANDALONE */
case 1001:
    /*! Production::    NonReserved : STATE */
case 1002:
    /*! Production::    NonReserved : STATEMENT */
case 1003:
    /*! Production::    NonReserved : STRIP */
case 1004:
    /*! Production::    NonReserved : STRUCTURE */
case 1005:
    /*! Production::    NonReserved : STYLE */
case 1006:
    /*! Production::    NonReserved : SUBCLASS_ORIGIN */
case 1007:
    /*! Production::    NonReserved : T */
case 1008:
    /*! Production::    NonReserved : TABLE_NAME */
case 1009:
    /*! Production::    NonReserved : TEMPORARY */
case 1010:
    /*! Production::    NonReserved : TIES */
case 1011:
    /*! Production::    NonReserved : TOKEN */
case 1012:
    /*! Production::    NonReserved : TOP_LEVEL_COUNT */
case 1013:
    /*! Production::    NonReserved : TRANSACTION */
case 1014:
    /*! Production::    NonReserved : TRANSACTIONS_COMMITTED */
case 1015:
    /*! Production::    NonReserved : TRANSACTIONS_ROLLED_BACK */
case 1016:
    /*! Production::    NonReserved : TRANSACTION_ACTIVE */
case 1017:
    /*! Production::    NonReserved : TRANSFORM */
case 1018:
    /*! Production::    NonReserved : TRANSFORMS */
case 1019:
    /*! Production::    NonReserved : TRIGGER_CATALOG */
case 1020:
    /*! Production::    NonReserved : TRIGGER_NAME */
case 1021:
    /*! Production::    NonReserved : TRIGGER_SCHEMA */
case 1022:
    /*! Production::    NonReserved : TYPE */
case 1023:
    /*! Production::    NonReserved : UNBOUNDED */
case 1024:
    /*! Production::    NonReserved : UNCOMMITTED */
case 1025:
    /*! Production::    NonReserved : UNDER */
case 1026:
    /*! Production::    NonReserved : UNLINK */
case 1027:
    /*! Production::    NonReserved : UNNAMED */
case 1028:
    /*! Production::    NonReserved : UNTYPED */
case 1029:
    /*! Production::    NonReserved : URI */
case 1030:
    /*! Production::    NonReserved : USAGE */
case 1031:
    /*! Production::    NonReserved : USER_DEFINED_TYPE_CATALOG */
case 1032:
    /*! Production::    NonReserved : USER_DEFINED_TYPE_CODE */
case 1033:
    /*! Production::    NonReserved : USER_DEFINED_TYPE_NAME */
case 1034:
    /*! Production::    NonReserved : USER_DEFINED_TYPE_SCHEMA */
case 1035:
    /*! Production::    NonReserved : VALID */
case 1036:
    /*! Production::    NonReserved : VERSION */
case 1037:
    /*! Production::    NonReserved : VIEW */
case 1038:
    /*! Production::    NonReserved : WHITESPACE */
case 1039:
    /*! Production::    NonReserved : WORK */
case 1040:
    /*! Production::    NonReserved : WRAPPER */
case 1041:
    /*! Production::    NonReserved : WRITE */
case 1042:
    /*! Production::    NonReserved : XMLDECLARATION */
case 1043:
    /*! Production::    NonReserved : XMLSCHEMA */
case 1044:
    /*! Production::    NonReserved : YES */
case 1045:
    /*! Production::    NonReserved : ZONE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
    break;

case 68:
    /*! Production::    WithSelect : WITH WithTablesList Select */

    this.$ = new yy.WithSelect({withs: yyvstack[yysp - 1], select:yyvstack[yysp]});
    break;

case 69:
    /*! Production::    WithTablesList : WithTablesList COMMA WithTable */
case 570:
    /*! Production::    TablesList : TablesList COMMA Table */

    yyvstack[yysp - 2].push(yyvstack[yysp]); this.$=yyvstack[yysp - 2];
    break;

case 71:
    /*! Production::    WithTable : Literal AS LPAR Select RPAR */

    this.$ = {name:yyvstack[yysp - 4], select:yyvstack[yysp - 1]};
    break;

case 72:
    /*! Production::    Select : SelectClause Select_option IntoClause FromClause Select_option2 WhereClause GroupClause OrderClause LimitClause UnionClause */

    // default action (generated by JISON mode classic/merge :: 10,VT,VA,VU,VUbA,-,-,-,-):
    this.$ = yyvstack[yysp - 9];
    // END of default action (generated by JISON mode classic/merge :: 10,VT,VA,VU,VUbA,-,-,-,-)
    
    
    yy.extend(this.$,yyvstack[yysp - 9]); yy.extend(this.$,yyvstack[yysp - 8]); yy.extend(this.$,yyvstack[yysp - 7]); yy.extend(this.$,yyvstack[yysp - 6]);
    yy.extend(this.$,yyvstack[yysp - 5]); yy.extend(this.$,yyvstack[yysp - 4]);yy.extend(this.$,yyvstack[yysp - 3]);
    yy.extend(this.$,yyvstack[yysp - 2]); yy.extend(this.$,yyvstack[yysp - 1]); yy.extend(this.$,yyvstack[yysp]);
    this.$ = yyvstack[yysp - 9];
    /*		    if(yy.exists) $$.exists = yy.exists;
    delete yy.exists;
    if(yy.queries) $$.queries = yy.queries;
    delete yy.queries;
    */
    break;

case 73:
    /*! Production::    Select : SEARCH Select_repetition IntoClause Select_option3 */

    this.$ = new yy.Search({selectors:yyvstack[yysp - 2], from:yyvstack[yysp]});
    yy.extend(this.$,yyvstack[yysp - 1]);
    break;

case 74:
    /*! Production::    PivotClause : PIVOT LPAR Expression FOR Literal PivotClause_option RPAR PivotClause_option2 */

    this.$ = {pivot:{expr:yyvstack[yysp - 5], columnid:yyvstack[yysp - 3], inlist:yyvstack[yysp - 2], as:yyvstack[yysp]}};
    break;

case 75:
    /*! Production::    PivotClause : UNPIVOT LPAR Literal FOR Literal IN LPAR ColumnsList RPAR RPAR PivotClause_option3 */

    this.$ = {unpivot:{tocolumnid:yyvstack[yysp - 8], forcolumnid:yyvstack[yysp - 6], inlist:yyvstack[yysp - 3], as:yyvstack[yysp]}};
    break;

case 76:
    /*! Production::    PivotClause2 : IN LPAR AsList RPAR */
case 444:
    /*! Production::    ColFunc : AT LPAR Expression RPAR */
case 525:
    /*! Production::    ParColsList : LPAR ColsList RPAR */
case 554:
    /*! Production::    ParLiteral : LPAR Literal RPAR */
case 590:
    /*! Production::    AsClause : AS Literal */
case 624:
    /*! Production::    Json : AT LPAR Expression RPAR */
case 641:
    /*! Production::    JsonPrimitiveValue : LPAR Expression RPAR */
case 642:
    /*! Production::    JsonObject : LCUR JsonPropertiesList RCUR */
case 645:
    /*! Production::    JsonArray : JsonElementsList RBRA */
case 667:
    /*! Production::    SetProp : LPAR Expression RPAR */

    this.$ = yyvstack[yysp - 1];
    break;

case 77:
    /*! Production::    AsLiteral : AS Literal */
case 78:
    /*! Production::    AsLiteral : Literal */
case 86:
    /*! Production::    RemoveColumn : Column */
case 147:
    /*! Production::    SearchFrom : FROM Expression */
case 185:
    /*! Production::    FromTable : Table */
case 247:
    /*! Production::    GroupExpression : Expression */
case 283:
    /*! Production::    ResultColumn : Expression */
case 291:
    /*! Production::    Expression : AggrValue */
case 292:
    /*! Production::    Expression : FuncValue */
case 293:
    /*! Production::    Expression : Op */
case 294:
    /*! Production::    Expression : Column */
case 295:
    /*! Production::    Expression : Star */
case 296:
    /*! Production::    Expression : NumValue */
case 297:
    /*! Production::    Expression : LogicValue */
case 298:
    /*! Production::    Expression : StringValue */
case 299:
    /*! Production::    Expression : NullValue */
case 300:
    /*! Production::    Expression : ParamValue */
case 301:
    /*! Production::    Expression : VarValue */
case 302:
    /*! Production::    Expression : ExistsValue */
case 303:
    /*! Production::    Expression : CaseValue */
case 304:
    /*! Production::    Expression : CastClause */
case 307:
    /*! Production::    Expression : ArrayValue */
case 308:
    /*! Production::    Expression : NewClause */
case 323:
    /*! Production::    PrimitiveValue : NumValue */
case 324:
    /*! Production::    PrimitiveValue : StringValue */
case 325:
    /*! Production::    PrimitiveValue : LogicValue */
case 326:
    /*! Production::    PrimitiveValue : NullValue */
case 327:
    /*! Production::    PrimitiveValue : ParamValue */
case 328:
    /*! Production::    PrimitiveValue : FuncValue */
case 379:
    /*! Production::    ElseClause : ELSE Expression */
case 442:
    /*! Production::    ColFunc : Column */
case 443:
    /*! Production::    ColFunc : FuncValue */
case 445:
    /*! Production::    CondOp : GT */
case 446:
    /*! Production::    CondOp : GE */
case 447:
    /*! Production::    CondOp : LT */
case 448:
    /*! Production::    CondOp : LE */
case 449:
    /*! Production::    CondOp : EQ */
case 450:
    /*! Production::    CondOp : NE */
case 521:
    /*! Production::    ConstraintName : CONSTRAINT Literal */
case 547:
    /*! Production::    ColumnType : SingularColumnType */
case 551:
    /*! Production::    ColumnConstraintsClause : ColumnConstraintsList */
case 553:
    /*! Production::    ColumnConstraintsList : ColumnConstraint */
case 628:
    /*! Production::    Json : AT ParamValue */
case 629:
    /*! Production::    Json : JsonObject */
case 630:
    /*! Production::    Json : AT JsonObject */
case 631:
    /*! Production::    Json : ATLBRA JsonArray */
case 632:
    /*! Production::    JsonValue : Json */
case 633:
    /*! Production::    JsonValue : JsonPrimitiveValue */
case 637:
    /*! Production::    JsonPrimitiveValue : Column */
case 639:
    /*! Production::    JsonPrimitiveValue : ParamValue */
case 640:
    /*! Production::    JsonPrimitiveValue : FuncValue */
case 649:
    /*! Production::    JsonPropertiesList : JsonProperty */
case 665:
    /*! Production::    SetProp : Literal */
case 666:
    /*! Production::    SetProp : NUMBER */
case 675:
    /*! Production::    ElseStatement : ELSE AStatement */
case 728:
    /*! Production::    SharpValue : SHARP Literal */
case 743:
    /*! Production::    GraphElementVar : GraphElement */
case 744:
    /*! Production::    GraphElementVar : GraphVar */
case 746:
    /*! Production::    GraphAsClause : AS AtDollar Literal */
case 753:
    /*! Production::    ColonLiteral : COLON Literal */
case 754:
    /*! Production::    SharpLiteral : SHARP Literal */
case 1046:
    /*! Production::    Statements_group : SEMICOLON */
case 1047:
    /*! Production::    Statements_group : GO */
case 1049:
    /*! Production::    Select_option : RemoveClause */
case 1051:
    /*! Production::    Select_option2 : PivotClause */
case 1055:
    /*! Production::    Select_option3 : SearchFrom */
case 1057:
    /*! Production::    PivotClause_option : PivotClause2 */
case 1059:
    /*! Production::    PivotClause_option2 : AsLiteral */
case 1061:
    /*! Production::    PivotClause_option3 : AsLiteral */
case 1063:
    /*! Production::    RemoveClause_option : COLUMN */
case 1065:
    /*! Production::    SearchSelector_option : DIRECTION */
case 1071:
    /*! Production::    SearchSelector_option2 : ExprList */
case 1078:
    /*! Production::    SearchSelector_group : DISTINCT */
case 1079:
    /*! Production::    SearchSelector_group : UNIQUE */
case 1093:
    /*! Production::    SelectClause_option : ResultColumns */
case 1095:
    /*! Production::    TopClause_option : PERCENT */
case 1097:
    /*! Production::    FromTable_option : AS */
case 1099:
    /*! Production::    FromTable_option2 : Literal */
case 1101:
    /*! Production::    JoinTableAs_option : AS */
case 1103:
    /*! Production::    JoinTableAs_option2 : Literal */
case 1105:
    /*! Production::    LimitClause_option : ROWS */
case 1107:
    /*! Production::    LimitClause_option2 : NEXT */
case 1109:
    /*! Production::    LimitClause_option3 : ROWS */
case 1111:
    /*! Production::    LimitClause_option4 : ONLY */
case 1112:
    /*! Production::    Expression_group : CreateVertex */
case 1113:
    /*! Production::    Expression_group : CreateEdge */
case 1114:
    /*! Production::    FuncValue_option_group : DISTINCT */
case 1115:
    /*! Production::    FuncValue_option_group : ALL */
case 1117:
    /*! Production::    FuncValue_option : FuncValue_option_group */
case 1118:
    /*! Production::    ParamValue_group : Literal */
case 1119:
    /*! Production::    ParamValue_group : NUMBER */
case 1120:
    /*! Production::    SetColumn_group : AT */
case 1121:
    /*! Production::    SetColumn_group : DOLLAR */
case 1123:
    /*! Production::    PrimaryKey_option : Literal */
case 1125:
    /*! Production::    ForeignKey_option : ParColsList */
case 1127:
    /*! Production::    UniqueKey_option : KEY */
case 1129:
    /*! Production::    UniqueKey_option2 : Literal */
case 1131:
    /*! Production::    ColumnConstraint_option : ParLiteral */
case 1133:
    /*! Production::    ColumnConstraint_option2 : ParLiteral */
case 1134:
    /*! Production::    DropTable_group : TABLE */
case 1135:
    /*! Production::    DropTable_group : CLASS */
case 1137:
    /*! Production::    CreateView_option : SubqueryRestriction */
case 1139:
    /*! Production::    CreateView_option2 : SubqueryRestriction */
case 1141:
    /*! Production::    CreateVertex_option : Literal */
case 1143:
    /*! Production::    CreateVertex_option2 : SharpValue */
case 1145:
    /*! Production::    CreateVertex_option3 : StringValue */
case 1147:
    /*! Production::    CreateEdge_option : StringValue */
case 1149:
    /*! Production::    GraphVertexEdge_option : Json */
case 1151:
    /*! Production::    GraphVertexEdge_option2 : GraphAsClause */
case 1153:
    /*! Production::    GraphVertexEdge_option3 : Json */
case 1155:
    /*! Production::    GraphVertexEdge_option4 : GraphAsClause */
case 1157:
    /*! Production::    GraphVertexEdge_option5 : GraphAsClause */
case 1167:
    /*! Production::    GraphElement_option : SharpLiteral */
case 1169:
    /*! Production::    GraphElement_option2 : STRING */
case 1171:
    /*! Production::    GraphElement_option3 : ColonLiteral */
case 1173:
    /*! Production::    GraphElement_option4 : STRING */
case 1175:
    /*! Production::    GraphElement_option5 : ColonLiteral */
case 1177:
    /*! Production::    GraphElement_option6 : ColonLiteral */
case 1187:
    /*! Production::    CreateTrigger_option : AS */
case 1189:
    /*! Production::    CreateTrigger_option2 : AS */

    this.$ = yyvstack[yysp];
    break;

case 79:
    /*! Production::    AsList : AsList COMMA AsPart */
case 84:
    /*! Production::    RemoveColumnsList : RemoveColumnsList COMMA RemoveColumn */
case 142:
    /*! Production::    SearchSelectorList : SearchSelectorList COMMA SearchSelectorList_repetition */
case 736:
    /*! Production::    GraphList : GraphList COMMA GraphVertexEdge */
case 760:
    /*! Production::    TermsList : TermsList COMMA Term */

    this.$ = yyvstack[yysp - 2]; this.$.push(yyvstack[yysp]);
    break;

case 81:
    /*! Production::    AsPart : Expression */

    this.$ = {expr:yyvstack[yysp]};
    break;

case 82:
    /*! Production::    AsPart : Expression AS Literal */

    this.$ = {expr:yyvstack[yysp - 2],as:yyvstack[yysp]};
    break;

case 83:
    /*! Production::    RemoveClause : REMOVE RemoveClause_option RemoveColumnsList */

    this.$ = {removecolumns:yyvstack[yysp]};
    break;

case 87:
    /*! Production::    RemoveColumn : LIKE StringValue */

    this.$ = {like:yyvstack[yysp]};
    break;

case 90:
    /*! Production::    SearchSelector : Literal */
case 104:
    /*! Production::    SearchSelector : NUMBER */

    this.$ = {srchid:"PROP", args: [yyvstack[yysp]]};
    break;

case 91:
    /*! Production::    SearchSelector : ORDER BY LPAR OrderExpressionsList RPAR */

    this.$ = {srchid:"ORDERBY", args: yyvstack[yysp - 1]};
    break;

case 92:
    /*! Production::    SearchSelector : ORDER BY LPAR SearchSelector_option RPAR */

    var dir = yyvstack[yysp - 1];
    if(!dir) dir = 'ASC';
    this.$ = {srchid:"ORDERBY", args: [{expression: new yy.Column({columnid:'_'}), direction:dir}]};
    break;

case 93:
    /*! Production::    SearchSelector : DOTDOT */

    this.$ = {srchid:"PARENT"};
    break;

case 94:
    /*! Production::    SearchSelector : ArrowDot Literal */

    this.$ = {srchid:"APROP", args: [yyvstack[yysp]]};
    break;

case 95:
    /*! Production::    SearchSelector : CARET */

    this.$ = {selid:"ROOT"};
    break;

case 96:
    /*! Production::    SearchSelector : EQ Expression */

    this.$ = {srchid:"EQ", args: [yyvstack[yysp]]};
    break;

case 97:
    /*! Production::    SearchSelector : LIKE Expression */

    this.$ = {srchid:"LIKE", args: [yyvstack[yysp]]};
    break;

case 98:
    /*! Production::    SearchSelector : LPAR SearchSelector_repetition_plus RPAR */
case 99:
    /*! Production::    SearchSelector : WITH LPAR SearchSelector_repetition_plus2 RPAR */

    this.$ = {selid:"WITH", args: yyvstack[yysp - 1]};
    break;

case 100:
    /*! Production::    SearchSelector : Literal LPAR SearchSelector_option2 RPAR */

    this.$ = {srchid:yyvstack[yysp - 3].toUpperCase(), args:yyvstack[yysp - 1]};
    break;

case 101:
    /*! Production::    SearchSelector : WHERE LPAR Expression RPAR */

    this.$ = {srchid:"WHERE", args:[yyvstack[yysp - 1]]};
    break;

case 102:
    /*! Production::    SearchSelector : OF LPAR Expression RPAR */

    this.$ = {selid:"OF", args:[yyvstack[yysp - 1]]};
    break;

case 103:
    /*! Production::    SearchSelector : CLASS LPAR Literal RPAR */

    this.$ = {srchid:"CLASS", args:[yyvstack[yysp - 1]]};
    break;

case 105:
    /*! Production::    SearchSelector : STRING */

    this.$ = {srchid:"NAME", args: [yyvstack[yysp].substr(1,yyvstack[yysp].length-2)]};
    break;

case 106:
    /*! Production::    SearchSelector : SLASH */

    this.$ = {srchid:"CHILD"};
    break;

case 107:
    /*! Production::    SearchSelector : VERTEX */

    this.$ = {srchid:"VERTEX"};
    break;

case 108:
    /*! Production::    SearchSelector : EDGE */

    this.$ = {srchid:"EDGE"};
    break;

case 109:
    /*! Production::    SearchSelector : EXCLAMATION */

    this.$ = {srchid:"REF"};
    break;

case 110:
    /*! Production::    SearchSelector : SHARP Literal */

    this.$ = {srchid:"SHARP", args:[yyvstack[yysp]]};
    break;

case 111:
    /*! Production::    SearchSelector : MODULO Literal */

    this.$ = {srchid:"ATTR", args:((typeof yyvstack[yysp] == 'undefined')?undefined:[yyvstack[yysp]])};
    break;

case 112:
    /*! Production::    SearchSelector : MODULO SLASH */

    this.$ = {srchid:"ATTR"};
    break;

case 113:
    /*! Production::    SearchSelector : GT */

    this.$ = {srchid:"OUT"};
    break;

case 114:
    /*! Production::    SearchSelector : LT */

    this.$ = {srchid:"IN"};
    break;

case 115:
    /*! Production::    SearchSelector : GTGT */

    this.$ = {srchid:"OUTOUT"};
    break;

case 116:
    /*! Production::    SearchSelector : LTLT */

    this.$ = {srchid:"ININ"};
    break;

case 117:
    /*! Production::    SearchSelector : DOLLAR */

    this.$ = {srchid:"CONTENT"};
    break;

case 118:
    /*! Production::    SearchSelector : Json */

    this.$ = {srchid:"EX",args:[new yy.Json({value:yyvstack[yysp]})]};
    break;

case 119:
    /*! Production::    SearchSelector : AT Literal */

    this.$ = {srchid:"AT", args:[yyvstack[yysp]]};
    break;

case 120:
    /*! Production::    SearchSelector : AS AT Literal */

    this.$ = {srchid:"AS", args:[yyvstack[yysp]]};
    break;

case 121:
    /*! Production::    SearchSelector : SET LPAR SetColumnsList RPAR */

    this.$ = {srchid:"SET", args:yyvstack[yysp - 1]};
    break;

case 122:
    /*! Production::    SearchSelector : TO AT Literal */

    this.$ = {selid:"TO", args:[yyvstack[yysp]]};
    break;

case 123:
    /*! Production::    SearchSelector : VALUE */

    this.$ = {srchid:"VALUE"};
    break;

case 124:
    /*! Production::    SearchSelector : ROW LPAR ExprList RPAR */

    this.$ = {srchid:"ROW", args:yyvstack[yysp - 1]};
    break;

case 125:
    /*! Production::    SearchSelector : COLON Literal */

    this.$ = {srchid:"CLASS", args:[yyvstack[yysp]]};
    break;

case 126:
    /*! Production::    SearchSelector : SearchSelector PlusStar */

    this.$ = {selid:yyvstack[yysp],args:[yyvstack[yysp - 1]] };
    break;

case 127:
    /*! Production::    SearchSelector : NOT LPAR SearchSelector_repetition RPAR */

    this.$ = {selid:"NOT",args:yyvstack[yysp - 1] };
    break;

case 128:
    /*! Production::    SearchSelector : IF LPAR SearchSelector_repetition2 RPAR */

    this.$ = {selid:"IF",args:yyvstack[yysp - 1] };
    break;

case 129:
    /*! Production::    SearchSelector : Aggregator LPAR SearchSelector_repetition3 RPAR */

    this.$ = {selid:yyvstack[yysp - 3],args:yyvstack[yysp - 1] };
    break;

case 130:
    /*! Production::    SearchSelector : SearchSelector_group LPAR SearchSelector_repetition4 RPAR */

    this.$ = {selid:'DISTINCT',args:yyvstack[yysp - 1] };
    break;

case 131:
    /*! Production::    SearchSelector : UNION LPAR SearchSelectorList RPAR */

    this.$ = {selid:'UNION',args:yyvstack[yysp - 1] };
    break;

case 132:
    /*! Production::    SearchSelector : UNION ALL LPAR SearchSelectorList RPAR */

    this.$ = {selid:'UNIONALL',args:yyvstack[yysp - 1] };
    break;

case 133:
    /*! Production::    SearchSelector : ALL LPAR SearchSelector_repetition5 RPAR */

    this.$ = {selid:'ALL',args:[yyvstack[yysp - 1]] };
    break;

case 134:
    /*! Production::    SearchSelector : ANY LPAR SearchSelector_repetition6 RPAR */

    this.$ = {selid:'ANY',args:[yyvstack[yysp - 1]] };
    break;

case 135:
    /*! Production::    SearchSelector : INTERSECT LPAR SearchSelectorList RPAR */

    this.$ = {selid:'INTERSECT',args:yyvstack[yysp - 1] };
    break;

case 136:
    /*! Production::    SearchSelector : EXCEPT LPAR SearchSelectorList RPAR */

    this.$ = {selid:'EXCEPT',args:yyvstack[yysp - 1] };
    break;

case 137:
    /*! Production::    SearchSelector : AND LPAR SearchSelectorList RPAR */

    this.$ = {selid:'AND',args:yyvstack[yysp - 1] };
    break;

case 138:
    /*! Production::    SearchSelector : OR LPAR SearchSelectorList RPAR */

    this.$ = {selid:'OR',args:yyvstack[yysp - 1] };
    break;

case 139:
    /*! Production::    SearchSelector : PATH LPAR SearchSelector RPAR */

    this.$ = {selid:'PATH',args:[yyvstack[yysp - 1]] };
    break;

case 140:
    /*! Production::    SearchSelector : RETURN LPAR ResultColumns RPAR */

    this.$ = {srchid:'RETURN',args:yyvstack[yysp - 1] };
    break;

case 141:
    /*! Production::    SearchSelector : REPEAT LPAR SearchSelector_repetition7 COMMA ExprList RPAR */

    this.$ = {selid:'REPEAT',sels:yyvstack[yysp - 3], args:yyvstack[yysp - 1] };
    break;

case 144:
    /*! Production::    PlusStar : PLUS */

    this.$ = "PLUS";
    break;

case 145:
    /*! Production::    PlusStar : STAR */

    this.$ = "STAR";
    break;

case 146:
    /*! Production::    PlusStar : QUESTION */

    this.$ = "QUESTION";
    break;

case 148:
    /*! Production::    SelectClause : SelectModifier DISTINCT TopClause ResultColumns */

    this.$ = new yy.Select({ columns:yyvstack[yysp], distinct: true }); yy.extend(this.$, yyvstack[yysp - 3]); yy.extend(this.$, yyvstack[yysp - 1]);
    break;

case 149:
    /*! Production::    SelectClause : SelectModifier UNIQUE TopClause ResultColumns */

    this.$ = new yy.Select({ columns:yyvstack[yysp], distinct: true }); yy.extend(this.$, yyvstack[yysp - 3]);yy.extend(this.$, yyvstack[yysp - 1]);
    break;

case 150:
    /*! Production::    SelectClause : SelectModifier ALL TopClause ResultColumns */

    this.$ = new yy.Select({ columns:yyvstack[yysp], all:true }); yy.extend(this.$, yyvstack[yysp - 3]);yy.extend(this.$, yyvstack[yysp - 1]);
    break;

case 151:
    /*! Production::    SelectClause : SelectModifier TopClause SelectClause_option */

    if(!yyvstack[yysp]) {
        this.$ = new yy.Select({columns:[new yy.Column({columnid:'_',})], modifier:'COLUMN'});
    } else {
        this.$ = new yy.Select({ columns:yyvstack[yysp] }); yy.extend(this.$, yyvstack[yysp - 2]);yy.extend(this.$, yyvstack[yysp - 1]);
    }
    break;

case 152:
    /*! Production::    SelectModifier : SELECT */

    if(yyvstack[yysp]=='SELECT') this.$ = undefined; else this.$ = {modifier: yyvstack[yysp]};
    break;

case 153:
    /*! Production::    SelectModifier : SELECT VALUE */

    this.$ = {modifier:'VALUE'}
    break;

case 154:
    /*! Production::    SelectModifier : SELECT ROW */

    this.$ = {modifier:'ROW'}
    break;

case 155:
    /*! Production::    SelectModifier : SELECT COLUMN */

    this.$ = {modifier:'COLUMN'}
    break;

case 156:
    /*! Production::    SelectModifier : SELECT MATRIX */

    this.$ = {modifier:'MATRIX'}
    break;

case 157:
    /*! Production::    SelectModifier : SELECT TEXTSTRING */

    this.$ = {modifier:'TEXTSTRING'}
    break;

case 158:
    /*! Production::    SelectModifier : SELECT INDEX */

    this.$ = {modifier:'INDEX'}
    break;

case 159:
    /*! Production::    SelectModifier : SELECT RECORDSET */

    this.$ = {modifier:'RECORDSET'}
    break;

case 160:
    /*! Production::    TopClause : TOP NumValue TopClause_option */

    this.$ = {top: yyvstack[yysp - 1], percent:(typeof yyvstack[yysp] != 'undefined'?true:undefined)};
    break;

case 161:
    /*! Production::    TopClause : TOP LPAR NumValue RPAR */

    this.$ = {top: yyvstack[yysp - 1]};
    break;

case 164:
    /*! Production::    IntoClause : INTO Table */
case 165:
    /*! Production::    IntoClause : INTO FuncValue */
case 166:
    /*! Production::    IntoClause : INTO ParamValue */
case 167:
    /*! Production::    IntoClause : INTO VarValue */

    this.$ = {into: yyvstack[yysp]}
    break;

case 168:
    /*! Production::    IntoClause : INTO STRING */

    var s = yyvstack[yysp];
    s = s.substr(1,s.length-2);
    var x3 = s.substr(-3).toUpperCase();
    var x4 = s.substr(-4).toUpperCase();
    if(s[0] == '#') {
        this.$ = {into: new yy.FuncValue({funcid: 'HTML', args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]})};
    } else if(x3=='XLS' || x3 == 'CSV' || x3=='TAB') {
        this.$ = {into: new yy.FuncValue({funcid: x3, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]})};
    } else if(x4=='XLSX' || x4 == 'JSON') {
        this.$ = {into: new yy.FuncValue({funcid: x4, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]})};
    }
    break;

case 169:
    /*! Production::    FromClause : FROM FromTablesList */

    this.$ = { from: yyvstack[yysp] };
    break;

case 170:
    /*! Production::    FromClause : FROM FromTablesList JoinTablesList */

    this.$ = { from: yyvstack[yysp - 1], joins: yyvstack[yysp] };
    break;

case 171:
    /*! Production::    FromClause : FROM LPAR FromTablesList JoinTablesList RPAR */

    this.$ = { from: yyvstack[yysp - 2], joins: yyvstack[yysp - 1] };
    break;

case 173:
    /*! Production::    ApplyClause : CROSS APPLY LPAR Select RPAR Literal */

    this.$ = new yy.Apply({select: yyvstack[yysp - 2], applymode:'CROSS', as:yyvstack[yysp]});
    break;

case 174:
    /*! Production::    ApplyClause : CROSS APPLY LPAR Select RPAR AS Literal */

    this.$ = new yy.Apply({select: yyvstack[yysp - 3], applymode:'CROSS', as:yyvstack[yysp]});
    break;

case 175:
    /*! Production::    ApplyClause : OUTER APPLY LPAR Select RPAR Literal */

    this.$ = new yy.Apply({select: yyvstack[yysp - 2], applymode:'OUTER', as:yyvstack[yysp]});
    break;

case 176:
    /*! Production::    ApplyClause : OUTER APPLY LPAR Select RPAR AS Literal */

    this.$ = new yy.Apply({select: yyvstack[yysp - 3], applymode:'OUTER', as:yyvstack[yysp]});
    break;

case 178:
    /*! Production::    FromTablesList : FromTablesList COMMA FromTable */
case 243:
    /*! Production::    GroupExpressionsList : GroupExpressionsList COMMA GroupExpression */
case 457:
    /*! Production::    SetColumnsList : SetColumnsList COMMA SetColumn */
case 535:
    /*! Production::    ColsList : ColsList COMMA Literal */
case 536:
    /*! Production::    ColsList : ColsList COMMA STRING */

    this.$ = yyvstack[yysp - 2]; yyvstack[yysp - 2].push(yyvstack[yysp]);
    break;

case 179:
    /*! Production::    FromTable : LPAR Select RPAR Literal */

    this.$ = yyvstack[yysp - 2]; this.$.as = yyvstack[yysp]
    break;

case 180:
    /*! Production::    FromTable : LPAR Select RPAR AS Literal */

    this.$ = yyvstack[yysp - 3]; this.$.as = yyvstack[yysp]
    break;

case 181:
    /*! Production::    FromTable : LPAR Select RPAR */

    this.$ = yyvstack[yysp - 1]; this.$.as = 'default'
    break;

case 182:
    /*! Production::    FromTable : Json FromTable_option FromTable_option2 */

    this.$ = new yy.Json({value:yyvstack[yysp - 2]}); yyvstack[yysp - 2].as = yyvstack[yysp]
    break;

case 183:
    /*! Production::    FromTable : Table Literal */

    this.$ = yyvstack[yysp - 1]; yyvstack[yysp - 1].as = yyvstack[yysp]
    break;

case 184:
    /*! Production::    FromTable : Table AS Literal */

    this.$ = yyvstack[yysp - 2]; yyvstack[yysp - 2].as = yyvstack[yysp]
    break;

case 186:
    /*! Production::    FromTable : Table NOT INDEXED */
case 643:
    /*! Production::    JsonObject : LCUR JsonPropertiesList COMMA RCUR */
case 646:
    /*! Production::    JsonArray : JsonElementsList COMMA RBRA */

    this.$ = yyvstack[yysp - 2];
    break;

case 187:
    /*! Production::    FromTable : ParamValue Literal */
case 191:
    /*! Production::    FromTable : FuncValue Literal */
case 195:
    /*! Production::    FromTable : VarValue Literal */
case 198:
    /*! Production::    FromTable : FromString Literal */

    this.$ = yyvstack[yysp - 1]; yyvstack[yysp - 1].as = yyvstack[yysp];
    break;

case 188:
    /*! Production::    FromTable : ParamValue AS Literal */
case 192:
    /*! Production::    FromTable : FuncValue AS Literal */
case 196:
    /*! Production::    FromTable : VarValue AS Literal */
case 199:
    /*! Production::    FromTable : FromString AS Literal */

    this.$ = yyvstack[yysp - 2]; yyvstack[yysp - 2].as = yyvstack[yysp];
    break;

case 189:
    /*! Production::    FromTable : ParamValue */
case 190:
    /*! Production::    FromTable : FuncValue */
case 194:
    /*! Production::    FromTable : VarValue */
case 197:
    /*! Production::    FromTable : FromString */

    this.$ = yyvstack[yysp]; yyvstack[yysp].as = 'default';
    break;

case 193:
    /*! Production::    FromTable : INSERTED */

    this.$ = {inserted:true};
    break;

case 200:
    /*! Production::    FromString : STRING */

    var s = yyvstack[yysp];
    s = s.substr(1,s.length-2);
    var x3 = s.substr(-3).toUpperCase();
    var x4 = s.substr(-4).toUpperCase();
    var r;
    if(s[0] == '#') {
        r = new yy.FuncValue({funcid: 'HTML', args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]});
    } else if(x3=='XLS' || x3 == 'CSV' || x3=='TAB') {
        r = new yy.FuncValue({funcid: x3, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]});
    } else if(x4=='XLSX' || x4 == 'JSON') {
        r = new yy.FuncValue({funcid: x4, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]});
    } else {
        throw new Error('Unknown string in FROM clause');
    };
    this.$ = r;
    break;

case 201:
    /*! Production::    Table : Literal DOT Literal */

    if(yyvstack[yysp - 2] == 'INFORMATION_SCHEMA') {
        this.$ = new yy.FuncValue({funcid: yyvstack[yysp - 2], args:[new yy.StringValue({value:yyvstack[yysp]})]});
    } else {
        this.$ = new yy.Table({databaseid: yyvstack[yysp - 2], tableid:yyvstack[yysp]});
    }
    break;

case 202:
    /*! Production::    Table : Literal */

    this.$ = new yy.Table({tableid: yyvstack[yysp]});
    break;

case 203:
    /*! Production::    JoinTablesList : JoinTablesList JoinTable */
case 204:
    /*! Production::    JoinTablesList : JoinTablesList ApplyClause */

    this.$ = yyvstack[yysp - 1]; yyvstack[yysp - 1].push(yyvstack[yysp]);
    break;

case 207:
    /*! Production::    JoinTable : JoinMode JoinTableAs OnClause */

    this.$ = new yy.Join(yyvstack[yysp - 2]); yy.extend(this.$, yyvstack[yysp - 1]); yy.extend(this.$, yyvstack[yysp]);
    break;

case 208:
    /*! Production::    JoinTableAs : Table */

    this.$ = {table: yyvstack[yysp]};
    break;

case 209:
    /*! Production::    JoinTableAs : Table Literal */

    this.$ = {table: yyvstack[yysp - 1], as: yyvstack[yysp] } ;
    break;

case 210:
    /*! Production::    JoinTableAs : Table AS Literal */

    this.$ = {table: yyvstack[yysp - 2], as: yyvstack[yysp] } ;
    break;

case 211:
    /*! Production::    JoinTableAs : Json JoinTableAs_option JoinTableAs_option2 */

    this.$ = {json:new yy.Json({value:yyvstack[yysp - 2],as:yyvstack[yysp]})};
    break;

case 212:
    /*! Production::    JoinTableAs : ParamValue Literal */

    this.$ = {param: yyvstack[yysp - 1], as: yyvstack[yysp] } ;
    break;

case 213:
    /*! Production::    JoinTableAs : ParamValue AS Literal */

    this.$ = {param: yyvstack[yysp - 2], as: yyvstack[yysp] } ;
    break;

case 214:
    /*! Production::    JoinTableAs : LPAR Select RPAR Literal */

    this.$ = {select: yyvstack[yysp - 2], as: yyvstack[yysp]} ;
    break;

case 215:
    /*! Production::    JoinTableAs : LPAR Select RPAR AS Literal */

    this.$ = {select: yyvstack[yysp - 3], as: yyvstack[yysp] } ;
    break;

case 216:
    /*! Production::    JoinTableAs : FuncValue */

    this.$ = {func:yyvstack[yysp], as:'default'};
    break;

case 217:
    /*! Production::    JoinTableAs : FuncValue Literal */

    this.$ = {func:yyvstack[yysp - 1], as: yyvstack[yysp]};
    break;

case 218:
    /*! Production::    JoinTableAs : FuncValue AS Literal */

    this.$ = {func:yyvstack[yysp - 2], as: yyvstack[yysp]};
    break;

case 219:
    /*! Production::    JoinTableAs : VarValue */

    this.$ = {variable:yyvstack[yysp],as:'default'};
    break;

case 220:
    /*! Production::    JoinTableAs : VarValue Literal */

    this.$ = {variable:yyvstack[yysp - 1],as:yyvstack[yysp]};
    break;

case 221:
    /*! Production::    JoinTableAs : VarValue AS Literal */

    this.$ = {variable:yyvstack[yysp - 2],as:yyvstack[yysp]}
    break;

case 222:
    /*! Production::    JoinMode : JoinModeMode */

    this.$ = { joinmode: yyvstack[yysp] } ;
    break;

case 223:
    /*! Production::    JoinMode : NATURAL JoinModeMode */

    this.$ = {joinmode: yyvstack[yysp - 1], natural:true} ;
    break;

case 224:
    /*! Production::    JoinModeMode : JOIN */
case 225:
    /*! Production::    JoinModeMode : INNER JOIN */

    this.$ = "INNER";
    break;

case 226:
    /*! Production::    JoinModeMode : LEFT JOIN */
case 227:
    /*! Production::    JoinModeMode : LEFT OUTER JOIN */

    this.$ = "LEFT";
    break;

case 228:
    /*! Production::    JoinModeMode : RIGHT JOIN */
case 229:
    /*! Production::    JoinModeMode : RIGHT OUTER JOIN */

    this.$ = "RIGHT";
    break;

case 230:
    /*! Production::    JoinModeMode : OUTER JOIN */
case 231:
    /*! Production::    JoinModeMode : FULL OUTER JOIN */

    this.$ = "OUTER";
    break;

case 232:
    /*! Production::    JoinModeMode : SEMI JOIN */

    this.$ = "SEMI";
    break;

case 233:
    /*! Production::    JoinModeMode : ANTI JOIN */

    this.$ = "ANTI";
    break;

case 234:
    /*! Production::    JoinModeMode : CROSS JOIN */

    this.$ = "CROSS";
    break;

case 235:
    /*! Production::    OnClause : ON Expression */

    this.$ = {on: yyvstack[yysp]};
    break;

case 236:
    /*! Production::    OnClause : USING ColumnsList */
case 702:
    /*! Production::    MergeUsing : USING FromTable */

    this.$ = {using: yyvstack[yysp]};
    break;

case 239:
    /*! Production::    WhereClause : WHERE Expression */

    this.$ = {where: new yy.Expression({expression:yyvstack[yysp]})};
    break;

case 241:
    /*! Production::    GroupClause : GROUP BY GroupExpressionsList HavingClause */

    this.$ = {group:yyvstack[yysp - 1]}; yy.extend(this.$,yyvstack[yysp]);
    break;

case 244:
    /*! Production::    GroupExpression : GROUPING SET LPAR GroupExpressionsList RPAR */

    this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: yyvstack[yysp - 1]});
    break;

case 245:
    /*! Production::    GroupExpression : ROLLUP LPAR GroupExpressionsList RPAR */

    this.$ = new yy.GroupExpression({type:'ROLLUP', group: yyvstack[yysp - 1]});
    break;

case 246:
    /*! Production::    GroupExpression : CUBE LPAR GroupExpressionsList RPAR */

    this.$ = new yy.GroupExpression({type:'CUBE', group: yyvstack[yysp - 1]});
    break;

case 249:
    /*! Production::    HavingClause : HAVING Expression */

    this.$ = {having:yyvstack[yysp]}
    break;

case 251:
    /*! Production::    UnionClause : UNION Select */

    this.$ = {union: yyvstack[yysp]} ;
    break;

case 252:
    /*! Production::    UnionClause : UNION ALL Select */

    this.$ = {unionall: yyvstack[yysp]} ;
    break;

case 253:
    /*! Production::    UnionClause : EXCEPT Select */

    this.$ = {except: yyvstack[yysp]} ;
    break;

case 254:
    /*! Production::    UnionClause : INTERSECT Select */

    this.$ = {intersect: yyvstack[yysp]} ;
    break;

case 255:
    /*! Production::    UnionClause : UNION CORRESPONDING Select */

    this.$ = {union: yyvstack[yysp], corresponding:true} ;
    break;

case 256:
    /*! Production::    UnionClause : UNION ALL CORRESPONDING Select */

    this.$ = {unionall: yyvstack[yysp], corresponding:true} ;
    break;

case 257:
    /*! Production::    UnionClause : EXCEPT CORRESPONDING Select */

    this.$ = {except: yyvstack[yysp], corresponding:true} ;
    break;

case 258:
    /*! Production::    UnionClause : INTERSECT CORRESPONDING Select */

    this.$ = {intersect: yyvstack[yysp], corresponding:true} ;
    break;

case 260:
    /*! Production::    OrderClause : ORDER BY OrderExpressionsList */

    this.$ = {order:yyvstack[yysp]}
    break;

case 262:
    /*! Production::    OrderExpressionsList : OrderExpressionsList COMMA OrderExpression */
case 482:
    /*! Production::    ValuesListsList : ValuesListsList COMMA Json */
case 483:
    /*! Production::    ValuesListsList : ValuesListsList COMMA ParamValue */
case 485:
    /*! Production::    ValuesList : ValuesList COMMA Expression */
case 493:
    /*! Production::    ColumnsList : ColumnsList COMMA Column */

    this.$ = yyvstack[yysp - 2]; yyvstack[yysp - 2].push(yyvstack[yysp])
    break;

case 263:
    /*! Production::    NullsOrder : NULLS FIRST */

    this.$ = {nullsOrder: 'FIRST'};
    break;

case 264:
    /*! Production::    NullsOrder : NULLS LAST */

    this.$ = {nullsOrder: 'LAST'};
    break;

case 265:
    /*! Production::    OrderExpression : Expression */

    this.$ = new yy.Expression({expression: yyvstack[yysp], direction:'ASC'})
    break;

case 266:
    /*! Production::    OrderExpression : Expression DIRECTION */

    this.$ = new yy.Expression({expression: yyvstack[yysp - 1], direction:yyvstack[yysp].toUpperCase()})
    break;

case 267:
    /*! Production::    OrderExpression : Expression DIRECTION NullsOrder */

    this.$ = new yy.Expression({expression: yyvstack[yysp - 2], direction:yyvstack[yysp - 1].toUpperCase()}); yy.extend(this.$, yyvstack[yysp])
    break;

case 268:
    /*! Production::    OrderExpression : Expression COLLATE NOCASE */

    this.$ = new yy.Expression({expression: yyvstack[yysp - 2], direction:'ASC', nocase:true})
    break;

case 269:
    /*! Production::    OrderExpression : Expression COLLATE NOCASE DIRECTION */

    this.$ = new yy.Expression({expression: yyvstack[yysp - 3], direction:yyvstack[yysp].toUpperCase(), nocase:true})
    break;

case 271:
    /*! Production::    LimitClause : LIMIT NumValue OffsetClause */

    this.$ = {limit:yyvstack[yysp - 1]}; yy.extend(this.$, yyvstack[yysp]);
    break;

case 272:
    /*! Production::    LimitClause : OFFSET NumValue LimitClause_option FETCH LimitClause_option2 NumValue LimitClause_option3 LimitClause_option4 */

    this.$ = {limit:yyvstack[yysp - 2],offset:yyvstack[yysp - 6]};
    break;

case 274:
    /*! Production::    OffsetClause : OFFSET NumValue */

    this.$ = {offset:yyvstack[yysp]};
    break;

case 275:
    /*! Production::    ResultColumns : ResultColumns COMMA ResultColumn */
case 514:
    /*! Production::    ConstraintsList : ConstraintsList COMMA Constraint */
case 538:
    /*! Production::    ColumnDefsList : ColumnDefsList COMMA ColumnDef */
case 653:
    /*! Production::    JsonElementsList : JsonElementsList COMMA JsonValue */
case 663:
    /*! Production::    SetPropsList : SetPropsList ArrowDot SetProp */
case 687:
    /*! Production::    StringValuesList : StringValuesList COMMA StringValue */
case 689:
    /*! Production::    PluginsList : PluginsList COMMA Plugin */
case 693:
    /*! Production::    DeclaresList : DeclaresList COMMA DeclareItem */

    yyvstack[yysp - 2].push(yyvstack[yysp]); this.$ = yyvstack[yysp - 2];
    break;

case 277:
    /*! Production::    ResultColumn : Expression AS Literal */
case 279:
    /*! Production::    ResultColumn : Expression AS NUMBER */
case 281:
    /*! Production::    ResultColumn : Expression AS StringValue */

    yyvstack[yysp - 2].as = yyvstack[yysp]; this.$ = yyvstack[yysp - 2];
    break;

case 278:
    /*! Production::    ResultColumn : Expression Literal */
case 280:
    /*! Production::    ResultColumn : Expression NUMBER */
case 282:
    /*! Production::    ResultColumn : Expression StringValue */

    yyvstack[yysp - 1].as = yyvstack[yysp]; this.$ = yyvstack[yysp - 1];
    break;

case 284:
    /*! Production::    Star : Literal DOT Literal DOT STAR */

    this.$ = new yy.Column({columid: yyvstack[yysp], tableid: yyvstack[yysp - 2], databaseid:yyvstack[yysp - 4]});
    break;

case 285:
    /*! Production::    Star : Literal DOT STAR */
case 288:
    /*! Production::    Column : Literal DOT Literal */
case 289:
    /*! Production::    Column : Literal DOT VALUE */

    this.$ = new yy.Column({columnid: yyvstack[yysp], tableid: yyvstack[yysp - 2]});
    break;

case 286:
    /*! Production::    Star : STAR */

    this.$ = new yy.Column({columnid:yyvstack[yysp]});
    break;

case 287:
    /*! Production::    Column : Literal DOT Literal DOT Literal */

    this.$ = new yy.Column({columnid: yyvstack[yysp], tableid: yyvstack[yysp - 2], databaseid:yyvstack[yysp - 4]});
    break;

case 290:
    /*! Production::    Column : Literal */

    this.$ = new yy.Column({columnid: yyvstack[yysp]});
    break;

case 305:
    /*! Production::    Expression : VALUE */

    this.$ = new yy.DomainValueValue();
    break;

case 306:
    /*! Production::    Expression : Json */

    this.$ = new yy.Json({value:yyvstack[yysp]});
    break;

case 309:
    /*! Production::    Expression : LPAR Select RPAR */
case 310:
    /*! Production::    Expression : LPAR Insert RPAR */
case 311:
    /*! Production::    Expression : LPAR Expression_group RPAR */

    if(!yy.queries) yy.queries = [];
    yy.queries.push(yyvstack[yysp - 1]);
    yyvstack[yysp - 1].queriesidx = yy.queries.length;
    this.$ = yyvstack[yysp - 1];
    break;

case 313:
    /*! Production::    Expression : CURRENT_TIMESTAMP */
case 329:
    /*! Production::    PrimitiveValue : CURRENT_TIMESTAMP */

    this.$ = new yy.FuncValue({funcid:'CURRENT_TIMESTAMP'});
    break;

case 314:
    /*! Production::    JavaScript : JAVASCRIPT */

    this.$ = new yy.JavaScript({value:yyvstack[yysp].substr(2,yyvstack[yysp].length-4)});
    break;

case 315:
    /*! Production::    CreateFunction : CREATE FUNCTION LITERAL AS JAVASCRIPT */

    this.$ = new yy.JavaScript({value:'alasql.fn["'+yyvstack[yysp - 2]+'"] = '+yyvstack[yysp].substr(2,yyvstack[yysp].length-4)});
    break;

case 316:
    /*! Production::    CreateAggregate : CREATE AGGREGATE LITERAL AS JAVASCRIPT */

    this.$ = new yy.JavaScript({value:'alasql.aggr["'+yyvstack[yysp - 2]+'"] = '+yyvstack[yysp].substr(2,yyvstack[yysp].length-4)});
    break;

case 317:
    /*! Production::    NewClause : NEW Literal */

    this.$ = new yy.FuncValue({funcid:yyvstack[yysp], newid:true});
    break;

case 318:
    /*! Production::    NewClause : NEW FuncValue */

    this.$ = yyvstack[yysp]; yy.extend(this.$,{newid:true});
    break;

case 319:
    /*! Production::    CastClause : CAST LPAR Expression AS ColumnType RPAR */

    this.$ = new yy.Convert({expression:yyvstack[yysp - 3]}) ; yy.extend(this.$,yyvstack[yysp - 1]) ;
    break;

case 320:
    /*! Production::    CastClause : CAST LPAR Expression AS ColumnType COMMA NUMBER RPAR */

    this.$ = new yy.Convert({expression:yyvstack[yysp - 5], style:yyvstack[yysp - 1]}) ; yy.extend(this.$,yyvstack[yysp - 3]) ;
    break;

case 321:
    /*! Production::    CastClause : CONVERT LPAR ColumnType COMMA Expression RPAR */

    this.$ = new yy.Convert({expression:yyvstack[yysp - 1]}) ; yy.extend(this.$,yyvstack[yysp - 3]) ;
    break;

case 322:
    /*! Production::    CastClause : CONVERT LPAR ColumnType COMMA Expression COMMA NUMBER RPAR */

    this.$ = new yy.Convert({expression:yyvstack[yysp - 3], style:yyvstack[yysp - 1]}) ; yy.extend(this.$,yyvstack[yysp - 5]) ;
    break;

case 330:
    /*! Production::    AggrValue : Aggregator LPAR ExprList RPAR OverClause */

    if(yyvstack[yysp - 2].length > 1 && (yyvstack[yysp - 4].toUpperCase() == 'MAX' || yyvstack[yysp - 4].toUpperCase() == 'MIN')) {
        this.$ = new yy.FuncValue({funcid:yyvstack[yysp - 4],args:yyvstack[yysp - 2]});
    } else {
      this.$ = new yy.AggrValue({aggregatorid: yyvstack[yysp - 4].toUpperCase(), expression: yyvstack[yysp - 2].pop(), over:yyvstack[yysp]});
    }
    break;

case 331:
    /*! Production::    AggrValue : Aggregator LPAR DISTINCT Expression RPAR OverClause */

    this.$ = new yy.AggrValue({aggregatorid: yyvstack[yysp - 5].toUpperCase(), expression: yyvstack[yysp - 2], distinct:true, over:yyvstack[yysp]});
    break;

case 332:
    /*! Production::    AggrValue : Aggregator LPAR ALL Expression RPAR OverClause */

    this.$ = new yy.AggrValue({aggregatorid: yyvstack[yysp - 5].toUpperCase(), expression: yyvstack[yysp - 2],
    over:yyvstack[yysp]});
    break;

case 334:
    /*! Production::    OverClause : OVER LPAR OverPartitionClause RPAR */
case 335:
    /*! Production::    OverClause : OVER LPAR OverOrderByClause RPAR */

    this.$ = new yy.Over(); yy.extend(this.$,yyvstack[yysp - 1]);
    break;

case 336:
    /*! Production::    OverClause : OVER LPAR OverPartitionClause OverOrderByClause RPAR */

    this.$ = new yy.Over(); yy.extend(this.$,yyvstack[yysp - 2]); yy.extend(this.$,yyvstack[yysp - 1]);
    break;

case 337:
    /*! Production::    OverPartitionClause : PARTITION BY GroupExpressionsList */

    this.$ = {partition:yyvstack[yysp]};
    break;

case 338:
    /*! Production::    OverOrderByClause : ORDER BY OrderExpressionsList */

    this.$ = {order:yyvstack[yysp]};
    break;

case 339:
    /*! Production::    Aggregator : SUM */

    this.$ = "SUM";
    break;

case 340:
    /*! Production::    Aggregator : TOTAL */

    this.$ = "TOTAL";
    break;

case 341:
    /*! Production::    Aggregator : COUNT */

    this.$ = "COUNT";
    break;

case 342:
    /*! Production::    Aggregator : MIN */

    this.$ = "MIN";
    break;

case 343:
    /*! Production::    Aggregator : MAX */
case 549:
    /*! Production::    NumberMax : MAXNUM */

    this.$ = "MAX";
    break;

case 344:
    /*! Production::    Aggregator : AVG */

    this.$ = "AVG";
    break;

case 345:
    /*! Production::    Aggregator : FIRST */

    this.$ = "FIRST";
    break;

case 346:
    /*! Production::    Aggregator : LAST */

    this.$ = "LAST";
    break;

case 347:
    /*! Production::    Aggregator : AGGR */

    this.$ = "AGGR";
    break;

case 348:
    /*! Production::    Aggregator : ARRAY */

    this.$ = "ARRAY";
    break;

case 349:
    /*! Production::    FuncValue : Literal LPAR FuncValue_option ExprList RPAR */

    var funcid = yyvstack[yysp - 4];
    var exprlist = yyvstack[yysp - 1];
    if(exprlist.length > 1 && (funcid.toUpperCase() == 'MIN' || funcid.toUpperCase() == 'MAX')) {
            this.$ = new yy.FuncValue({funcid: funcid, args: exprlist});
    } else if(alasql.aggr[yyvstack[yysp - 4]]) {
        this.$ = new yy.AggrValue({aggregatorid: 'REDUCE',
              funcid: funcid, expression: exprlist.pop(),distinct:(yyvstack[yysp - 2]=='DISTINCT') });
    } else {
        this.$ = new yy.FuncValue({funcid: funcid, args: exprlist});
    };
    break;

case 350:
    /*! Production::    FuncValue : Literal LPAR RPAR */

    this.$ = new yy.FuncValue({ funcid: yyvstack[yysp - 2] })
    break;

case 351:
    /*! Production::    FuncValue : IF LPAR ExprList RPAR */

    this.$ = new yy.FuncValue({ funcid: 'IIF', args:yyvstack[yysp - 1] })
    break;

case 352:
    /*! Production::    FuncValue : REPLACE LPAR ExprList RPAR */

    this.$ = new yy.FuncValue({ funcid: 'REPLACE', args:yyvstack[yysp - 1] })
    break;

case 353:
    /*! Production::    FuncValue : DATEADD LPAR Literal COMMA Expression COMMA Expression RPAR */

    this.$ = new yy.FuncValue({ funcid: 'DATEADD', args:[new yy.StringValue({value:yyvstack[yysp - 5]}),yyvstack[yysp - 3],yyvstack[yysp - 1]]})
    break;

case 354:
    /*! Production::    FuncValue : DATEADD LPAR STRING COMMA Expression COMMA Expression RPAR */

    this.$ = new yy.FuncValue({ funcid: 'DATEADD', args:[yyvstack[yysp - 5],yyvstack[yysp - 3],yyvstack[yysp - 1]]})
    break;

case 355:
    /*! Production::    FuncValue : DATEDIFF LPAR Literal COMMA Expression COMMA Expression RPAR */

    this.$ = new yy.FuncValue({ funcid: 'DATEDIFF', args:[new yy.StringValue({value:yyvstack[yysp - 5]}),yyvstack[yysp - 3],yyvstack[yysp - 1]]})
    break;

case 356:
    /*! Production::    FuncValue : DATEDIFF LPAR STRING COMMA Expression COMMA Expression RPAR */

    this.$ = new yy.FuncValue({ funcid: 'DATEDIFF', args:[yyvstack[yysp - 5],yyvstack[yysp - 3],yyvstack[yysp - 1]]})
    break;

case 357:
    /*! Production::    FuncValue : TIMESTAMPDIFF LPAR Expression COMMA Expression COMMA Expression RPAR */

    this.$ = new yy.FuncValue({ funcid: 'TIMESTAMPDIFF', args:[new yy.StringValue({value:yyvstack[yysp - 5]}),yyvstack[yysp - 3],yyvstack[yysp - 1]]})
    break;

case 358:
    /*! Production::    FuncValue : INTERVAL Expression Literal */

    this.$ = new yy.FuncValue({ funcid: 'INTERVAL', args:[yyvstack[yysp - 1],new yy.StringValue({value:(yyvstack[yysp]).toLowerCase()})]});
    break;

case 360:
    /*! Production::    ExprList : ExprList COMMA Expression */

    yyvstack[yysp - 2].push(yyvstack[yysp]); this.$ = yyvstack[yysp - 2]
    break;

case 361:
    /*! Production::    NumValue : NUMBER */

    this.$ = new yy.NumValue({value:+yyvstack[yysp]});
    break;

case 362:
    /*! Production::    LogicValue : TRUE */

    this.$ = new yy.LogicValue({value:true});
    break;

case 363:
    /*! Production::    LogicValue : FALSE */

    this.$ = new yy.LogicValue({value:false});
    break;

case 364:
    /*! Production::    StringValue : STRING */

    this.$ = new yy.StringValue({value: yyvstack[yysp].substr(1,yyvstack[yysp].length-2).replace(/(\\\')/g,"'").replace(/(\'\')/g,"'")});
    break;

case 365:
    /*! Production::    StringValue : NSTRING */

    this.$ = new yy.StringValue({value: yyvstack[yysp].substr(2,yyvstack[yysp].length-3).replace(/(\\\')/g,"'").replace(/(\'\')/g,"'")});
    break;

case 366:
    /*! Production::    NullValue : NULL */

    this.$ = new yy.NullValue({value:undefined});
    break;

case 367:
    /*! Production::    VarValue : AT Literal */

    this.$ = new yy.VarValue({variable:yyvstack[yysp]});
    break;

case 368:
    /*! Production::    ExistsValue : EXISTS LPAR Select RPAR */

    if(!yy.exists) yy.exists = [];
    this.$ = new yy.ExistsValue({value:yyvstack[yysp - 1], existsidx:yy.exists.length});
    yy.exists.push(yyvstack[yysp - 1]);
    break;

case 369:
    /*! Production::    ArrayValue : ARRAYLBRA ExprList RBRA */

    this.$ = new yy.ArrayValue({value:yyvstack[yysp - 1]});
    break;

case 370:
    /*! Production::    ParamValue : DOLLAR ParamValue_group */
case 371:
    /*! Production::    ParamValue : COLON Literal */

    this.$ = new yy.ParamValue({param: yyvstack[yysp]});
    break;

case 372:
    /*! Production::    ParamValue : QUESTION */

    if(typeof yy.question == 'undefined') yy.question = 0;
    this.$ = new yy.ParamValue({param: yy.question++});
    break;

case 373:
    /*! Production::    ParamValue : BRAQUESTION */

    if(typeof yy.question == 'undefined') yy.question = 0;
    this.$ = new yy.ParamValue({param: yy.question++, array:true});
    break;

case 374:
    /*! Production::    CaseValue : CASE Expression WhensList ElseClause END */

    this.$ = new yy.CaseValue({expression:yyvstack[yysp - 3], whens: yyvstack[yysp - 2], elses: yyvstack[yysp - 1]});
    break;

case 375:
    /*! Production::    CaseValue : CASE WhensList ElseClause END */

    this.$ = new yy.CaseValue({whens: yyvstack[yysp - 2], elses: yyvstack[yysp - 1]});
    break;

case 376:
    /*! Production::    WhensList : WhensList When */
case 704:
    /*! Production::    MergeMatchedList : MergeMatchedList MergeMatched */
case 705:
    /*! Production::    MergeMatchedList : MergeMatchedList MergeNotMatched */

    this.$ = yyvstack[yysp - 1]; this.$.push(yyvstack[yysp]);
    break;

case 378:
    /*! Production::    When : WHEN Expression THEN Expression */

    this.$ = {when: yyvstack[yysp - 2], then: yyvstack[yysp] };
    break;

case 381:
    /*! Production::    Op : Expression REGEXP Expression */
case 382:
    /*! Production::    Op : Expression TILDA Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'REGEXP', right:yyvstack[yysp]});
    break;

case 383:
    /*! Production::    Op : Expression GLOB Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'GLOB', right:yyvstack[yysp]});
    break;

case 384:
    /*! Production::    Op : Expression LIKE Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'LIKE', right:yyvstack[yysp]});
    break;

case 385:
    /*! Production::    Op : Expression LIKE Expression ESCAPE Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 4], op:'LIKE', right:yyvstack[yysp - 2], escape:yyvstack[yysp]});
    break;

case 386:
    /*! Production::    Op : Expression NOT_LIKE Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'NOT LIKE', right:yyvstack[yysp] });
    break;

case 387:
    /*! Production::    Op : Expression NOT_LIKE Expression ESCAPE Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 4], op:'NOT LIKE', right:yyvstack[yysp - 2], escape:yyvstack[yysp] });
    break;

case 388:
    /*! Production::    Op : Expression BARBAR Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'||', right:yyvstack[yysp]});
    break;

case 389:
    /*! Production::    Op : Expression PLUS Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'+', right:yyvstack[yysp]});
    break;

case 390:
    /*! Production::    Op : Expression MINUS Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'-', right:yyvstack[yysp]});
    break;

case 391:
    /*! Production::    Op : Expression STAR Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'*', right:yyvstack[yysp]});
    break;

case 392:
    /*! Production::    Op : Expression SLASH Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'/', right:yyvstack[yysp]});
    break;

case 393:
    /*! Production::    Op : Expression MODULO Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'%', right:yyvstack[yysp]});
    break;

case 394:
    /*! Production::    Op : Expression CARET Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'^', right:yyvstack[yysp]});
    break;

case 395:
    /*! Production::    Op : Expression GTGT Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'>>', right:yyvstack[yysp]});
    break;

case 396:
    /*! Production::    Op : Expression LTLT Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'<<', right:yyvstack[yysp]});
    break;

case 397:
    /*! Production::    Op : Expression AMPERSAND Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'&', right:yyvstack[yysp]});
    break;

case 398:
    /*! Production::    Op : Expression BAR Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'|', right:yyvstack[yysp]});
    break;

case 399:
    /*! Production::    Op : Expression ArrowDot Literal */
case 400:
    /*! Production::    Op : Expression ArrowDot NumValue */
case 402:
    /*! Production::    Op : Expression ArrowDot FuncValue */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'->' , right:yyvstack[yysp]});
    break;

case 401:
    /*! Production::    Op : Expression ArrowDot LPAR Expression RPAR */

    this.$ = new yy.Op({left:yyvstack[yysp - 4], op:'->' , right:yyvstack[yysp - 1]});
    break;

case 403:
    /*! Production::    Op : Expression EXCLAMATION Literal */
case 404:
    /*! Production::    Op : Expression EXCLAMATION NumValue */
case 406:
    /*! Production::    Op : Expression EXCLAMATION FuncValue */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'!' , right:yyvstack[yysp]});
    break;

case 405:
    /*! Production::    Op : Expression EXCLAMATION LPAR Expression RPAR */

    this.$ = new yy.Op({left:yyvstack[yysp - 4], op:'!' , right:yyvstack[yysp - 1]});
    break;

case 407:
    /*! Production::    Op : Expression GT Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'>' , right:yyvstack[yysp]});
    break;

case 408:
    /*! Production::    Op : Expression GE Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'>=' , right:yyvstack[yysp]});
    break;

case 409:
    /*! Production::    Op : Expression LT Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'<' , right:yyvstack[yysp]});
    break;

case 410:
    /*! Production::    Op : Expression LE Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'<=' , right:yyvstack[yysp]});
    break;

case 411:
    /*! Production::    Op : Expression EQ Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'=' , right:yyvstack[yysp]});
    break;

case 412:
    /*! Production::    Op : Expression EQEQ Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'==' , right:yyvstack[yysp]});
    break;

case 413:
    /*! Production::    Op : Expression EQEQEQ Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'===' , right:yyvstack[yysp]});
    break;

case 414:
    /*! Production::    Op : Expression NE Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'!=' , right:yyvstack[yysp]});
    break;

case 415:
    /*! Production::    Op : Expression NEEQEQ Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'!==' , right:yyvstack[yysp]});
    break;

case 416:
    /*! Production::    Op : Expression NEEQEQEQ Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'!===' , right:yyvstack[yysp]});
    break;

case 417:
    /*! Production::    Op : Expression CondOp AllSome LPAR Select RPAR */

    if(!yy.queries) yy.queries = [];
    this.$ = new yy.Op({left:yyvstack[yysp - 5], op:yyvstack[yysp - 4] , allsome:yyvstack[yysp - 3], right:yyvstack[yysp - 1], queriesidx: yy.queries.length});
    yy.queries.push(yyvstack[yysp - 1]);
    break;

case 418:
    /*! Production::    Op : Expression CondOp AllSome LPAR ExprList RPAR */

    this.$ = new yy.Op({left:yyvstack[yysp - 5], op:yyvstack[yysp - 4] , allsome:yyvstack[yysp - 3], right:yyvstack[yysp - 1]});
    break;

case 419:
    /*! Production::    Op : Expression AND Expression */

    if(yyvstack[yysp - 2].op == 'BETWEEN1') {
    
        if(yyvstack[yysp - 2].left.op == 'AND') {
            this.$ = new yy.Op({left:yyvstack[yysp - 2].left.left,op:'AND',right:
                new yy.Op({left:yyvstack[yysp - 2].left.right, op:'BETWEEN',
                    right1:yyvstack[yysp - 2].right, right2:yyvstack[yysp]})
            });
        } else {
            this.$ = new yy.Op({left:yyvstack[yysp - 2].left, op:'BETWEEN',
                right1:yyvstack[yysp - 2].right, right2:yyvstack[yysp]});
        }
    
    } else if(yyvstack[yysp - 2].op == 'NOT BETWEEN1') {
        if(yyvstack[yysp - 2].left.op == 'AND') {
            this.$ = new yy.Op({left:yyvstack[yysp - 2].left.left,op:'AND',right:
                new yy.Op({left:yyvstack[yysp - 2].left.right, op:'NOT BETWEEN',
                    right1:yyvstack[yysp - 2].right, right2:yyvstack[yysp]})
            });
        } else {
            this.$ = new yy.Op({left:yyvstack[yysp - 2].left, op:'NOT BETWEEN',
                right1:yyvstack[yysp - 2].right, right2:yyvstack[yysp]});
        }
    } else {
        this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'AND', right:yyvstack[yysp]});
    }
    break;

case 420:
    /*! Production::    Op : Expression OR Expression */

    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'OR' , right:yyvstack[yysp]});
    break;

case 421:
    /*! Production::    Op : NOT Expression */

    this.$ = new yy.UniOp({op:'NOT' , right:yyvstack[yysp]});
    break;

case 422:
    /*! Production::    Op : MINUS Expression */

    this.$ = new yy.UniOp({op:'-' , right:yyvstack[yysp]});
    break;

case 423:
    /*! Production::    Op : PLUS Expression */

    this.$ = new yy.UniOp({op:'+' , right:yyvstack[yysp]});
    break;

case 424:
    /*! Production::    Op : TILDA Expression */

    this.$ = new yy.UniOp({op:'~' , right:yyvstack[yysp]});
    break;

case 425:
    /*! Production::    Op : SHARP Expression */

    this.$ = new yy.UniOp({op:'#' , right:yyvstack[yysp]});
    break;

case 426:
    /*! Production::    Op : LPAR Expression RPAR */

    this.$ = new yy.UniOp({right: yyvstack[yysp - 1]});
    break;

case 427:
    /*! Production::    Op : Expression IN LPAR Select RPAR */

    if(!yy.queries) yy.queries = [];
    this.$ = new yy.Op({left: yyvstack[yysp - 4], op:'IN', right:yyvstack[yysp - 1], queriesidx: yy.queries.length});
    yy.queries.push(yyvstack[yysp - 1]);
    break;

case 428:
    /*! Production::    Op : Expression NOT IN LPAR Select RPAR */

    if(!yy.queries) yy.queries = [];
    this.$ = new yy.Op({left: yyvstack[yysp - 5], op:'NOT IN', right:yyvstack[yysp - 1], queriesidx: yy.queries.length});
    yy.queries.push(yyvstack[yysp - 1]);
    break;

case 429:
    /*! Production::    Op : Expression IN LPAR ExprList RPAR */

    this.$ = new yy.Op({left: yyvstack[yysp - 4], op:'IN', right:yyvstack[yysp - 1]});
    break;

case 430:
    /*! Production::    Op : Expression NOT IN LPAR ExprList RPAR */

    this.$ = new yy.Op({left: yyvstack[yysp - 5], op:'NOT IN', right:yyvstack[yysp - 1]});
    break;

case 431:
    /*! Production::    Op : Expression IN LPAR RPAR */

    this.$ = new yy.Op({left: yyvstack[yysp - 3], op:'IN', right:[]});
    break;

case 432:
    /*! Production::    Op : Expression NOT IN LPAR RPAR */

    this.$ = new yy.Op({left: yyvstack[yysp - 4], op:'NOT IN', right:[]});
    break;

case 433:
    /*! Production::    Op : Expression IN ColFunc */
case 435:
    /*! Production::    Op : Expression IN VarValue */

    this.$ = new yy.Op({left: yyvstack[yysp - 2], op:'IN', right:yyvstack[yysp]});
    break;

case 434:
    /*! Production::    Op : Expression NOT IN ColFunc */
case 436:
    /*! Production::    Op : Expression NOT IN VarValue */

    this.$ = new yy.Op({left: yyvstack[yysp - 3], op:'NOT IN', right:yyvstack[yysp]});
    break;

case 437:
    /*! Production::    Op : Expression BETWEEN Expression */

    /*			var expr = $3;
    if(expr.left && expr.left.op == 'AND') {
        $$ = new yy.Op({left:new yy.Op({left:$1, op:'BETWEEN', right:expr.left}), op:'AND', right:expr.right });
    } else {
    */
        this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'BETWEEN1', right:yyvstack[yysp] });
    //			}
    break;

case 438:
    /*! Production::    Op : Expression NOT_BETWEEN Expression */

    //			var expr = $3;
    //			if(expr.left && expr.left.op == 'AND') {
    //				$$ = new yy.Op({left:new yy.Op({left:$1, op:'NOT BETWEEN', right:expr.left}), op:'AND', right:expr.right });
    //			} else {
    this.$ = new yy.Op({left:yyvstack[yysp - 2], op:'NOT BETWEEN1', right:yyvstack[yysp] });
    //			}
    break;

case 439:
    /*! Production::    Op : Expression IS Expression */

    this.$ = new yy.Op({op:'IS' , left:yyvstack[yysp - 2], right:yyvstack[yysp]});
    break;

case 440:
    /*! Production::    Op : Expression NOT NULL */

    this.$ = new yy.Op({
        op:'IS',
        left:yyvstack[yysp - 2],
        right: new yy.UniOp({
            op:'NOT',
            right:new yy.NullValue({value:undefined})
        })
    });
    break;

case 441:
    /*! Production::    Op : Expression DOUBLECOLON ColumnType */

    this.$ = new yy.Convert({expression:yyvstack[yysp - 2]}) ; yy.extend(this.$,yyvstack[yysp]) ;
    break;

case 451:
    /*! Production::    AllSome : ALL */

    this.$ = 'ALL';
    break;

case 452:
    /*! Production::    AllSome : SOME */

    this.$ = 'SOME';
    break;

case 453:
    /*! Production::    AllSome : ANY */

    this.$ = 'ANY';
    break;

case 454:
    /*! Production::    Update : UPDATE Table SET SetColumnsList WHERE Expression */

    this.$ = new yy.Update({table:yyvstack[yysp - 4], columns:yyvstack[yysp - 2], where:yyvstack[yysp]});
    break;

case 455:
    /*! Production::    Update : UPDATE Table SET SetColumnsList */

    this.$ = new yy.Update({table:yyvstack[yysp - 2], columns:yyvstack[yysp]});
    break;

case 458:
    /*! Production::    SetColumn : Column EQ Expression */

    this.$ = new yy.SetColumn({column:yyvstack[yysp - 2], expression:yyvstack[yysp]})
    break;

case 459:
    /*! Production::    SetColumn : SetColumn_group Literal EQ Expression */

    this.$ = new yy.SetColumn({variable:yyvstack[yysp - 2], expression:yyvstack[yysp], method:yyvstack[yysp - 3]})
    break;

case 460:
    /*! Production::    Delete : DELETE FROM Table WHERE Expression */

    this.$ = new yy.Delete({table:yyvstack[yysp - 2], where:yyvstack[yysp]});
    break;

case 461:
    /*! Production::    Delete : DELETE FROM Table */

    this.$ = new yy.Delete({table:yyvstack[yysp]});
    break;

case 462:
    /*! Production::    Insert : INSERT Into Table Values ValuesListsList */

    this.$ = new yy.Insert({into:yyvstack[yysp - 2], values: yyvstack[yysp]});
    break;

case 463:
    /*! Production::    Insert : INSERT Into Table ValuesListsList */

    this.$ = new yy.Insert({into:yyvstack[yysp - 1], values: yyvstack[yysp]});
    break;

case 464:
    /*! Production::    Insert : INSERT OR REPLACE Into Table Values ValuesListsList */
case 466:
    /*! Production::    Insert : REPLACE Into Table Values ValuesListsList */

    this.$ = new yy.Insert({into:yyvstack[yysp - 2], values: yyvstack[yysp], orreplace:true});
    break;

case 465:
    /*! Production::    Insert : INSERT OR REPLACE Into Table ValuesListsList */
case 467:
    /*! Production::    Insert : REPLACE Into Table ValuesListsList */

    this.$ = new yy.Insert({into:yyvstack[yysp - 1], values: yyvstack[yysp], orreplace:true});
    break;

case 468:
    /*! Production::    Insert : INSERT Into Table DEFAULT Values */

    this.$ = new yy.Insert({into:yyvstack[yysp - 2], "default": true}) ;
    break;

case 469:
    /*! Production::    Insert : INSERT Into Table LPAR ColumnsList RPAR Values ValuesListsList */

    this.$ = new yy.Insert({into:yyvstack[yysp - 5], columns: yyvstack[yysp - 3], values: yyvstack[yysp]});
    break;

case 470:
    /*! Production::    Insert : INSERT Into Table LPAR ColumnsList RPAR ValuesListsList */

    this.$ = new yy.Insert({into:yyvstack[yysp - 4], columns: yyvstack[yysp - 2], values: yyvstack[yysp]});
    break;

case 471:
    /*! Production::    Insert : INSERT Into Table Select */

    this.$ = new yy.Insert({into:yyvstack[yysp - 1], select: yyvstack[yysp]});
    break;

case 472:
    /*! Production::    Insert : INSERT OR REPLACE Into Table Select */

    this.$ = new yy.Insert({into:yyvstack[yysp - 1], select: yyvstack[yysp], orreplace:true});
    break;

case 473:
    /*! Production::    Insert : INSERT Into Table LPAR ColumnsList RPAR Select */

    this.$ = new yy.Insert({into:yyvstack[yysp - 4], columns: yyvstack[yysp - 2], select: yyvstack[yysp]});
    break;

case 476:
    /*! Production::    Into : %epsilon */
case 498:
    /*! Production::    CreateTableOptionsClause : %epsilon */
case 722:
    /*! Production::    OutputClause : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-):
    this.$ = undefined;
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-)
    break;

case 478:
    /*! Production::    ValuesListsList : LPAR ValuesList RPAR */

    this.$ = [yyvstack[yysp - 1]];
    break;

case 481:
    /*! Production::    ValuesListsList : ValuesListsList COMMA LPAR ValuesList RPAR */

    this.$ = yyvstack[yysp - 4]; yyvstack[yysp - 4].push(yyvstack[yysp - 1])
    break;

case 494:
    /*! Production::    CreateTable : CREATE TemporaryClause TableClass IfNotExists Table LPAR CreateTableDefClause RPAR CreateTableOptionsClause */

    this.$ = new yy.CreateTable({table:yyvstack[yysp - 4]});
    yy.extend(this.$,yyvstack[yysp - 7]);
    yy.extend(this.$,yyvstack[yysp - 6]);
    yy.extend(this.$,yyvstack[yysp - 5]);
    yy.extend(this.$,yyvstack[yysp - 2]);
    yy.extend(this.$,yyvstack[yysp]);
    break;

case 495:
    /*! Production::    CreateTable : CREATE TemporaryClause TableClass IfNotExists Table */

    this.$ = new yy.CreateTable({table:yyvstack[yysp]});
    yy.extend(this.$,yyvstack[yysp - 3]);
    yy.extend(this.$,yyvstack[yysp - 2]);
    yy.extend(this.$,yyvstack[yysp - 1]);
    break;

case 497:
    /*! Production::    TableClass : CLASS */

    this.$ = {class:true};
    break;

case 500:
    /*! Production::    CreateTableOptions : CreateTableOptions CreateTableOption */
case 764:
    /*! Production::    Query : QUESTIONDASH FuncValue */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)
    break;

case 503:
    /*! Production::    CreateTableOption : LITERAL EQ Literal */
case 504:
    /*! Production::    CreateTableOption : IDENTITY EQ NumValue */
case 505:
    /*! Production::    CreateTableOption : COLLATE EQ Literal */
case 615:
    /*! Production::    SubqueryRestriction : WITH READ ONLY */
case 616:
    /*! Production::    SubqueryRestriction : WITH CHECK OPTION */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 2];
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,-,-,-,-)
    break;

case 507:
    /*! Production::    TemporaryClause : TEMP */

    this.$ = {temporary:true};
    break;

case 509:
    /*! Production::    IfNotExists : IF NOT EXISTS */

    this.$ = {ifnotexists: true};
    break;

case 510:
    /*! Production::    CreateTableDefClause : ColumnDefsList COMMA ConstraintsList */

    this.$ = {columns: yyvstack[yysp - 2], constraints: yyvstack[yysp]};
    break;

case 511:
    /*! Production::    CreateTableDefClause : ColumnDefsList */

    this.$ = {columns: yyvstack[yysp]};
    break;

case 512:
    /*! Production::    CreateTableDefClause : AS Select */

    this.$ = {as: yyvstack[yysp]}
    break;

case 515:
    /*! Production::    Constraint : ConstraintName PrimaryKey */
case 516:
    /*! Production::    Constraint : ConstraintName ForeignKey */
case 517:
    /*! Production::    Constraint : ConstraintName UniqueKey */
case 518:
    /*! Production::    Constraint : ConstraintName IndexKey */
case 519:
    /*! Production::    Constraint : ConstraintName Check */

    yyvstack[yysp].constraintid = yyvstack[yysp - 1]; this.$ = yyvstack[yysp];
    break;

case 522:
    /*! Production::    Check : CHECK LPAR Expression RPAR */

    this.$ = {type: 'CHECK', expression: yyvstack[yysp - 1]};
    break;

case 523:
    /*! Production::    PrimaryKey : PRIMARY KEY PrimaryKey_option LPAR ColsList RPAR */

    this.$ = {type: 'PRIMARY KEY', columns: yyvstack[yysp - 1], clustered:(yyvstack[yysp - 3]+'').toUpperCase()};
    break;

case 524:
    /*! Production::    ForeignKey : FOREIGN KEY LPAR ColsList RPAR REFERENCES Table ForeignKey_option OnForeignKeyClause */

    this.$ = {type: 'FOREIGN KEY', columns: yyvstack[yysp - 5], fktable: yyvstack[yysp - 2], fkcolumns: yyvstack[yysp - 1]};
    break;

case 530:
    /*! Production::    UniqueKey : UNIQUE UniqueKey_option UniqueKey_option2 LPAR ColumnsList RPAR */

    this.$ = {type: 'UNIQUE', columns: yyvstack[yysp - 1], clustered:(yyvstack[yysp - 3]+'').toUpperCase()};
    break;

case 531:
    /*! Production::    IndexKey : INDEX Literal LPAR ColumnsList RPAR */
case 532:
    /*! Production::    IndexKey : KEY Literal LPAR ColumnsList RPAR */
case 617:
    /*! Production::    SubqueryRestriction : WITH CHECK OPTION CONSTRAINT Constraint */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 4];
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,-,-,-,-,-,-)
    break;

case 539:
    /*! Production::    ColumnDef : Literal ColumnType ColumnConstraintsClause */

    this.$ = new yy.ColumnDef({columnid:yyvstack[yysp - 2]}); yy.extend(this.$,yyvstack[yysp - 1]); yy.extend(this.$,yyvstack[yysp]);
    break;

case 540:
    /*! Production::    ColumnDef : Literal ColumnConstraints */

    this.$ = new yy.ColumnDef({columnid:yyvstack[yysp - 1]}); yy.extend(this.$,yyvstack[yysp]);
    break;

case 541:
    /*! Production::    ColumnDef : Literal */

    this.$ = new yy.ColumnDef({columnid:yyvstack[yysp], dbtypeid: ''});
    break;

case 542:
    /*! Production::    SingularColumnType : LiteralWithSpaces LPAR NumberMax COMMA NUMBER RPAR */

    this.$ = {dbtypeid: yyvstack[yysp - 5], dbsize: yyvstack[yysp - 3], dbprecision: +yyvstack[yysp - 1]}
    break;

case 543:
    /*! Production::    SingularColumnType : LiteralWithSpaces LPAR NumberMax RPAR */

    this.$ = {dbtypeid: yyvstack[yysp - 3], dbsize: yyvstack[yysp - 1]}
    break;

case 544:
    /*! Production::    SingularColumnType : LiteralWithSpaces */

    this.$ = {dbtypeid: yyvstack[yysp]}
    break;

case 545:
    /*! Production::    SingularColumnType : ENUM LPAR ValuesList RPAR */

    this.$ = {dbtypeid: 'ENUM', enumvalues: yyvstack[yysp - 1]}
    break;

case 546:
    /*! Production::    ColumnType : SingularColumnType BRALITERAL */

    this.$ = yyvstack[yysp - 1]; yyvstack[yysp - 1].dbtypeid += '[' + yyvstack[yysp] + ']';
    break;

case 548:
    /*! Production::    NumberMax : NUMBER */
case 755:
    /*! Production::    SharpLiteral : SHARP NUMBER */

    this.$ = +yyvstack[yysp];
    break;

case 550:
    /*! Production::    ColumnConstraintsClause : %epsilon */

    this.$ = undefined
    break;

case 552:
    /*! Production::    ColumnConstraintsList : ColumnConstraintsList ColumnConstraint */

    yy.extend(yyvstack[yysp - 1],yyvstack[yysp]); this.$ = yyvstack[yysp - 1];
    break;

case 555:
    /*! Production::    ColumnConstraint : PRIMARY KEY */

    this.$ = {primarykey:true};
    break;

case 556:
    /*! Production::    ColumnConstraint : FOREIGN KEY REFERENCES Table ColumnConstraint_option */
case 557:
    /*! Production::    ColumnConstraint : REFERENCES Table ColumnConstraint_option2 */

    this.$ = {foreignkey:{table:yyvstack[yysp - 1], columnid: yyvstack[yysp]}};
    break;

case 558:
    /*! Production::    ColumnConstraint : IDENTITY LPAR NumValue COMMA NumValue RPAR */

    this.$ = {identity: {value:yyvstack[yysp - 3],step:yyvstack[yysp - 1]}}
    break;

case 559:
    /*! Production::    ColumnConstraint : IDENTITY */

    this.$ = {identity: {value:1,step:1}}
    break;

case 560:
    /*! Production::    ColumnConstraint : DEFAULT PrimitiveValue */
case 562:
    /*! Production::    ColumnConstraint : DEFAULT FuncValue */

    this.$ = {"default":yyvstack[yysp]};
    break;

case 561:
    /*! Production::    ColumnConstraint : DEFAULT LPAR Expression RPAR */

    this.$ = {"default":yyvstack[yysp - 1]};
    break;

case 563:
    /*! Production::    ColumnConstraint : NULL */

    this.$ = {null:true};
    break;

case 564:
    /*! Production::    ColumnConstraint : NOT NULL */

    this.$ = {notnull:true};
    break;

case 565:
    /*! Production::    ColumnConstraint : Check */

    this.$ = {check:yyvstack[yysp]};
    break;

case 566:
    /*! Production::    ColumnConstraint : UNIQUE */

    this.$ = {unique:true};
    break;

case 567:
    /*! Production::    ColumnConstraint : ON UPDATE PrimitiveValue */

    this.$ = {"onupdate":yyvstack[yysp]};
    break;

case 568:
    /*! Production::    ColumnConstraint : ON UPDATE LPAR Expression RPAR */

    this.$ = {"onupdate":yyvstack[yysp - 1]};
    break;

case 569:
    /*! Production::    DropTable : DROP DropTable_group IfExists TablesList */

    this.$ = new yy.DropTable({tables:yyvstack[yysp],type:yyvstack[yysp - 2]}); yy.extend(this.$, yyvstack[yysp - 1]);
    break;

case 573:
    /*! Production::    IfExists : IF EXISTS */

    this.$ = {ifexists: true};
    break;

case 574:
    /*! Production::    AlterTable : ALTER TABLE Table RENAME TO Literal */

    this.$ = new yy.AlterTable({table:yyvstack[yysp - 3], renameto: yyvstack[yysp]});
    break;

case 575:
    /*! Production::    AlterTable : ALTER TABLE Table ADD COLUMN ColumnDef */

    this.$ = new yy.AlterTable({table:yyvstack[yysp - 3], addcolumn: yyvstack[yysp]});
    break;

case 576:
    /*! Production::    AlterTable : ALTER TABLE Table MODIFY COLUMN ColumnDef */

    this.$ = new yy.AlterTable({table:yyvstack[yysp - 3], modifycolumn: yyvstack[yysp]});
    break;

case 577:
    /*! Production::    AlterTable : ALTER TABLE Table RENAME COLUMN Literal TO Literal */

    this.$ = new yy.AlterTable({table:yyvstack[yysp - 5], renamecolumn: yyvstack[yysp - 2], to: yyvstack[yysp]});
    break;

case 578:
    /*! Production::    AlterTable : ALTER TABLE Table DROP COLUMN Literal */

    this.$ = new yy.AlterTable({table:yyvstack[yysp - 3], dropcolumn: yyvstack[yysp]});
    break;

case 579:
    /*! Production::    RenameTable : RENAME TABLE Table TO Literal */

    this.$ = new yy.AlterTable({table:yyvstack[yysp - 2], renameto: yyvstack[yysp]});
    break;

case 580:
    /*! Production::    AttachDatabase : ATTACH Literal DATABASE Literal */

    this.$ = new yy.AttachDatabase({databaseid:yyvstack[yysp], engineid:yyvstack[yysp - 2].toUpperCase() });
    break;

case 581:
    /*! Production::    AttachDatabase : ATTACH Literal DATABASE Literal LPAR ExprList RPAR */

    this.$ = new yy.AttachDatabase({databaseid:yyvstack[yysp - 3], engineid:yyvstack[yysp - 5].toUpperCase(), args:yyvstack[yysp - 1] });
    break;

case 582:
    /*! Production::    AttachDatabase : ATTACH Literal DATABASE Literal AS Literal */

    this.$ = new yy.AttachDatabase({databaseid:yyvstack[yysp - 2], engineid:yyvstack[yysp - 4].toUpperCase(), as:yyvstack[yysp] });
    break;

case 583:
    /*! Production::    AttachDatabase : ATTACH Literal DATABASE Literal LPAR ExprList RPAR AS Literal */

    this.$ = new yy.AttachDatabase({databaseid:yyvstack[yysp - 5], engineid:yyvstack[yysp - 7].toUpperCase(), as:yyvstack[yysp], args:yyvstack[yysp - 3]});
    break;

case 584:
    /*! Production::    DetachDatabase : DETACH DATABASE Literal */

    this.$ = new yy.DetachDatabase({databaseid:yyvstack[yysp]});
    break;

case 585:
    /*! Production::    CreateDatabase : CREATE DATABASE IfNotExists Literal */

    this.$ = new yy.CreateDatabase({databaseid:yyvstack[yysp] }); yy.extend(this.$,yyvstack[yysp]);
    break;

case 586:
    /*! Production::    CreateDatabase : CREATE Literal DATABASE IfNotExists Literal AsClause */

    this.$ = new yy.CreateDatabase({engineid:yyvstack[yysp - 4].toUpperCase(), databaseid:yyvstack[yysp - 1], as:yyvstack[yysp] }); yy.extend(this.$,yyvstack[yysp - 2]);
    break;

case 587:
    /*! Production::    CreateDatabase : CREATE Literal DATABASE IfNotExists Literal LPAR ExprList RPAR AsClause */

    this.$ = new yy.CreateDatabase({engineid:yyvstack[yysp - 7].toUpperCase(), databaseid:yyvstack[yysp - 4], args:yyvstack[yysp - 2], as:yyvstack[yysp] }); yy.extend(this.$,yyvstack[yysp - 5]);
    break;

case 588:
    /*! Production::    CreateDatabase : CREATE Literal DATABASE IfNotExists StringValue AsClause */

    this.$ = new yy.CreateDatabase({engineid:yyvstack[yysp - 4].toUpperCase(),
    as:yyvstack[yysp], args:[yyvstack[yysp - 1]] }); yy.extend(this.$,yyvstack[yysp - 2]);
    break;

case 591:
    /*! Production::    UseDatabase : USE DATABASE Literal */
case 592:
    /*! Production::    UseDatabase : USE Literal */

    this.$ = new yy.UseDatabase({databaseid: yyvstack[yysp] });
    break;

case 593:
    /*! Production::    DropDatabase : DROP DATABASE IfExists Literal */

    this.$ = new yy.DropDatabase({databaseid: yyvstack[yysp] }); yy.extend(this.$,yyvstack[yysp - 1]);
    break;

case 594:
    /*! Production::    DropDatabase : DROP Literal DATABASE IfExists Literal */
case 595:
    /*! Production::    DropDatabase : DROP Literal DATABASE IfExists StringValue */

    this.$ = new yy.DropDatabase({databaseid: yyvstack[yysp], engineid:yyvstack[yysp - 3].toUpperCase() }); yy.extend(this.$,yyvstack[yysp - 1]);
    break;

case 596:
    /*! Production::    CreateIndex : CREATE INDEX Literal ON Table LPAR OrderExpressionsList RPAR */

    this.$ = new yy.CreateIndex({indexid:yyvstack[yysp - 5], table:yyvstack[yysp - 3], columns:yyvstack[yysp - 1]})
    break;

case 597:
    /*! Production::    CreateIndex : CREATE UNIQUE INDEX Literal ON Table LPAR OrderExpressionsList RPAR */

    this.$ = new yy.CreateIndex({indexid:yyvstack[yysp - 5], table:yyvstack[yysp - 3], columns:yyvstack[yysp - 1], unique:true})
    break;

case 598:
    /*! Production::    DropIndex : DROP INDEX Literal */

    this.$ = new yy.DropIndex({indexid:yyvstack[yysp]});
    break;

case 599:
    /*! Production::    ShowDatabases : SHOW DATABASE */

    this.$ = new yy.ShowDatabases();
    break;

case 600:
    /*! Production::    ShowDatabases : SHOW DATABASE LIKE StringValue */

    this.$ = new yy.ShowDatabases({like:yyvstack[yysp]});
    break;

case 601:
    /*! Production::    ShowDatabases : SHOW Literal DATABASE */

    this.$ = new yy.ShowDatabases({engineid:yyvstack[yysp - 1].toUpperCase() });
    break;

case 602:
    /*! Production::    ShowDatabases : SHOW Literal DATABASE LIKE StringValue */

    this.$ = new yy.ShowDatabases({engineid:yyvstack[yysp - 3].toUpperCase() , like:yyvstack[yysp]});
    break;

case 603:
    /*! Production::    ShowTables : SHOW TABLE */

    this.$ = new yy.ShowTables();
    break;

case 604:
    /*! Production::    ShowTables : SHOW TABLE LIKE StringValue */

    this.$ = new yy.ShowTables({like:yyvstack[yysp]});
    break;

case 605:
    /*! Production::    ShowTables : SHOW TABLE FROM Literal */

    this.$ = new yy.ShowTables({databaseid: yyvstack[yysp]});
    break;

case 606:
    /*! Production::    ShowTables : SHOW TABLE FROM Literal LIKE StringValue */

    this.$ = new yy.ShowTables({like:yyvstack[yysp], databaseid: yyvstack[yysp - 2]});
    break;

case 607:
    /*! Production::    ShowColumns : SHOW COLUMN FROM Table */

    this.$ = new yy.ShowColumns({table: yyvstack[yysp]});
    break;

case 608:
    /*! Production::    ShowColumns : SHOW COLUMN FROM Table FROM Literal */

    this.$ = new yy.ShowColumns({table: yyvstack[yysp - 2], databaseid:yyvstack[yysp]});
    break;

case 609:
    /*! Production::    ShowIndex : SHOW INDEX FROM Table */

    this.$ = new yy.ShowIndex({table: yyvstack[yysp]});
    break;

case 610:
    /*! Production::    ShowIndex : SHOW INDEX FROM Table FROM Literal */

    this.$ = new yy.ShowIndex({table: yyvstack[yysp - 2], databaseid: yyvstack[yysp]});
    break;

case 611:
    /*! Production::    ShowCreateTable : SHOW CREATE TABLE Table */

    this.$ = new yy.ShowCreateTable({table: yyvstack[yysp]});
    break;

case 612:
    /*! Production::    ShowCreateTable : SHOW CREATE TABLE Table FROM Literal */

    this.$ = new yy.ShowCreateTable({table: yyvstack[yysp - 2], databaseid:yyvstack[yysp]});
    break;

case 613:
    /*! Production::    CreateView : CREATE TemporaryClause VIEW IfNotExists Table LPAR ColumnsList RPAR AS Select CreateView_option */

    this.$ = new yy.CreateTable({table:yyvstack[yysp - 6],view:true,select:yyvstack[yysp - 1],viewcolumns:yyvstack[yysp - 4]});
    yy.extend(this.$,yyvstack[yysp - 9]);
    yy.extend(this.$,yyvstack[yysp - 7]);
    break;

case 614:
    /*! Production::    CreateView : CREATE TemporaryClause VIEW IfNotExists Table AS Select CreateView_option2 */

    this.$ = new yy.CreateTable({table:yyvstack[yysp - 3],view:true,select:yyvstack[yysp - 1]});
    yy.extend(this.$,yyvstack[yysp - 6]);
    yy.extend(this.$,yyvstack[yysp - 4]);
    break;

case 618:
    /*! Production::    DropView : DROP VIEW IfExists TablesList */

    this.$ = new yy.DropTable({tables:yyvstack[yysp], view:true}); yy.extend(this.$, yyvstack[yysp - 1]);
    break;

case 619:
    /*! Production::    ExpressionStatement : EQ Expression */
case 765:
    /*! Production::    Call : CALL FuncValue */

    this.$ = new yy.ExpressionStatement({expression:yyvstack[yysp]});
    break;

case 620:
    /*! Production::    Source : SOURCE StringValue */

    this.$ = new yy.Source({url:yyvstack[yysp].value});
    break;

case 621:
    /*! Production::    Assert : ASSERT Json */

    this.$ = new yy.Assert({value:yyvstack[yysp]});
    break;

case 622:
    /*! Production::    Assert : ASSERT PrimitiveValue */

    this.$ = new yy.Assert({value:yyvstack[yysp].value});
    break;

case 623:
    /*! Production::    Assert : ASSERT STRING COMMA Json */

    this.$ = new yy.Assert({value:yyvstack[yysp], message:yyvstack[yysp - 2]});
    break;

case 625:
    /*! Production::    Json : AT StringValue */
case 636:
    /*! Production::    JsonPrimitiveValue : LogicValue */
case 638:
    /*! Production::    JsonPrimitiveValue : NullValue */

    this.$ = yyvstack[yysp].value;
    break;

case 626:
    /*! Production::    Json : AT NumValue */
case 634:
    /*! Production::    JsonPrimitiveValue : NumValue */

    this.$ = +yyvstack[yysp].value;
    break;

case 627:
    /*! Production::    Json : AT LogicValue */

    this.$ = (!!yyvstack[yysp].value);
    break;

case 635:
    /*! Production::    JsonPrimitiveValue : StringValue */

    this.$ = ""+yyvstack[yysp].value;
    break;

case 644:
    /*! Production::    JsonObject : LCUR RCUR */

    this.$ = {};
    break;

case 647:
    /*! Production::    JsonArray : RBRA */
case 1052:
    /*! Production::    Select_repetition : %epsilon */
case 1072:
    /*! Production::    SearchSelector_repetition : %epsilon */
case 1074:
    /*! Production::    SearchSelector_repetition2 : %epsilon */
case 1076:
    /*! Production::    SearchSelector_repetition3 : %epsilon */
case 1080:
    /*! Production::    SearchSelector_repetition4 : %epsilon */
case 1082:
    /*! Production::    SearchSelector_repetition5 : %epsilon */
case 1084:
    /*! Production::    SearchSelector_repetition6 : %epsilon */
case 1086:
    /*! Production::    SearchSelector_repetition7 : %epsilon */
case 1088:
    /*! Production::    SearchSelectorList_repetition : %epsilon */
case 1090:
    /*! Production::    SearchSelectorList_repetition2 : %epsilon */

    this.$ = [];
    break;

case 648:
    /*! Production::    JsonPropertiesList : JsonPropertiesList COMMA JsonProperty */

    yy.extend(yyvstack[yysp - 2],yyvstack[yysp]); this.$ = yyvstack[yysp - 2];
    break;

case 650:
    /*! Production::    JsonProperty : STRING COLON JsonValue */

    this.$ = {}; this.$[yyvstack[yysp - 2].substr(1,yyvstack[yysp - 2].length-2)] = yyvstack[yysp];
    break;

case 651:
    /*! Production::    JsonProperty : NUMBER COLON JsonValue */
case 652:
    /*! Production::    JsonProperty : Literal COLON JsonValue */

    this.$ = {}; this.$[yyvstack[yysp - 2]] = yyvstack[yysp];
    break;

case 655:
    /*! Production::    SetVariable : SET Literal EQ OnOff */

    this.$ = new yy.SetVariable({variable:yyvstack[yysp - 2].toLowerCase(), value:yyvstack[yysp]});
    break;

case 656:
    /*! Production::    SetVariable : SET Literal OnOff */

    this.$ = new yy.SetVariable({variable:yyvstack[yysp - 1].toLowerCase(), value:yyvstack[yysp]});
    break;

case 657:
    /*! Production::    SetVariable : SET Literal EQ Expression */

    this.$ = new yy.SetVariable({variable:yyvstack[yysp - 2], expression:yyvstack[yysp]});
    break;

case 658:
    /*! Production::    SetVariable : SET Literal SetPropsList EQ Expression */

    this.$ = new yy.SetVariable({variable:yyvstack[yysp - 3], props: yyvstack[yysp - 2], expression:yyvstack[yysp]});
    break;

case 659:
    /*! Production::    SetVariable : SET AtDollar Literal EQ Expression */

    this.$ = new yy.SetVariable({variable:yyvstack[yysp - 2], expression:yyvstack[yysp], method:yyvstack[yysp - 3]});
    break;

case 660:
    /*! Production::    SetVariable : SET AtDollar Literal SetPropsList EQ Expression */

    this.$ = new yy.SetVariable({variable:yyvstack[yysp - 3], props: yyvstack[yysp - 2], expression:yyvstack[yysp], method:yyvstack[yysp - 4]});
    break;

case 661:
    /*! Production::    AtDollar : AT */

    this.$ = '@';
    break;

case 662:
    /*! Production::    AtDollar : DOLLAR */

    this.$ = '$';
    break;

case 668:
    /*! Production::    OnOff : ON */

    this.$ = true;
    break;

case 669:
    /*! Production::    OnOff : OFF */

    this.$ = false;
    break;

case 670:
    /*! Production::    CommitTransaction : COMMIT TRANSACTION */

    this.$ = new yy.CommitTransaction();
    break;

case 671:
    /*! Production::    RollbackTransaction : ROLLBACK TRANSACTION */

    this.$ = new yy.RollbackTransaction();
    break;

case 672:
    /*! Production::    BeginTransaction : BEGIN TRANSACTION */

    this.$ = new yy.BeginTransaction();
    break;

case 673:
    /*! Production::    If : IF Expression AStatement ElseStatement */

    this.$ = new yy.If({expression:yyvstack[yysp - 2],thenstat:yyvstack[yysp - 1], elsestat:yyvstack[yysp]});
    if(yyvstack[yysp - 1].exists) this.$.exists = yyvstack[yysp - 1].exists;
    if(yyvstack[yysp - 1].queries) this.$.queries = yyvstack[yysp - 1].queries;
    break;

case 674:
    /*! Production::    If : IF Expression AStatement */

    this.$ = new yy.If({expression:yyvstack[yysp - 1],thenstat:yyvstack[yysp]});
    if(yyvstack[yysp].exists) this.$.exists = yyvstack[yysp].exists;
    if(yyvstack[yysp].queries) this.$.queries = yyvstack[yysp].queries;
    break;

case 676:
    /*! Production::    While : WHILE Expression AStatement */

    this.$ = new yy.While({expression:yyvstack[yysp - 1],loopstat:yyvstack[yysp]});
    if(yyvstack[yysp].exists) this.$.exists = yyvstack[yysp].exists;
    if(yyvstack[yysp].queries) this.$.queries = yyvstack[yysp].queries;
    break;

case 677:
    /*! Production::    Continue : CONTINUE */

    this.$ = new yy.Continue();
    break;

case 678:
    /*! Production::    Break : BREAK */

    this.$ = new yy.Break();
    break;

case 679:
    /*! Production::    BeginEnd : BEGIN Statements END */

    this.$ = new yy.BeginEnd({statements:yyvstack[yysp - 1]});
    break;

case 680:
    /*! Production::    Print : PRINT ExprList */

    this.$ = new yy.Print({exprs:yyvstack[yysp]});
    break;

case 681:
    /*! Production::    Print : PRINT Select */

    this.$ = new yy.Print({select:yyvstack[yysp]});
    break;

case 682:
    /*! Production::    Require : REQUIRE StringValuesList */

    this.$ = new yy.Require({paths:yyvstack[yysp]});
    break;

case 683:
    /*! Production::    Require : REQUIRE PluginsList */

    this.$ = new yy.Require({plugins:yyvstack[yysp]});
    break;

case 684:
    /*! Production::    Plugin : ECHO */
case 685:
    /*! Production::    Plugin : Literal */

    this.$ = yyvstack[yysp].toUpperCase();
    break;

case 686:
    /*! Production::    Echo : ECHO Expression */

    this.$ = new yy.Echo({expr:yyvstack[yysp]});
    break;

case 691:
    /*! Production::    Declare : DECLARE DeclaresList */

    this.$ = new yy.Declare({declares:yyvstack[yysp]});
    break;

case 694:
    /*! Production::    DeclareItem : AT Literal ColumnType */

    this.$ = {variable: yyvstack[yysp - 1]}; yy.extend(this.$,yyvstack[yysp]);
    break;

case 695:
    /*! Production::    DeclareItem : AT Literal AS ColumnType */

    this.$ = {variable: yyvstack[yysp - 2]}; yy.extend(this.$,yyvstack[yysp]);
    break;

case 696:
    /*! Production::    DeclareItem : AT Literal ColumnType EQ Expression */

    this.$ = {variable: yyvstack[yysp - 3], expression:yyvstack[yysp]}; yy.extend(this.$,yyvstack[yysp - 2]);
    break;

case 697:
    /*! Production::    DeclareItem : AT Literal AS ColumnType EQ Expression */

    this.$ = {variable: yyvstack[yysp - 4], expression:yyvstack[yysp]}; yy.extend(this.$,yyvstack[yysp - 2]);
    break;

case 698:
    /*! Production::    TruncateTable : TRUNCATE TABLE Table */

    this.$ = new yy.TruncateTable({table:yyvstack[yysp]});
    break;

case 699:
    /*! Production::    Merge : MERGE MergeInto MergeUsing MergeOn MergeMatchedList OutputClause */

    this.$ = new yy.Merge(); yy.extend(this.$,yyvstack[yysp - 4]); yy.extend(this.$,yyvstack[yysp - 3]);
    yy.extend(this.$,yyvstack[yysp - 2]);
    yy.extend(this.$,{matches:yyvstack[yysp - 1]});yy.extend(this.$,yyvstack[yysp]);
    break;

case 700:
    /*! Production::    MergeInto : FromTable */
case 701:
    /*! Production::    MergeInto : INTO FromTable */

    this.$ = {into: yyvstack[yysp]};
    break;

case 703:
    /*! Production::    MergeOn : ON Expression */

    this.$ = {on:yyvstack[yysp]};
    break;

case 708:
    /*! Production::    MergeMatched : WHEN MATCHED THEN MergeMatchedAction */

    this.$ = {matched:true, action:yyvstack[yysp]}
    break;

case 709:
    /*! Production::    MergeMatched : WHEN MATCHED AND Expression THEN MergeMatchedAction */

    this.$ = {matched:true, expr: yyvstack[yysp - 2], action:yyvstack[yysp]}
    break;

case 710:
    /*! Production::    MergeMatchedAction : DELETE */

    this.$ = {delete:true};
    break;

case 711:
    /*! Production::    MergeMatchedAction : UPDATE SET SetColumnsList */

    this.$ = {update:yyvstack[yysp]};
    break;

case 712:
    /*! Production::    MergeNotMatched : WHEN NOT MATCHED THEN MergeNotMatchedAction */
case 713:
    /*! Production::    MergeNotMatched : WHEN NOT MATCHED BY TARGET THEN MergeNotMatchedAction */

    this.$ = {matched:false, bytarget: true, action:yyvstack[yysp]}
    break;

case 714:
    /*! Production::    MergeNotMatched : WHEN NOT MATCHED AND Expression THEN MergeNotMatchedAction */
case 715:
    /*! Production::    MergeNotMatched : WHEN NOT MATCHED BY TARGET AND Expression THEN MergeNotMatchedAction */

    this.$ = {matched:false, bytarget: true, expr:yyvstack[yysp - 2], action:yyvstack[yysp]}
    break;

case 716:
    /*! Production::    MergeNotMatched : WHEN NOT MATCHED BY SOURCE THEN MergeNotMatchedAction */

    this.$ = {matched:false, bysource: true, action:yyvstack[yysp]}
    break;

case 717:
    /*! Production::    MergeNotMatched : WHEN NOT MATCHED BY SOURCE AND Expression THEN MergeMatchedAction */

    this.$ = {matched:false, bysource: true, expr:yyvstack[yysp - 2], action:yyvstack[yysp]}
    break;

case 718:
    /*! Production::    MergeNotMatchedAction : INSERT VALUES ValuesListsList */

    this.$ = {insert:true, values:yyvstack[yysp]};
    break;

case 719:
    /*! Production::    MergeNotMatchedAction : INSERT LPAR ColumnsList RPAR VALUES ValuesListsList */

    this.$ = {insert:true, values:yyvstack[yysp], columns:yyvstack[yysp - 3]};
    break;

case 720:
    /*! Production::    MergeNotMatchedAction : INSERT DEFAULT VALUES */

    this.$ = {insert:true, defaultvalues:true};
    break;

case 721:
    /*! Production::    MergeNotMatchedAction : INSERT LPAR ColumnsList RPAR DEFAULT VALUES */

    this.$ = {insert:true, defaultvalues:true, columns:yyvstack[yysp - 3]};
    break;

case 723:
    /*! Production::    OutputClause : OUTPUT ResultColumns */

    this.$ = {output:{columns:yyvstack[yysp]}}
    break;

case 724:
    /*! Production::    OutputClause : OUTPUT ResultColumns INTO AtDollar Literal */

    this.$ = {output:{columns:yyvstack[yysp - 3], intovar: yyvstack[yysp], method:yyvstack[yysp - 1]}}
    break;

case 725:
    /*! Production::    OutputClause : OUTPUT ResultColumns INTO Table */

    this.$ = {output:{columns:yyvstack[yysp - 2], intotable: yyvstack[yysp]}}
    break;

case 726:
    /*! Production::    OutputClause : OUTPUT ResultColumns INTO Table LPAR ColumnsList RPAR */

    this.$ = {output:{columns:yyvstack[yysp - 5], intotable: yyvstack[yysp - 3], intocolumns:yyvstack[yysp - 1]}}
    break;

case 727:
    /*! Production::    CreateVertex : CREATE VERTEX CreateVertex_option CreateVertex_option2 CreateVertex_option3 CreateVertexSet */

    this.$ = new yy.CreateVertex({class:yyvstack[yysp - 3],sharp:yyvstack[yysp - 2], name:yyvstack[yysp - 1]});
    yy.extend(this.$,yyvstack[yysp]);
    break;

case 730:
    /*! Production::    CreateVertexSet : SET SetColumnsList */

    this.$ = {sets:yyvstack[yysp]};
    break;

case 731:
    /*! Production::    CreateVertexSet : CONTENT ExprList */

    this.$ = {content:yyvstack[yysp]};
    break;

case 732:
    /*! Production::    CreateVertexSet : Select */

    this.$ = {select:yyvstack[yysp]};
    break;

case 733:
    /*! Production::    CreateEdge : CREATE EDGE CreateEdge_option FROM Expression TO Expression CreateVertexSet */

    this.$ = new yy.CreateEdge({from:yyvstack[yysp - 3],to:yyvstack[yysp - 1],name:yyvstack[yysp - 5]});
    yy.extend(this.$,yyvstack[yysp]);
    break;

case 734:
    /*! Production::    CreateGraph : CREATE GRAPH GraphList */

    this.$ = new yy.CreateGraph({graph:yyvstack[yysp]});
    break;

case 735:
    /*! Production::    CreateGraph : CREATE GRAPH FROM Expression */

    this.$ = new yy.CreateGraph({from:yyvstack[yysp]});
    break;

case 738:
    /*! Production::    GraphVertexEdge : GraphElement GraphVertexEdge_option GraphVertexEdge_option2 */

    this.$ = yyvstack[yysp - 2];
    if(yyvstack[yysp - 1]) this.$.json = new yy.Json({value:yyvstack[yysp - 1]});
    if(yyvstack[yysp]) this.$.as = yyvstack[yysp];
    break;

case 739:
    /*! Production::    GraphVertexEdge : GraphElementVar GT GraphElement GraphVertexEdge_option3 GraphVertexEdge_option4 GT GraphElementVar */

    this.$ = {source:yyvstack[yysp - 6], target: yyvstack[yysp]};
    if(yyvstack[yysp - 3]) this.$.json = new yy.Json({value:yyvstack[yysp - 3]});
    if(yyvstack[yysp - 2]) this.$.as = yyvstack[yysp - 2];
    yy.extend(this.$,yyvstack[yysp - 4]);
    break;

case 740:
    /*! Production::    GraphVertexEdge : GraphElementVar GT Json GraphVertexEdge_option5 GT GraphElementVar */

    this.$ = {source:yyvstack[yysp - 5], target: yyvstack[yysp]};
    if(yyvstack[yysp - 2]) this.$.json = new yy.Json({value:yyvstack[yysp - 3]});
    if(yyvstack[yysp - 1]) this.$.as = yyvstack[yysp - 2];
    break;

case 741:
    /*! Production::    GraphVertexEdge : GraphElementVar GTGT GraphElementVar */

    this.$ = {source:yyvstack[yysp - 2], target: yyvstack[yysp]};
    break;

case 742:
    /*! Production::    GraphVertexEdge : Literal LPAR GraphList RPAR */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 3];
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,-,-,-,-,-,-)
    break;

case 745:
    /*! Production::    GraphVar : AtDollar Literal */

    this.$ = {vars:yyvstack[yysp], method:yyvstack[yysp - 1]};
    break;

case 749:
    /*! Production::    GraphElement : Literal GraphElement_option GraphElement_option2 GraphElement_option3 */

    var s3 = yyvstack[yysp - 1];
    this.$ = {prop:yyvstack[yysp - 3], sharp:yyvstack[yysp - 2], name:(typeof s3 == 'undefined')?undefined:s3.substr(1,s3.length-2), class:yyvstack[yysp]};
    break;

case 750:
    /*! Production::    GraphElement : SharpLiteral GraphElement_option4 GraphElement_option5 */

    var s2 = yyvstack[yysp - 1];
    this.$ = {sharp:yyvstack[yysp - 2], name:(typeof s2 == 'undefined')?undefined:s2.substr(1,s2.length-2), class:yyvstack[yysp]};
    break;

case 751:
    /*! Production::    GraphElement : STRING GraphElement_option6 */

    var s1 = yyvstack[yysp - 1];
    this.$ = {name:(typeof s1 == 'undefined')?undefined:s1.substr(1,s1.length-2), class:yyvstack[yysp]};
    break;

case 752:
    /*! Production::    GraphElement : ColonLiteral */

    this.$ = {class:yyvstack[yysp]};
    break;

case 758:
    /*! Production::    AddRule : Term COLONDASH TermsList */

    this.$ = new yy.AddRule({left:yyvstack[yysp - 2], right:yyvstack[yysp]});
    break;

case 759:
    /*! Production::    AddRule : COLONDASH TermsList */

    this.$ = new yy.AddRule({right:yyvstack[yysp]});
    break;

case 762:
    /*! Production::    Term : Literal */

    this.$ = new yy.Term({termid:yyvstack[yysp]});
    break;

case 763:
    /*! Production::    Term : Literal LPAR TermsList RPAR */

    this.$ = new yy.Term({termid:yyvstack[yysp - 3],args:yyvstack[yysp - 1]});
    break;

case 766:
    /*! Production::    CreateTrigger : CREATE TRIGGER Literal BeforeAfter InsertDeleteUpdate ON Table CreateTrigger_option AStatement */

    this.$ = new yy.CreateTrigger({trigger:yyvstack[yysp - 6], when:yyvstack[yysp - 5], action:yyvstack[yysp - 4], table:yyvstack[yysp - 2], statement:yyvstack[yysp]});
    if(yyvstack[yysp].exists) this.$.exists = yyvstack[yysp].exists;
    if(yyvstack[yysp].queries) this.$.queries = yyvstack[yysp].queries;
    break;

case 767:
    /*! Production::    CreateTrigger : CREATE TRIGGER Literal BeforeAfter InsertDeleteUpdate ON Table Literal */

    this.$ = new yy.CreateTrigger({trigger:yyvstack[yysp - 5], when:yyvstack[yysp - 4], action:yyvstack[yysp - 3], table:yyvstack[yysp - 1], funcid:yyvstack[yysp]});
    break;

case 768:
    /*! Production::    CreateTrigger : CREATE TRIGGER Literal ON Table BeforeAfter InsertDeleteUpdate CreateTrigger_option2 AStatement */

    this.$ = new yy.CreateTrigger({trigger:yyvstack[yysp - 6], when:yyvstack[yysp - 4], action:yyvstack[yysp - 3], table:yyvstack[yysp - 5], statement:yyvstack[yysp]});
    if(yyvstack[yysp].exists) this.$.exists = yyvstack[yysp].exists;
    if(yyvstack[yysp].queries) this.$.queries = yyvstack[yysp].queries;
    break;

case 769:
    /*! Production::    BeforeAfter : %epsilon */
case 770:
    /*! Production::    BeforeAfter : FOR */
case 772:
    /*! Production::    BeforeAfter : AFTER */

    this.$ = 'AFTER';
    break;

case 771:
    /*! Production::    BeforeAfter : BEFORE */

    this.$ = 'BEFORE';
    break;

case 773:
    /*! Production::    BeforeAfter : INSTEAD OF */

    this.$ = 'INSTEADOF';
    break;

case 774:
    /*! Production::    InsertDeleteUpdate : INSERT */

    this.$ = 'INSERT';
    break;

case 775:
    /*! Production::    InsertDeleteUpdate : DELETE */

    this.$ = 'DELETE';
    break;

case 776:
    /*! Production::    InsertDeleteUpdate : UPDATE */

    this.$ = 'UPDATE';
    break;

case 777:
    /*! Production::    DropTrigger : DROP TRIGGER Literal */

    this.$ = new yy.DropTrigger({trigger:yyvstack[yysp]});
    break;

case 778:
    /*! Production::    Reindex : REINDEX Literal */

    this.$ = new yy.Reindex({indexid:yyvstack[yysp]});
    break;

case 1053:
    /*! Production::    Select_repetition : Select_repetition SearchSelector */
case 1067:
    /*! Production::    SearchSelector_repetition_plus : SearchSelector_repetition_plus SearchSelector */
case 1069:
    /*! Production::    SearchSelector_repetition_plus2 : SearchSelector_repetition_plus2 SearchSelector */
case 1073:
    /*! Production::    SearchSelector_repetition : SearchSelector_repetition SearchSelector */
case 1075:
    /*! Production::    SearchSelector_repetition2 : SearchSelector_repetition2 SearchSelector */
case 1077:
    /*! Production::    SearchSelector_repetition3 : SearchSelector_repetition3 SearchSelector */
case 1081:
    /*! Production::    SearchSelector_repetition4 : SearchSelector_repetition4 SearchSelector */
case 1083:
    /*! Production::    SearchSelector_repetition5 : SearchSelector_repetition5 SearchSelector */
case 1085:
    /*! Production::    SearchSelector_repetition6 : SearchSelector_repetition6 SearchSelector */
case 1087:
    /*! Production::    SearchSelector_repetition7 : SearchSelector_repetition7 SearchSelector */
case 1089:
    /*! Production::    SearchSelectorList_repetition : SearchSelectorList_repetition SearchSelector */
case 1091:
    /*! Production::    SearchSelectorList_repetition2 : SearchSelectorList_repetition2 SearchSelector */

    yyvstack[yysp - 1].push(yyvstack[yysp]);
    this.$ = yyvstack[yysp - 1];
    break;

case 1902:       // === NO_ACTION[1] :: ensures that anyone (but us) using this new state will fail dramatically!
                // error recovery reduction action (action generated by jison,
                // using the user-specified `%code error_recovery_reduction` %{...%}
                // code chunk below.

                
                break;
            
default:
                // default action for all unlisted resolve states: 486, 487, 488, 489, 490, 491, 747, 748, 756, 757, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185

                // When we hit this entry, it's always a non-recoverable issue as this is a severe internal parser state failure:
                function __b0rk_on_internal_failure(str) {
                    var hash = yyparser.constructParseErrorInfo(str, null, null, false);

                    return yyparser.parseError(str, hash, yyparser.JisonParserError);
                }

                return __b0rk_on_internal_failure("internal parser failure: resolving unlisted state: " + yystate);
}
},
table: bt({
  len: u([
  107,
  1,
  s,
  [4, 3],
  5,
  105,
  s,
  [5, 54],
  1,
  4,
  11,
  18,
  3,
  1,
  1,
  11,
  70,
  6,
  5,
  30,
  4,
  1,
  22,
  70,
  9,
  1,
  6,
  107,
  1,
  1,
  5,
  5,
  154,
  3,
  33,
  70,
  5,
  5,
  76,
  11,
  7,
  70,
  1,
  6,
  11,
  70,
  73,
  9,
  78,
  177,
  177,
  268,
  1,
  104,
  45,
  45,
  4,
  1,
  5,
  1,
  5,
  s,
  [1, 6],
  70,
  c,
  [61, 3],
  1,
  18,
  4,
  5,
  18,
  4,
  1,
  1,
  3,
  6,
  6,
  4,
  5,
  4,
  c,
  [17, 3],
  5,
  5,
  s,
  [4, 3],
  143,
  s,
  [154, 18],
  81,
  154,
  154,
  1,
  154,
  s,
  [70, 5],
  154,
  182,
  s,
  [164, 4],
  163,
  6,
  4,
  164,
  164,
  20,
  1,
  73,
  1,
  1,
  157,
  38,
  71,
  11,
  s,
  [1, 10],
  9,
  5,
  1,
  3,
  5,
  2,
  1,
  28,
  5,
  35,
  36,
  35,
  35,
  30,
  35,
  35,
  38,
  34,
  5,
  5,
  20,
  19,
  6,
  77,
  1,
  1,
  6,
  1,
  1,
  7,
  5,
  6,
  3,
  1,
  c,
  [103, 3],
  c,
  [106, 4],
  79,
  s,
  [5, 3],
  6,
  16,
  s,
  [17, 7],
  143,
  6,
  5,
  47,
  s,
  [6, 6],
  8,
  4,
  3,
  3,
  44,
  6,
  6,
  7,
  5,
  44,
  s,
  [50, 3],
  93,
  3,
  6,
  s,
  [72, 7],
  s,
  [177, 268],
  4,
  104,
  4,
  4,
  53,
  71,
  71,
  5,
  5,
  70,
  43,
  4,
  1,
  7,
  1,
  4,
  6,
  70,
  7,
  16,
  2,
  19,
  16,
  16,
  13,
  9,
  c,
  [444, 3],
  c,
  [448, 4],
  1,
  1,
  15,
  13,
  9,
  1,
  1,
  2,
  6,
  6,
  5,
  c,
  [33, 3],
  5,
  c,
  [7, 3],
  6,
  s,
  [70, 16],
  14,
  14,
  s,
  [73, 5],
  70,
  70,
  c,
  [3, 3],
  4,
  70,
  70,
  16,
  2,
  s,
  [70, 3],
  5,
  11,
  c,
  [456, 4],
  40,
  c,
  [424, 3],
  2,
  73,
  6,
  s,
  [156, 5],
  s,
  [164, 4],
  156,
  70,
  s,
  [157, 5],
  5,
  42,
  5,
  3,
  c,
  [35, 3],
  157,
  2,
  157,
  2,
  s,
  [3, 9],
  70,
  155,
  2,
  154,
  154,
  c,
  [17, 3],
  s,
  [1, 3],
  21,
  5,
  15,
  2,
  28,
  1,
  1,
  35,
  33,
  c,
  [645, 3],
  30,
  4,
  30,
  4,
  c,
  [4, 4],
  4,
  1,
  19,
  20,
  8,
  4,
  10,
  73,
  73,
  1,
  73,
  4,
  c,
  [103, 3],
  69,
  s,
  [1, 4],
  s,
  [73, 6],
  4,
  5,
  s,
  [73, 6],
  20,
  c,
  [18, 4],
  c,
  [645, 3],
  s,
  [1, 3],
  c,
  [69, 4],
  s,
  [1, 8],
  5,
  5,
  3,
  6,
  5,
  3,
  c,
  [203, 3],
  c,
  [683, 3],
  5,
  10,
  c,
  [232, 3],
  73,
  3,
  6,
  73,
  c,
  [567, 4],
  c,
  [204, 3],
  5,
  s,
  [72, 3],
  20,
  21,
  21,
  69,
  70,
  2,
  2,
  4,
  c,
  [52, 4],
  7,
  71,
  164,
  s,
  [48, 3],
  2,
  c,
  [63, 5],
  40,
  164,
  5,
  c,
  [239, 3],
  1,
  16,
  44,
  10,
  8,
  15,
  15,
  17,
  16,
  15,
  16,
  14,
  13,
  13,
  15,
  c,
  [267, 3],
  c,
  [66, 3],
  14,
  12,
  c,
  [283, 3],
  s,
  [3, 3],
  s,
  [1, 3],
  c,
  [604, 3],
  162,
  162,
  1,
  162,
  c,
  [798, 3],
  7,
  s,
  [6, 3],
  5,
  105,
  s,
  [156, 16],
  154,
  154,
  70,
  s,
  [154, 3],
  70,
  154,
  s,
  [156, 4],
  84,
  s,
  [156, 5],
  s,
  [1, 4],
  156,
  156,
  77,
  s,
  [154, 4],
  5,
  16,
  c,
  [24, 4],
  s,
  [154, 5],
  c,
  [307, 3],
  154,
  155,
  154,
  40,
  c,
  [846, 3],
  3,
  70,
  40,
  40,
  1,
  157,
  36,
  40,
  5,
  154,
  157,
  8,
  s,
  [35, 3],
  12,
  7,
  3,
  72,
  6,
  14,
  14,
  9,
  9,
  5,
  12,
  7,
  71,
  4,
  70,
  1,
  35,
  s,
  [30, 8],
  98,
  4,
  19,
  29,
  s,
  [18, 5],
  4,
  s,
  [20, 3],
  3,
  32,
  7,
  7,
  70,
  s,
  [73, 5],
  1,
  73,
  95,
  95,
  69,
  66,
  69,
  c,
  [393, 3],
  c,
  [284, 5],
  10,
  4,
  71,
  73,
  s,
  [63, 4],
  65,
  1,
  c,
  [4, 3],
  s,
  [65, 3],
  68,
  72,
  63,
  c,
  [167, 3],
  c,
  [274, 3],
  6,
  3,
  5,
  7,
  10,
  1,
  c,
  [800, 3],
  5,
  47,
  156,
  c,
  [18, 3],
  44,
  70,
  7,
  c,
  [388, 4],
  70,
  4,
  7,
  s,
  [21, 3],
  71,
  8,
  s,
  [21, 3],
  68,
  68,
  1,
  8,
  c,
  [514, 5],
  71,
  4,
  2,
  164,
  164,
  s,
  [70, 5],
  5,
  8,
  7,
  1,
  5,
  s,
  [7, 3],
  3,
  8,
  4,
  17,
  7,
  7,
  2,
  c,
  [274, 4],
  6,
  2,
  40,
  14,
  10,
  12,
  1,
  s,
  [48, 3],
  8,
  3,
  c,
  [282, 3],
  7,
  162,
  3,
  162,
  71,
  44,
  s,
  [5, 4],
  70,
  c,
  [199, 3],
  76,
  1,
  2,
  154,
  70,
  c,
  [234, 3],
  156,
  40,
  40,
  5,
  157,
  c,
  [1010, 3],
  40,
  70,
  5,
  70,
  c,
  [498, 3],
  155,
  157,
  s,
  [2, 4],
  7,
  11,
  6,
  2,
  2,
  39,
  41,
  20,
  7,
  10,
  c,
  [75, 3],
  40,
  30,
  4,
  5,
  16,
  15,
  1,
  1,
  33,
  34,
  28,
  7,
  20,
  46,
  1,
  2,
  75,
  73,
  66,
  69,
  66,
  c,
  [264, 3],
  73,
  2,
  73,
  2,
  s,
  [69, 4],
  2,
  70,
  65,
  c,
  [5, 3],
  s,
  [2, 3],
  5,
  2,
  69,
  c,
  [149, 3],
  4,
  3,
  1,
  70,
  9,
  70,
  1,
  44,
  3,
  40,
  44,
  70,
  s,
  [21, 4],
  68,
  c,
  [476, 3],
  13,
  5,
  5,
  2,
  5,
  164,
  s,
  [40, 5],
  5,
  71,
  4,
  5,
  72,
  c,
  [1288, 3],
  c,
  [456, 3],
  7,
  13,
  13,
  8,
  6,
  5,
  70,
  6,
  10,
  71,
  c,
  [703, 3],
  45,
  c,
  [488, 3],
  2,
  2,
  c,
  [654, 3],
  c,
  [1151, 3],
  c,
  [621, 3],
  40,
  c,
  [5, 4],
  c,
  [396, 3],
  155,
  154,
  154,
  42,
  2,
  41,
  4,
  71,
  9,
  9,
  20,
  5,
  9,
  70,
  12,
  7,
  6,
  c,
  [228, 3],
  72,
  2,
  1,
  30,
  15,
  c,
  [271, 3],
  31,
  28,
  27,
  27,
  25,
  2,
  2,
  17,
  10,
  17,
  1,
  c,
  [535, 5],
  16,
  20,
  73,
  2,
  1,
  13,
  1,
  54,
  73,
  66,
  s,
  [73, 6],
  66,
  c,
  [9, 3],
  c,
  [4, 4],
  64,
  67,
  2,
  c,
  [8, 5],
  s,
  [73, 5],
  71,
  66,
  s,
  [5, 4],
  3,
  44,
  10,
  49,
  70,
  3,
  44,
  4,
  21,
  7,
  c,
  [817, 6],
  c,
  [188, 3],
  72,
  8,
  c,
  [846, 3],
  1,
  c,
  [9, 3],
  2,
  28,
  8,
  53,
  7,
  7,
  49,
  48,
  45,
  1,
  162,
  162,
  s,
  [154, 5],
  4,
  s,
  [154, 3],
  1,
  c,
  [150, 3],
  c,
  [126, 3],
  28,
  41,
  c,
  [354, 3],
  70,
  3,
  14,
  1,
  53,
  40,
  1,
  27,
  27,
  28,
  30,
  34,
  c,
  [1269, 3],
  34,
  34,
  1,
  17,
  1,
  17,
  17,
  1,
  c,
  [4, 4],
  c,
  [6, 5],
  15,
  73,
  71,
  73,
  15,
  1,
  70,
  73,
  2,
  49,
  5,
  7,
  19,
  c,
  [18, 3],
  5,
  18,
  29,
  c,
  [33, 6],
  4,
  s,
  [40, 5],
  7,
  5,
  2,
  15,
  7,
  12,
  c,
  [337, 3],
  c,
  [277, 3],
  6,
  105,
  5,
  46,
  105,
  46,
  1,
  c,
  [686, 4],
  c,
  [1362, 3],
  7,
  8,
  7,
  7,
  1,
  40,
  2,
  2,
  70,
  13,
  1,
  75,
  4,
  4,
  27,
  70,
  6,
  29,
  4,
  34,
  32,
  29,
  4,
  1,
  29,
  4,
  29,
  c,
  [493, 3],
  s,
  [17, 4],
  13,
  13,
  2,
  14,
  67,
  73,
  c,
  [76, 3],
  20,
  2,
  17,
  70,
  17,
  17,
  29,
  70,
  5,
  s,
  [164, 5],
  c,
  [817, 4],
  10,
  9,
  c,
  [1034, 3],
  c,
  [265, 3],
  2,
  11,
  c,
  [1396, 3],
  c,
  [92, 3],
  162,
  c,
  [180, 3],
  75,
  72,
  c,
  [190, 3],
  6,
  10,
  3,
  7,
  3,
  2,
  2,
  40,
  11,
  2,
  2,
  72,
  c,
  [456, 4],
  1,
  54,
  4,
  1,
  66,
  28,
  s,
  [29, 4],
  5,
  29,
  29,
  1,
  1,
  s,
  [13, 3],
  c,
  [91, 3],
  4,
  1,
  40,
  17,
  70,
  40,
  9,
  4,
  2,
  4,
  9,
  s,
  [7, 5],
  c,
  [830, 3],
  4,
  4,
  6,
  8,
  5,
  6,
  154,
  3,
  2,
  5,
  6,
  8,
  7,
  12,
  6,
  1,
  2,
  70,
  2,
  70,
  2,
  7,
  c,
  [843, 3],
  12,
  3,
  13,
  13,
  74,
  70,
  1,
  75,
  75,
  s,
  [1, 4],
  c,
  [154, 4],
  20,
  1,
  2,
  17,
  40,
  17,
  s,
  [9, 3],
  2,
  6,
  c,
  [55, 3],
  c,
  [125, 4],
  9,
  2,
  8,
  c,
  [43, 3],
  40,
  7,
  40,
  c,
  [48, 3],
  c,
  [156, 3],
  c,
  [158, 3],
  c,
  [417, 3],
  15,
  52,
  75,
  2,
  2,
  22,
  72,
  6,
  29,
  27,
  4,
  27,
  4,
  s,
  [17, 3],
  c,
  [302, 4],
  c,
  [1156, 3],
  c,
  [738, 3],
  c,
  [373, 3],
  3,
  c,
  [38, 3],
  7,
  7,
  10,
  3,
  2,
  s,
  [15, 4],
  4,
  15,
  2,
  2,
  42,
  2,
  27,
  27,
  17,
  c,
  [647, 3],
  2,
  c,
  [4, 3],
  12,
  1,
  s,
  [7, 3],
  2,
  1,
  15,
  15,
  1,
  71,
  4,
  c,
  [1089, 3],
  5,
  c,
  [92, 3],
  8,
  7,
  13,
  c,
  [77, 3],
  c,
  [332, 3],
  2,
  7,
  12,
  11,
  15,
  15,
  11,
  s,
  [10, 3],
  8,
  6,
  c,
  [36, 3],
  2,
  c,
  [187, 3],
  c,
  [458, 3],
  c,
  [606, 3]
]),
  symbol: u([
  1,
  2,
  10,
  11,
  12,
  15,
  16,
  21,
  34,
  52,
  58,
  75,
  114,
  115,
  131,
  170,
  171,
  172,
  190,
  191,
  192,
  195,
  197,
  198,
  199,
  204,
  205,
  210,
  s,
  [212, 11, 1],
  228,
  229,
  230,
  235,
  317,
  474,
  477,
  s,
  [479, 6, 1],
  487,
  501,
  502,
  534,
  535,
  536,
  563,
  566,
  567,
  574,
  604,
  s,
  [607, 5, 1],
  s,
  [613, 10, 1],
  s,
  [624, 4, 1],
  636,
  s,
  [641, 4, 1],
  s,
  [646, 6, 1],
  653,
  656,
  659,
  660,
  670,
  673,
  674,
  687,
  s,
  [689, 4, 1],
  695,
  696,
  1,
  1,
  317,
  474,
  698,
  1,
  145,
  317,
  474,
  c,
  [4, 6],
  148,
  c,
  [5, 3],
  c,
  [125, 3],
  13,
  c,
  [125, 10],
  145,
  c,
  [126, 31],
  c,
  [123, 59],
  c,
  [110, 5],
  c,
  [5, 264],
  176,
  c,
  [375, 3],
  477,
  c,
  [4, 3],
  58,
  s,
  [131, 5, 1],
  477,
  545,
  c,
  [11, 3],
  37,
  41,
  42,
  74,
  79,
  116,
  117,
  176,
  178,
  196,
  200,
  227,
  231,
  477,
  579,
  51,
  657,
  658,
  72,
  196,
  c,
  [23, 4],
  79,
  176,
  196,
  200,
  231,
  477,
  742,
  c,
  [11, 3],
  19,
  38,
  39,
  44,
  50,
  51,
  54,
  56,
  57,
  58,
  69,
  70,
  71,
  105,
  106,
  113,
  114,
  118,
  119,
  120,
  s,
  [123, 19, 1],
  143,
  144,
  150,
  155,
  206,
  207,
  477,
  s,
  [531, 4, 1],
  537,
  538,
  540,
  544,
  545,
  s,
  [547, 9, 1],
  559,
  628,
  631,
  c,
  [70, 3],
  65,
  82,
  569,
  c,
  [6, 3],
  c,
  [5, 5],
  19,
  39,
  50,
  51,
  56,
  58,
  71,
  82,
  87,
  c,
  [62, 5],
  143,
  c,
  [53, 3],
  508,
  509,
  510,
  545,
  551,
  554,
  628,
  631,
  661,
  c,
  [160, 4],
  176,
  1,
  16,
  s,
  [20, 4, 2],
  30,
  35,
  59,
  62,
  63,
  72,
  82,
  98,
  110,
  111,
  c,
  [186, 4],
  493,
  699,
  c,
  [563, 4],
  16,
  18,
  19,
  20,
  s,
  [27, 4, 1],
  s,
  [32, 37, 1],
  72,
  73,
  74,
  82,
  105,
  106,
  c,
  [170, 8],
  145,
  148,
  206,
  207,
  317,
  474,
  701,
  c,
  [69, 3],
  76,
  79,
  115,
  176,
  196,
  477,
  c,
  [267, 5],
  485,
  486,
  c,
  [773, 14],
  c,
  [648, 14],
  s,
  [211, 12, 1],
  c,
  [649, 7],
  c,
  [774, 60],
  211,
  211,
  c,
  [109, 3],
  196,
  c,
  [383, 4],
  477,
  510,
  c,
  [205, 4],
  s,
  [15, 16, 1],
  s,
  [32, 44, 1],
  82,
  83,
  85,
  s,
  [88, 8, 1],
  98,
  102,
  s,
  [105, 4, 1],
  110,
  111,
  114,
  115,
  c,
  [405, 9],
  138,
  142,
  s,
  [145, 24, 1],
  c,
  [224, 12],
  206,
  207,
  c,
  [874, 12],
  225,
  226,
  c,
  [227, 6],
  39,
  138,
  549,
  c,
  [156, 3],
  38,
  c,
  [419, 6],
  113,
  c,
  [480, 9],
  c,
  [422, 4],
  539,
  c,
  [468, 5],
  c,
  [423, 3],
  c,
  [533, 70],
  c,
  [663, 10],
  c,
  [80, 4],
  21,
  c,
  [81, 12],
  75,
  c,
  [82, 33],
  c,
  [388, 3],
  c,
  [85, 9],
  s,
  [546, 10, 1],
  c,
  [619, 6],
  39,
  138,
  219,
  477,
  549,
  652,
  654,
  655,
  c,
  [11, 3],
  50,
  51,
  477,
  637,
  c,
  [174, 70],
  228,
  c,
  [440, 4],
  688,
  689,
  c,
  [829, 14],
  c,
  [262, 68],
  c,
  [727, 4],
  19,
  c,
  [753, 6],
  c,
  [78, 9],
  59,
  60,
  62,
  63,
  c,
  [490, 6],
  81,
  82,
  98,
  105,
  106,
  110,
  111,
  c,
  [90, 26],
  145,
  148,
  c,
  [92, 4],
  317,
  474,
  503,
  1,
  17,
  19,
  20,
  145,
  148,
  228,
  c,
  [1372, 6],
  c,
  [82, 14],
  c,
  [579, 6],
  c,
  [83, 8],
  s,
  [76, 7, 1],
  c,
  [88, 39],
  c,
  [682, 64],
  79,
  c,
  [683, 11],
  96,
  97,
  c,
  [685, 20],
  139,
  142,
  143,
  c,
  [687, 27],
  173,
  174,
  177,
  s,
  [180, 5, 1],
  187,
  188,
  s,
  [190, 10, 1],
  s,
  [204, 7, 1],
  c,
  [702, 16],
  s,
  [232, 4, 1],
  c,
  [177, 179],
  s,
  [3, 7, 1],
  38,
  66,
  104,
  c,
  [402, 3],
  182,
  186,
  193,
  200,
  201,
  203,
  204,
  209,
  211,
  215,
  223,
  225,
  226,
  c,
  [32, 3],
  s,
  [236, 238, 1],
  697,
  1,
  c,
  [446, 6],
  c,
  [2072, 99],
  c,
  [104, 44],
  c,
  [45, 46],
  c,
  [2276, 3],
  14,
  c,
  [1509, 5],
  196,
  c,
  [1245, 5],
  s,
  [19, 6],
  c,
  [1864, 73],
  58,
  580,
  c,
  [1951, 4],
  477,
  79,
  c,
  [1256, 4],
  c,
  [79, 3],
  56,
  72,
  477,
  637,
  s,
  [675, 4, 1],
  682,
  683,
  684,
  37,
  176,
  200,
  575,
  39,
  72,
  138,
  549,
  748,
  c,
  [175, 4],
  20,
  21,
  39,
  44,
  52,
  75,
  138,
  145,
  148,
  226,
  c,
  [295, 3],
  745,
  c,
  [50, 4],
  10,
  10,
  c,
  [33, 3],
  1,
  17,
  c,
  [1397, 5],
  c,
  [6, 5],
  c,
  [2060, 7],
  477,
  510,
  c,
  [2069, 8],
  606,
  c,
  [90, 5],
  c,
  [10, 5],
  c,
  [5, 8],
  c,
  [14, 5],
  c,
  [4, 4],
  c,
  [259, 7],
  25,
  c,
  [846, 3],
  33,
  34,
  40,
  43,
  c,
  [836, 5],
  52,
  57,
  58,
  64,
  65,
  69,
  70,
  c,
  [276, 5],
  c,
  [782, 4],
  c,
  [1645, 28],
  c,
  [445, 23],
  496,
  c,
  [446, 5],
  561,
  c,
  [447, 55],
  c,
  [1856, 148],
  c,
  [154, 2618],
  c,
  [4358, 22],
  115,
  c,
  [3110, 26],
  172,
  c,
  [4360, 15],
  c,
  [3114, 10],
  567,
  628,
  631,
  670,
  673,
  731,
  c,
  [389, 308],
  19,
  c,
  [544, 158],
  c,
  [3651, 69],
  c,
  [70, 277],
  c,
  [813, 229],
  c,
  [4816, 10],
  s,
  [112, 4, 1],
  c,
  [293, 22],
  s,
  [142, 27, 1],
  c,
  [4830, 4],
  c,
  [4829, 3],
  183,
  184,
  c,
  [178, 7],
  202,
  c,
  [4824, 5],
  c,
  [180, 20],
  475,
  476,
  c,
  [182, 85],
  c,
  [4998, 14],
  c,
  [167, 40],
  c,
  [166, 25],
  c,
  [164, 568],
  c,
  [163, 87],
  c,
  [6520, 4],
  477,
  734,
  c,
  [4982, 4],
  c,
  [501, 328],
  c,
  [1563, 6],
  50,
  56,
  71,
  c,
  [1243, 3],
  143,
  207,
  477,
  c,
  [1520, 3],
  554,
  631,
  c,
  [5515, 45],
  146,
  c,
  [1585, 23],
  556,
  557,
  c,
  [1587, 3],
  19,
  c,
  [2093, 76],
  c,
  [260, 22],
  c,
  [1591, 39],
  c,
  [253, 28],
  c,
  [7112, 4],
  c,
  [212, 9],
  142,
  c,
  [7112, 4],
  532,
  c,
  [7112, 7],
  s,
  [629, 4, 1],
  635,
  c,
  [1854, 58],
  c,
  [7031, 16],
  c,
  [6936, 8],
  s,
  [19, 10],
  c,
  [7241, 5],
  208,
  477,
  633,
  634,
  c,
  [5735, 5],
  131,
  c,
  [6, 3],
  c,
  [9, 5],
  97,
  662,
  97,
  c,
  [7686, 10],
  c,
  [7685, 18],
  21,
  75,
  c,
  [2773, 3],
  c,
  [6853, 5],
  17,
  s,
  [18, 4, 2],
  c,
  [7688, 5],
  c,
  [296, 13],
  c,
  [7698, 6],
  723,
  c,
  [35, 12],
  57,
  c,
  [36, 22],
  c,
  [841, 5],
  c,
  [71, 30],
  c,
  [35, 37],
  16,
  17,
  c,
  [31, 27],
  c,
  [100, 71],
  c,
  [35, 6],
  c,
  [7096, 4],
  29,
  c,
  [208, 6],
  72,
  c,
  [108, 53],
  c,
  [7505, 8],
  c,
  [7780, 3],
  c,
  [8007, 4],
  c,
  [8006, 14],
  504,
  c,
  [20, 19],
  c,
  [44, 3],
  27,
  76,
  706,
  c,
  [8030, 69],
  477,
  496,
  497,
  504,
  544,
  628,
  631,
  714,
  176,
  72,
  1,
  27,
  c,
  [91, 4],
  196,
  c,
  [8, 3],
  72,
  c,
  [144, 9],
  17,
  c,
  [473, 5],
  c,
  [6, 3],
  18,
  c,
  [164, 5],
  c,
  [6439, 3],
  c,
  [8724, 3],
  c,
  [178, 12],
  c,
  [9, 5],
  52,
  c,
  [852, 11],
  23,
  29,
  34,
  35,
  c,
  [123, 5],
  c,
  [122, 3],
  71,
  72,
  74,
  75,
  96,
  c,
  [6250, 3],
  139,
  143,
  145,
  148,
  c,
  [7014, 8],
  c,
  [1025, 5],
  c,
  [7011, 3],
  c,
  [2365, 19],
  c,
  [7183, 10],
  c,
  [8455, 15],
  c,
  [6395, 5],
  c,
  [1045, 11],
  c,
  [1044, 5],
  1,
  17,
  20,
  57,
  74,
  96,
  139,
  145,
  148,
  c,
  [1111, 6],
  c,
  [39, 4],
  c,
  [17, 101],
  c,
  [6485, 143],
  c,
  [6685, 6],
  c,
  [295, 6],
  20,
  c,
  [150, 13],
  57,
  c,
  [148, 4],
  142,
  c,
  [145, 21],
  317,
  474,
  496,
  561,
  c,
  [6743, 12],
  c,
  [6, 24],
  28,
  29,
  34,
  96,
  209,
  496,
  638,
  640,
  c,
  [6742, 7],
  c,
  [3, 3],
  1,
  c,
  [99, 18],
  c,
  [98, 25],
  c,
  [8062, 6],
  c,
  [80, 8],
  c,
  [7913, 3],
  c,
  [169, 8],
  c,
  [68, 46],
  c,
  [1259, 13],
  81,
  c,
  [1260, 32],
  503,
  c,
  [50, 100],
  c,
  [8193, 22],
  c,
  [8109, 6],
  c,
  [8101, 40],
  477,
  s,
  [529, 6, 1],
  c,
  [3285, 17],
  721,
  19,
  38,
  547,
  c,
  [314, 7],
  c,
  [8295, 71],
  c,
  [72, 436],
  c,
  [8639, 350],
  c,
  [177, 47083],
  c,
  [57534, 4],
  c,
  [55456, 103],
  190,
  c,
  [146, 3],
  c,
  [48426, 7],
  19,
  20,
  c,
  [47617, 9],
  60,
  c,
  [251, 3],
  73,
  c,
  [48210, 32],
  732,
  733,
  c,
  [49620, 74],
  c,
  [71, 71],
  39,
  c,
  [200, 4],
  c,
  [5, 5],
  c,
  [51696, 70],
  c,
  [48629, 18],
  c,
  [48627, 19],
  477,
  c,
  [48694, 6],
  57,
  c,
  [123, 4],
  58,
  138,
  580,
  96,
  c,
  [49251, 5],
  c,
  [55546, 8],
  c,
  [51762, 68],
  c,
  [48775, 7],
  c,
  [49551, 3],
  46,
  48,
  51,
  c,
  [49410, 6],
  628,
  631,
  749,
  46,
  48,
  c,
  [18, 3],
  19,
  20,
  39,
  44,
  c,
  [21, 3],
  56,
  c,
  [22, 6],
  684,
  758,
  c,
  [37, 4],
  39,
  c,
  [17, 10],
  761,
  c,
  [53, 7],
  c,
  [15, 7],
  683,
  763,
  c,
  [69, 13],
  c,
  [89, 3],
  46,
  48,
  c,
  [168, 7],
  38,
  c,
  [55715, 5],
  c,
  [55690, 8],
  580,
  c,
  [5, 9],
  c,
  [4, 4],
  72,
  72,
  1,
  c,
  [55783, 12],
  671,
  746,
  c,
  [15, 13],
  23,
  96,
  c,
  [669, 3],
  c,
  [697, 3],
  693,
  18,
  18,
  51,
  658,
  10,
  18,
  188,
  478,
  597,
  598,
  1,
  35,
  c,
  [49520, 13],
  140,
  c,
  [282, 6],
  606,
  c,
  [49715, 10],
  605,
  c,
  [6, 6],
  c,
  [49455, 10],
  645,
  c,
  [52341, 350],
  c,
  [70, 775],
  c,
  [51258, 8],
  c,
  [49836, 4],
  c,
  [14, 16],
  c,
  [1787, 9],
  61,
  c,
  [100, 33],
  169,
  c,
  [171, 37],
  c,
  [73, 292],
  c,
  [603, 140],
  c,
  [213, 200],
  60,
  61,
  169,
  562,
  c,
  [357, 144],
  51,
  c,
  [876, 7],
  532,
  545,
  551,
  560,
  25,
  139,
  c,
  [1118, 210],
  10,
  c,
  [2294, 4],
  c,
  [1109, 11],
  c,
  [11, 11],
  s,
  [20, 4],
  c,
  [2631, 37],
  c,
  [51256, 6],
  82,
  569,
  20,
  20,
  41,
  42,
  c,
  [665, 14],
  c,
  [2957, 36],
  c,
  [2836, 26],
  54,
  70,
  c,
  [53223, 76],
  c,
  [54388, 79],
  c,
  [51667, 3],
  c,
  [156, 698],
  c,
  [54832, 657],
  c,
  [54235, 60],
  c,
  [56330, 90],
  c,
  [54461, 157],
  c,
  [157, 628],
  c,
  [54432, 5],
  c,
  [2580, 18],
  146,
  c,
  [2581, 20],
  556,
  557,
  561,
  145,
  146,
  148,
  557,
  558,
  c,
  [5, 3],
  c,
  [2801, 145],
  c,
  [357, 157],
  17,
  142,
  c,
  [159, 159],
  17,
  142,
  208,
  c,
  [3, 24],
  c,
  [57450, 204],
  c,
  [413, 98],
  c,
  [58420, 233],
  17,
  208,
  c,
  [723, 158],
  208,
  s,
  [56, 3],
  19,
  21,
  c,
  [694, 4],
  71,
  75,
  143,
  173,
  174,
  206,
  207,
  c,
  [1255, 3],
  554,
  568,
  570,
  c,
  [1140, 5],
  82,
  569,
  19,
  c,
  [25, 5],
  143,
  c,
  [23, 3],
  c,
  [20, 5],
  96,
  663,
  c,
  [56220, 28],
  97,
  20,
  c,
  [55938, 6],
  c,
  [56010, 28],
  724,
  c,
  [35, 33],
  c,
  [56144, 30],
  c,
  [6276, 4],
  86,
  c,
  [35, 34],
  c,
  [34, 102],
  c,
  [4, 4],
  53,
  c,
  [56118, 11],
  c,
  [27, 7],
  505,
  c,
  [6459, 4],
  c,
  [56667, 10],
  143,
  477,
  c,
  [287, 4],
  c,
  [56138, 4],
  477,
  494,
  495,
  532,
  c,
  [8, 4],
  c,
  [51, 3],
  c,
  [56058, 5],
  500,
  702,
  c,
  [56154, 49],
  c,
  [532, 6],
  c,
  [56157, 17],
  499,
  c,
  [56354, 9],
  c,
  [74, 64],
  31,
  c,
  [74, 73],
  c,
  [57516, 8],
  c,
  [77, 72],
  c,
  [4735, 140],
  c,
  [436, 3],
  c,
  [210, 41],
  73,
  74,
  c,
  [205, 10],
  c,
  [83, 3],
  496,
  497,
  c,
  [56582, 3],
  708,
  714,
  s,
  [19, 4],
  c,
  [286, 73],
  c,
  [73, 365],
  c,
  [1018, 7],
  40,
  c,
  [733, 74],
  c,
  [447, 368],
  c,
  [58359, 17],
  51,
  19,
  51,
  c,
  [96, 73],
  c,
  [58073, 4],
  477,
  s,
  [19, 5],
  60,
  s,
  [19, 11],
  c,
  [63820, 9],
  510,
  c,
  [65348, 3],
  c,
  [57601, 6],
  c,
  [14, 8],
  c,
  [57566, 9],
  c,
  [8043, 9],
  486,
  19,
  c,
  [16, 13],
  c,
  [65192, 3],
  532,
  564,
  565,
  735,
  51,
  206,
  207,
  c,
  [65304, 7],
  c,
  [6473, 143],
  c,
  [196, 6],
  219,
  477,
  652,
  c,
  [152, 16],
  96,
  c,
  [153, 32],
  209,
  c,
  [81, 22],
  640,
  c,
  [230, 5],
  c,
  [57364, 3],
  496,
  c,
  [65543, 14],
  38,
  477,
  639,
  c,
  [21, 4],
  638,
  c,
  [64163, 10],
  c,
  [65395, 4],
  c,
  [267, 46],
  c,
  [57101, 23],
  c,
  [72, 144],
  c,
  [66279, 20],
  c,
  [2193, 6],
  c,
  [21, 37],
  c,
  [58378, 9],
  c,
  [2671, 6],
  c,
  [719, 3],
  c,
  [717, 3],
  c,
  [3767, 7],
  c,
  [41, 3],
  c,
  [3770, 4],
  c,
  [45, 5],
  c,
  [8718, 3],
  c,
  [57616, 21],
  477,
  496,
  549,
  c,
  [5493, 5],
  c,
  [57468, 64],
  475,
  722,
  38,
  547,
  17,
  20,
  c,
  [9500, 4],
  53,
  s,
  [76, 4],
  1,
  18,
  19,
  c,
  [704, 62],
  c,
  [6440, 13],
  c,
  [59493, 170],
  c,
  [235, 42],
  c,
  [48, 96],
  17,
  20,
  17,
  20,
  s,
  [17, 5],
  c,
  [6879, 39],
  c,
  [5518, 165],
  c,
  [596, 4],
  c,
  [9392, 5],
  138,
  477,
  c,
  [1358, 5],
  510,
  c,
  [9679, 4],
  c,
  [65281, 5],
  477,
  637,
  c,
  [65279, 6],
  c,
  [58378, 44],
  c,
  [9583, 4],
  c,
  [82, 4],
  679,
  750,
  c,
  [10, 8],
  c,
  [78, 5],
  51,
  56,
  c,
  [649, 3],
  628,
  631,
  c,
  [77, 3],
  c,
  [93, 10],
  c,
  [92, 5],
  c,
  [15, 10],
  c,
  [65388, 7],
  c,
  [9680, 15],
  759,
  c,
  [16, 15],
  c,
  [9695, 15],
  762,
  c,
  [16, 14],
  c,
  [9709, 15],
  c,
  [13, 15],
  c,
  [71, 15],
  c,
  [86, 18],
  c,
  [9765, 18],
  c,
  [1655, 7],
  c,
  [4255, 71],
  c,
  [9797, 3],
  c,
  [9796, 8],
  549,
  747,
  c,
  [14, 12],
  c,
  [101, 4],
  c,
  [434, 3],
  694,
  c,
  [109, 5],
  c,
  [9, 3],
  c,
  [3, 6],
  36,
  114,
  114,
  c,
  [58775, 8],
  34,
  c,
  [7, 4],
  c,
  [4739, 81],
  c,
  [595, 66],
  c,
  [60944, 162],
  c,
  [62603, 96],
  c,
  [163, 87],
  c,
  [67593, 75],
  c,
  [988, 5],
  c,
  [993, 7],
  c,
  [59459, 19],
  c,
  [1779, 8],
  c,
  [11132, 11],
  c,
  [59911, 4],
  c,
  [66589, 92],
  c,
  [8088, 849],
  c,
  [156, 1795],
  c,
  [65630, 224],
  c,
  [66706, 466],
  c,
  [532, 374],
  c,
  [1688, 476],
  c,
  [63984, 76],
  c,
  [2552, 782],
  c,
  [8561, 8],
  c,
  [316, 308],
  c,
  [16489, 5],
  c,
  [73093, 72],
  c,
  [69427, 620],
  c,
  [16982, 5],
  c,
  [14537, 12],
  c,
  [2672, 776],
  c,
  [154, 616],
  17,
  20,
  c,
  [70088, 369],
  c,
  [13719, 155],
  c,
  [309, 79],
  c,
  [16292, 40],
  20,
  c,
  [13710, 6],
  c,
  [13711, 73],
  c,
  [119, 18],
  147,
  c,
  [120, 21],
  18,
  c,
  [160, 39],
  17,
  c,
  [69163, 193],
  c,
  [16686, 43],
  54,
  c,
  [16602, 155],
  c,
  [392, 160],
  c,
  [69425, 4],
  c,
  [69424, 4],
  c,
  [400, 17],
  c,
  [399, 15],
  c,
  [35, 70],
  c,
  [13309, 3],
  c,
  [13308, 3],
  c,
  [13307, 3],
  c,
  [13306, 3],
  c,
  [19664, 7],
  54,
  174,
  568,
  c,
  [835, 68],
  571,
  573,
  c,
  [9803, 4],
  c,
  [9143, 5],
  19,
  20,
  c,
  [102, 5],
  c,
  [9912, 7],
  c,
  [14, 14],
  c,
  [116, 3],
  146,
  148,
  225,
  c,
  [9, 11],
  c,
  [9821, 5],
  c,
  [151, 19],
  c,
  [148, 69],
  628,
  631,
  146,
  664,
  665,
  667,
  c,
  [1058, 70],
  96,
  c,
  [69689, 66],
  c,
  [30, 210],
  c,
  [861, 13],
  30,
  c,
  [69566, 10],
  c,
  [47, 3],
  c,
  [69569, 4],
  c,
  [51, 15],
  c,
  [69583, 51],
  c,
  [13750, 6],
  c,
  [131, 8],
  c,
  [119, 7],
  488,
  700,
  c,
  [14004, 20],
  s,
  [507, 4, 1],
  c,
  [14005, 5],
  c,
  [13759, 18],
  c,
  [18, 72],
  c,
  [13892, 15],
  c,
  [11698, 15],
  c,
  [20, 34],
  c,
  [12329, 4],
  c,
  [23, 5],
  29,
  c,
  [300, 3],
  c,
  [25, 5],
  c,
  [1272, 11],
  c,
  [117, 9],
  c,
  [7, 11],
  c,
  [77428, 75],
  c,
  [12868, 291],
  c,
  [21369, 10],
  c,
  [11970, 58],
  710,
  c,
  [13827, 83],
  c,
  [1930, 4],
  c,
  [74, 57],
  c,
  [1973, 19],
  c,
  [93, 4],
  c,
  [3786, 6],
  c,
  [95, 91],
  c,
  [14599, 48],
  c,
  [14164, 20],
  714,
  c,
  [14668, 51],
  c,
  [72, 14],
  499,
  c,
  [14298, 67],
  709,
  c,
  [135, 4],
  c,
  [14507, 140],
  c,
  [13991, 293],
  c,
  [14292, 7],
  c,
  [13674, 7],
  c,
  [22364, 8],
  c,
  [12964, 71],
  c,
  [162, 72],
  c,
  [802, 59],
  711,
  c,
  [63, 62],
  712,
  c,
  [63, 62],
  713,
  c,
  [63, 62],
  715,
  c,
  [324, 49],
  c,
  [64, 14],
  498,
  720,
  c,
  [14207, 4],
  c,
  [129, 59],
  716,
  c,
  [63, 62],
  717,
  c,
  [192, 65],
  c,
  [65, 199],
  c,
  [1371, 63],
  c,
  [1370, 50],
  c,
  [14245, 26],
  c,
  [205, 4],
  c,
  [141, 55],
  718,
  1,
  c,
  [16317, 5],
  c,
  [6, 7],
  c,
  [2474, 8],
  c,
  [14, 10],
  c,
  [14814, 6],
  c,
  [72395, 3],
  c,
  [72876, 6],
  17,
  c,
  [22872, 6],
  17,
  20,
  35,
  c,
  [3268, 6],
  34,
  c,
  [71908, 11],
  c,
  [72014, 52],
  c,
  [5871, 156],
  c,
  [12693, 17],
  c,
  [72065, 59],
  c,
  [1847, 59],
  c,
  [14887, 5],
  c,
  [3, 6],
  c,
  [1933, 140],
  c,
  [15057, 5],
  c,
  [23576, 7],
  c,
  [14795, 42],
  c,
  [21, 20],
  c,
  [144, 49],
  c,
  [776, 25],
  38,
  c,
  [13139, 5],
  c,
  [142, 62],
  c,
  [14889, 68],
  c,
  [68, 68],
  20,
  c,
  [349, 5],
  c,
  [80613, 3],
  c,
  [23830, 11],
  477,
  596,
  c,
  [5, 9],
  c,
  [24242, 74],
  477,
  c,
  [15059, 3],
  c,
  [74629, 333],
  c,
  [23361, 347],
  39,
  138,
  c,
  [15733, 7],
  612,
  1,
  18,
  c,
  [7, 5],
  c,
  [16523, 6],
  c,
  [24736, 9],
  c,
  [7, 12],
  50,
  51,
  637,
  18,
  46,
  c,
  [16487, 5],
  751,
  18,
  46,
  679,
  753,
  c,
  [14946, 5],
  44,
  46,
  c,
  [24745, 12],
  c,
  [46, 12],
  c,
  [773, 3],
  c,
  [15050, 14],
  760,
  c,
  [15050, 41],
  c,
  [145, 5],
  18,
  19,
  c,
  [1566, 13],
  53,
  c,
  [15493, 27],
  20,
  21,
  52,
  75,
  c,
  [14950, 5],
  c,
  [1873, 3],
  672,
  c,
  [14, 10],
  c,
  [14976, 12],
  c,
  [4978, 5],
  15,
  16,
  18,
  c,
  [14338, 5],
  c,
  [74252, 4],
  c,
  [14339, 32],
  c,
  [48, 96],
  23,
  c,
  [24930, 7],
  c,
  [7, 3],
  c,
  [16582, 15],
  c,
  [25181, 67],
  c,
  [15181, 5],
  c,
  [14851, 162],
  38,
  189,
  599,
  c,
  [15016, 230],
  c,
  [5693, 3],
  c,
  [15971, 45],
  c,
  [75149, 15],
  c,
  [17365, 87],
  c,
  [70, 57],
  c,
  [7001, 41],
  c,
  [23333, 43],
  c,
  [9791, 72],
  c,
  [16577, 3],
  c,
  [78215, 228],
  c,
  [10095, 466],
  121,
  c,
  [155, 69],
  541,
  c,
  [924, 83],
  c,
  [24173, 77],
  c,
  [22040, 157],
  c,
  [552, 79],
  145,
  c,
  [155, 154],
  c,
  [1678, 19],
  c,
  [1435, 25],
  c,
  [24908, 76],
  c,
  [23162, 222],
  c,
  [22018, 5],
  c,
  [9132, 230],
  c,
  [21612, 84],
  17,
  208,
  c,
  [4, 4],
  c,
  [3136, 7],
  c,
  [8136, 9],
  c,
  [8204, 8],
  c,
  [18588, 5],
  c,
  [1207, 38],
  c,
  [39, 39],
  c,
  [12278, 3],
  c,
  [21723, 8],
  c,
  [21722, 11],
  c,
  [76835, 9],
  c,
  [5008, 5],
  665,
  667,
  669,
  c,
  [10, 7],
  c,
  [7, 7],
  57,
  223,
  c,
  [23015, 39],
  561,
  c,
  [21572, 35],
  c,
  [7583, 7],
  c,
  [7825, 12],
  517,
  c,
  [16, 15],
  c,
  [12439, 3],
  c,
  [72, 20],
  c,
  [30, 7],
  506,
  511,
  512,
  514,
  515,
  c,
  [2368, 5],
  c,
  [7875, 6],
  75,
  c,
  [7876, 10],
  c,
  [208, 3],
  c,
  [7879, 11],
  c,
  [67, 26],
  c,
  [21627, 5],
  495,
  532,
  c,
  [7800, 22],
  c,
  [329, 19],
  c,
  [2743, 25],
  c,
  [414, 3],
  c,
  [7418, 19],
  107,
  c,
  [998, 31],
  524,
  526,
  c,
  [1000, 21],
  707,
  c,
  [6427, 121],
  c,
  [7160, 24],
  c,
  [7295, 129],
  c,
  [2011, 80],
  c,
  [22416, 7],
  c,
  [355, 67],
  c,
  [2932, 6],
  c,
  [75, 71],
  c,
  [366, 117],
  c,
  [69, 159],
  c,
  [278, 6],
  c,
  [6498, 59],
  c,
  [141, 11],
  c,
  [6568, 67],
  c,
  [275, 134],
  c,
  [1553, 6],
  20,
  c,
  [585, 3],
  499,
  c,
  [288, 9],
  c,
  [153, 65],
  c,
  [5654, 5],
  c,
  [3964, 9],
  c,
  [6587, 3],
  c,
  [11426, 74],
  c,
  [7743, 4],
  c,
  [7742, 5],
  c,
  [79, 67],
  34,
  c,
  [4176, 44],
  c,
  [6234, 3],
  c,
  [1044, 40],
  c,
  [6547, 114],
  c,
  [6238, 64],
  c,
  [6259, 89],
  c,
  [73, 4],
  53,
  c,
  [1954, 6],
  10,
  c,
  [2067, 4],
  187,
  188,
  317,
  474,
  c,
  [20127, 4],
  c,
  [4509, 9],
  c,
  [21178, 4],
  c,
  [4968, 79],
  c,
  [5960, 88],
  c,
  [20944, 40],
  c,
  [40, 160],
  c,
  [4875, 63],
  c,
  [6570, 17],
  c,
  [80, 54],
  c,
  [2227, 23],
  c,
  [5947, 5],
  c,
  [5914, 3],
  752,
  18,
  s,
  [46, 3],
  c,
  [30690, 20],
  c,
  [13, 13],
  c,
  [45, 3],
  18,
  477,
  581,
  595,
  c,
  [6780, 5],
  532,
  573,
  c,
  [7693, 5],
  c,
  [20869, 72],
  c,
  [22553, 14],
  c,
  [8875, 72],
  c,
  [87, 8],
  c,
  [20928, 5],
  694,
  1,
  c,
  [435, 19],
  c,
  [1066, 95],
  c,
  [1522, 8],
  c,
  [7746, 7],
  c,
  [13941, 619],
  c,
  [5717, 157],
  c,
  [13185, 195],
  c,
  [351, 310],
  c,
  [16560, 86],
  c,
  [5768, 71],
  c,
  [156, 241],
  c,
  [5837, 224],
  c,
  [5836, 173],
  146,
  c,
  [2186, 20],
  c,
  [2663, 3],
  c,
  [5185, 40],
  c,
  [33279, 6],
  c,
  [7675, 72],
  c,
  [13481, 17],
  c,
  [5239, 20],
  c,
  [2568, 5],
  c,
  [13515, 12],
  c,
  [2354, 67],
  c,
  [13580, 19],
  c,
  [13656, 7],
  c,
  [5346, 11],
  c,
  [7, 7],
  c,
  [10558, 72],
  64,
  147,
  223,
  c,
  [13319, 32],
  20,
  30,
  c,
  [5343, 10],
  518,
  c,
  [12048, 145],
  c,
  [13226, 9],
  c,
  [5485, 18],
  c,
  [5484, 7],
  c,
  [27362, 24],
  c,
  [59, 27],
  c,
  [27, 27],
  c,
  [82, 4],
  c,
  [27151, 11],
  c,
  [80, 3],
  510,
  513,
  c,
  [79, 5],
  84,
  89,
  84,
  89,
  c,
  [29, 17],
  83,
  85,
  c,
  [62, 7],
  c,
  [138, 5],
  c,
  [27, 13],
  89,
  85,
  89,
  85,
  c,
  [4, 3],
  89,
  17,
  c,
  [99, 10],
  c,
  [5663, 5],
  c,
  [5594, 21],
  c,
  [5040, 74],
  20,
  c,
  [96, 4],
  c,
  [92, 3],
  c,
  [89, 6],
  c,
  [14, 5],
  c,
  [868, 14],
  c,
  [25170, 7],
  c,
  [1010, 4],
  c,
  [10936, 29],
  c,
  [5614, 135],
  c,
  [26552, 441],
  c,
  [504, 136],
  c,
  [139, 421],
  c,
  [5894, 59],
  719,
  c,
  [136, 52],
  c,
  [204, 15],
  c,
  [6450, 75],
  c,
  [484, 278],
  c,
  [27957, 371],
  c,
  [5522, 68],
  c,
  [6596, 45],
  c,
  [575, 19],
  c,
  [93881, 19],
  c,
  [13163, 3],
  c,
  [26592, 46],
  c,
  [13195, 8],
  c,
  [13179, 9],
  35,
  c,
  [3164, 34],
  c,
  [47, 3],
  c,
  [5351, 72],
  c,
  [6574, 3],
  c,
  [85214, 48],
  c,
  [85534, 17],
  585,
  600,
  601,
  603,
  c,
  [3057, 8],
  c,
  [11736, 5],
  c,
  [12105, 350],
  c,
  [6666, 7],
  c,
  [18638, 51],
  c,
  [6219, 23],
  c,
  [27042, 4],
  c,
  [82, 4],
  46,
  46,
  c,
  [27214, 15],
  c,
  [3777, 3],
  c,
  [86283, 6],
  c,
  [4916, 4],
  c,
  [8661, 27],
  1,
  16,
  c,
  [6, 4],
  623,
  744,
  c,
  [12036, 3],
  c,
  [22067, 15],
  c,
  [22066, 5],
  c,
  [590, 21],
  c,
  [12097, 4],
  c,
  [86016, 3],
  561,
  672,
  c,
  [12286, 15],
  c,
  [11994, 11],
  c,
  [26428, 36],
  768,
  c,
  [49, 47],
  769,
  c,
  [6219, 45],
  38,
  c,
  [27167, 324],
  c,
  [20089, 770],
  30,
  122,
  542,
  543,
  c,
  [466, 462],
  c,
  [1561, 76],
  c,
  [155, 80],
  17,
  20,
  c,
  [5514, 26],
  c,
  [1989, 27],
  c,
  [5805, 41],
  c,
  [1969, 9],
  82,
  c,
  [7, 4],
  170,
  171,
  666,
  c,
  [2263, 70],
  31,
  64,
  147,
  c,
  [5549, 7],
  c,
  [144, 6],
  523,
  31,
  c,
  [10769, 7],
  c,
  [30258, 3],
  c,
  [5085, 15],
  c,
  [178, 5],
  c,
  [1971, 23],
  23,
  c,
  [198, 39],
  23,
  c,
  [5440, 54],
  c,
  [2311, 30],
  c,
  [5769, 27],
  516,
  c,
  [32607, 6],
  c,
  [88922, 33],
  c,
  [34, 28],
  725,
  c,
  [8647, 5],
  c,
  [89207, 10],
  c,
  [78, 62],
  477,
  c,
  [89697, 5],
  c,
  [5589, 13],
  c,
  [18, 18],
  c,
  [5624, 18],
  c,
  [5670, 18],
  c,
  [36, 18],
  c,
  [54, 53],
  20,
  c,
  [5706, 11],
  c,
  [5705, 4],
  c,
  [3632, 121],
  c,
  [2854, 23],
  c,
  [3849, 73],
  c,
  [5826, 6],
  104,
  c,
  [390, 6],
  525,
  109,
  c,
  [10605, 70],
  c,
  [11103, 76],
  c,
  [3723, 48],
  c,
  [16956, 8],
  c,
  [7, 7],
  c,
  [3614, 15],
  c,
  [3612, 4],
  c,
  [19, 14],
  182,
  182,
  c,
  [15352, 7],
  19,
  c,
  [25, 15],
  c,
  [32016, 8],
  c,
  [97233, 13],
  c,
  [97231, 8],
  c,
  [71, 17],
  139,
  c,
  [89273, 34],
  170,
  c,
  [9511, 5],
  c,
  [11468, 81],
  c,
  [40, 119],
  c,
  [15670, 7],
  c,
  [3583, 10],
  c,
  [3501, 12],
  c,
  [384, 8],
  10,
  108,
  c,
  [255, 4],
  317,
  474,
  576,
  577,
  578,
  c,
  [34, 3],
  74,
  79,
  s,
  [179, 5, 1],
  477,
  582,
  583,
  584,
  596,
  20,
  c,
  [89808, 6],
  c,
  [5, 5],
  180,
  201,
  c,
  [1554, 7],
  c,
  [29867, 105],
  c,
  [110, 50],
  c,
  [30023, 111],
  c,
  [105, 40],
  20,
  20,
  30,
  543,
  20,
  31,
  31,
  c,
  [6795, 3],
  c,
  [7531, 12],
  c,
  [9990, 9],
  510,
  637,
  c,
  [7403, 14],
  52,
  c,
  [21922, 40],
  172,
  668,
  204,
  224,
  c,
  [10982, 72],
  c,
  [6947, 10],
  527,
  31,
  c,
  [84, 16],
  99,
  100,
  101,
  c,
  [87, 33],
  519,
  520,
  c,
  [7347, 25],
  c,
  [7351, 31],
  c,
  [7452, 74],
  532,
  573,
  c,
  [1873, 29],
  c,
  [19535, 9],
  c,
  [1763, 28],
  726,
  c,
  [34, 32],
  c,
  [99, 33],
  c,
  [4345, 3],
  c,
  [34716, 33],
  c,
  [33, 31],
  c,
  [1969, 5],
  c,
  [10612, 9],
  c,
  [1797, 30],
  c,
  [17, 17],
  c,
  [21060, 17],
  c,
  [7425, 13],
  c,
  [13, 13],
  105,
  106,
  c,
  [15, 7],
  107,
  c,
  [124, 9],
  c,
  [6202, 64],
  c,
  [1781, 74],
  c,
  [1451, 33],
  184,
  c,
  [1551, 18],
  602,
  741,
  38,
  547,
  c,
  [40, 17],
  c,
  [41748, 73],
  c,
  [144, 31],
  c,
  [1676, 29],
  c,
  [98905, 76],
  c,
  [38480, 752],
  c,
  [33126, 72],
  c,
  [2678, 13],
  c,
  [2299, 13],
  578,
  c,
  [10, 9],
  c,
  [9, 9],
  s,
  [34, 3],
  c,
  [11728, 6],
  74,
  79,
  c,
  [2320, 4],
  585,
  586,
  587,
  592,
  593,
  c,
  [1436, 9],
  202,
  203,
  c,
  [81, 11],
  c,
  [5456, 315],
  c,
  [17165, 171],
  c,
  [2309, 62],
  c,
  [6519, 70],
  c,
  [26952, 310],
  477,
  c,
  [18866, 6],
  c,
  [12915, 10],
  c,
  [4738, 3],
  c,
  [2923, 7],
  19,
  173,
  174,
  64,
  147,
  64,
  147,
  c,
  [2929, 40],
  c,
  [2855, 6],
  c,
  [77, 4],
  522,
  38,
  547,
  c,
  [92288, 5],
  c,
  [472, 70],
  c,
  [2437, 3],
  c,
  [4807, 4],
  102,
  c,
  [2438, 6],
  521,
  c,
  [16, 15],
  52,
  c,
  [15716, 6],
  c,
  [4826, 22],
  c,
  [36, 5],
  c,
  [15602, 24],
  25,
  489,
  703,
  25,
  c,
  [2575, 5],
  c,
  [60, 7],
  c,
  [3999, 9],
  c,
  [61, 7],
  c,
  [2956, 15],
  c,
  [7795, 24],
  c,
  [4802, 56],
  c,
  [29, 87],
  c,
  [4820, 5],
  c,
  [63, 58],
  c,
  [10258, 15],
  c,
  [13, 26],
  c,
  [19563, 8],
  c,
  [2551, 34],
  c,
  [20307, 3],
  c,
  [5387, 42],
  c,
  [2717, 84],
  c,
  [127, 41],
  c,
  [1758, 8],
  c,
  [181, 4],
  c,
  [92993, 6],
  c,
  [4080, 7],
  583,
  584,
  c,
  [19797, 21],
  c,
  [7, 14],
  c,
  [4487, 5],
  19,
  182,
  738,
  c,
  [3542, 8],
  c,
  [1819, 6],
  c,
  [7629, 7],
  743,
  c,
  [1811, 8],
  179,
  c,
  [26579, 158],
  30,
  c,
  [7951, 7],
  c,
  [3634, 7],
  17,
  c,
  [3964, 13],
  c,
  [5897, 12],
  c,
  [33, 6],
  174,
  172,
  668,
  c,
  [420, 70],
  c,
  [72, 74],
  c,
  [24370, 7],
  21,
  60,
  75,
  103,
  c,
  [3624, 5],
  c,
  [6, 10],
  c,
  [1185, 6],
  c,
  [702, 5],
  528,
  112,
  476,
  727,
  c,
  [732, 15],
  c,
  [5932, 11],
  c,
  [1758, 52],
  c,
  [1757, 71],
  c,
  [14493, 25],
  c,
  [1903, 88],
  c,
  [75, 59],
  20,
  20,
  c,
  [1404, 4],
  c,
  [38729, 34],
  18,
  c,
  [5, 6],
  c,
  [3729, 19],
  740,
  20,
  c,
  [3730, 19],
  c,
  [1070, 57],
  c,
  [2727, 18],
  c,
  [9, 9],
  c,
  [8670, 6],
  477,
  736,
  c,
  [330, 5],
  477,
  739,
  c,
  [6, 4],
  c,
  [188, 3],
  c,
  [2726, 9],
  c,
  [999, 9],
  c,
  [14497, 5],
  c,
  [748, 5],
  c,
  [776, 4],
  c,
  [764, 12],
  c,
  [1798, 41],
  c,
  [47, 53],
  c,
  [693, 8],
  c,
  [686, 7],
  c,
  [685, 6],
  c,
  [18, 6],
  c,
  [12, 18],
  c,
  [1894, 7],
  38,
  547,
  112,
  112,
  c,
  [1805, 15],
  c,
  [6627, 25],
  c,
  [1729, 27],
  c,
  [529, 75],
  c,
  [8921, 5],
  c,
  [6440, 6],
  c,
  [4451, 12],
  477,
  490,
  704,
  c,
  [776, 49],
  491,
  492,
  c,
  [4809, 56],
  c,
  [4941, 30],
  c,
  [4972, 31],
  c,
  [9614, 18],
  c,
  [17, 34],
  c,
  [5305, 4],
  c,
  [18, 14],
  c,
  [37908, 5],
  39,
  477,
  594,
  c,
  [37916, 6],
  532,
  573,
  c,
  [182, 7],
  c,
  [623, 9],
  173,
  c,
  [1335, 3],
  c,
  [2407, 4],
  c,
  [483, 18],
  c,
  [7, 17],
  c,
  [492, 8],
  358,
  728,
  c,
  [9268, 6],
  c,
  [493, 13],
  c,
  [508, 16],
  c,
  [4824, 14],
  c,
  [15, 13],
  c,
  [251, 7],
  c,
  [19, 12],
  c,
  [3521, 5],
  18,
  c,
  [878, 40],
  c,
  [127, 4],
  c,
  [7138, 53],
  c,
  [2004, 19],
  c,
  [283, 3],
  c,
  [3646, 6],
  c,
  [281, 6],
  c,
  [10, 4],
  c,
  [1627, 12],
  174,
  c,
  [890, 14],
  c,
  [269, 7],
  c,
  [2644, 3],
  c,
  [242, 30],
  c,
  [9665, 50],
  c,
  [612, 26],
  c,
  [146, 3],
  184,
  c,
  [169, 5],
  c,
  [6591, 5],
  c,
  [2028, 13],
  c,
  [156, 16],
  c,
  [418, 5],
  202,
  317,
  474,
  476,
  729,
  c,
  [767, 25],
  705,
  c,
  [5842, 10],
  c,
  [96015, 3],
  c,
  [15622, 5],
  c,
  [480, 13],
  c,
  [62, 3],
  730,
  c,
  [12, 11],
  c,
  [458, 30],
  c,
  [1351, 4],
  96,
  c,
  [9, 4],
  588,
  737,
  c,
  [544, 10],
  c,
  [10, 11],
  17,
  c,
  [30, 6],
  589,
  590,
  c,
  [10, 8],
  c,
  [369, 6],
  c,
  [115, 7],
  96,
  591,
  171,
  c,
  [127, 9],
  170,
  185,
  c,
  [35, 8],
  185,
  186,
  186,
  96,
  c,
  [21, 7]
]),
  type: u([
  s,
  [2, 45],
  s,
  [0, 62],
  1,
  c,
  [66, 4],
  s,
  [2, 59],
  s,
  [0, 59],
  s,
  [2, 274],
  c,
  [275, 10],
  c,
  [286, 18],
  c,
  [18, 3],
  c,
  [21, 13],
  c,
  [320, 50],
  c,
  [390, 27],
  c,
  [6, 5],
  c,
  [81, 21],
  c,
  [41, 13],
  c,
  [115, 22],
  c,
  [458, 71],
  c,
  [70, 9],
  c,
  [141, 6],
  c,
  [86, 48],
  s,
  [0, 61],
  c,
  [121, 10],
  c,
  [663, 158],
  c,
  [157, 24],
  c,
  [853, 58],
  c,
  [923, 82],
  c,
  [358, 33],
  c,
  [630, 10],
  c,
  [174, 75],
  c,
  [181, 12],
  c,
  [262, 132],
  c,
  [438, 36],
  s,
  [2, 685],
  c,
  [1423, 106],
  c,
  [204, 99],
  c,
  [1249, 83],
  c,
  [1863, 20],
  c,
  [1852, 16],
  c,
  [2006, 21],
  c,
  [1913, 24],
  c,
  [30, 13],
  c,
  [5, 19],
  c,
  [296, 91],
  c,
  [1868, 67],
  s,
  [2, 2818],
  c,
  [2853, 540],
  c,
  [533, 70],
  c,
  [70, 280],
  c,
  [2001, 1113],
  c,
  [6092, 346],
  c,
  [1513, 56],
  c,
  [2400, 207],
  c,
  [1854, 84],
  c,
  [7765, 30],
  c,
  [5783, 13],
  c,
  [7780, 4],
  c,
  [89, 29],
  c,
  [7576, 39],
  c,
  [186, 36],
  c,
  [71, 70],
  c,
  [489, 65],
  c,
  [100, 100],
  c,
  [6271, 37],
  c,
  [102, 25],
  c,
  [8030, 71],
  c,
  [596, 27],
  c,
  [517, 7],
  c,
  [28, 13],
  c,
  [41, 14],
  c,
  [848, 118],
  c,
  [2557, 206],
  c,
  [6485, 117],
  c,
  [58, 43],
  c,
  [8675, 28],
  c,
  [1814, 33],
  c,
  [6994, 64],
  c,
  [8020, 99],
  c,
  [50, 100],
  c,
  [503, 44],
  c,
  [7139, 8],
  c,
  [6961, 2825],
  s,
  [2, 45165],
  c,
  [48524, 66],
  c,
  [48056, 52],
  c,
  [49620, 82],
  c,
  [71, 66],
  c,
  [57340, 26],
  c,
  [51626, 90],
  c,
  [48748, 14],
  c,
  [130, 54],
  c,
  [136, 48],
  c,
  [23, 22],
  c,
  [21, 17],
  c,
  [16, 15],
  c,
  [212, 28],
  c,
  [55767, 9],
  c,
  [197, 33],
  c,
  [70, 23],
  c,
  [55832, 10],
  c,
  [118, 16],
  c,
  [57620, 17],
  c,
  [48999, 18],
  c,
  [52271, 329],
  c,
  [70, 803],
  c,
  [14, 28],
  c,
  [53212, 113],
  c,
  [73, 289],
  c,
  [53644, 143],
  c,
  [213, 165],
  c,
  [890, 155],
  c,
  [52504, 74],
  c,
  [70, 142],
  c,
  [50939, 66],
  c,
  [60094, 12],
  c,
  [3075, 73],
  c,
  [59315, 160],
  c,
  [51249, 156],
  c,
  [156, 624],
  c,
  [4744, 728],
  c,
  [809, 790],
  c,
  [850, 42],
  c,
  [1719, 56],
  c,
  [2801, 160],
  c,
  [1400, 994],
  c,
  [6554, 17],
  c,
  [4103, 12],
  c,
  [6337, 22],
  c,
  [700, 42],
  c,
  [737, 68],
  c,
  [56113, 69],
  c,
  [34, 72],
  c,
  [56137, 36],
  c,
  [63523, 12],
  c,
  [56035, 14],
  c,
  [63457, 224],
  c,
  [151, 122],
  c,
  [58894, 153],
  c,
  [1513, 453],
  c,
  [7728, 60],
  c,
  [1774, 404],
  c,
  [1272, 101],
  c,
  [3093, 9],
  c,
  [58128, 14],
  c,
  [1606, 18],
  c,
  [58150, 21],
  c,
  [3155, 58],
  c,
  [6473, 99],
  c,
  [1758, 7],
  c,
  [5890, 78],
  c,
  [1866, 21],
  c,
  [104, 14],
  c,
  [8839, 73],
  c,
  [72, 193],
  c,
  [791, 83],
  c,
  [778, 71],
  c,
  [2546, 68],
  c,
  [3372, 376],
  c,
  [356, 177],
  c,
  [1057, 18],
  c,
  [555, 48],
  c,
  [1149, 11],
  c,
  [54, 18],
  c,
  [1182, 15],
  c,
  [15, 21],
  c,
  [9680, 32],
  c,
  [355, 112],
  c,
  [1593, 55],
  c,
  [883, 34],
  c,
  [233, 21],
  c,
  [109, 33],
  c,
  [4324, 538],
  c,
  [1509, 37],
  c,
  [1687, 72],
  c,
  [66142, 212],
  c,
  [156, 2496],
  c,
  [7900, 734],
  c,
  [532, 330],
  c,
  [1688, 552],
  c,
  [2552, 940],
  c,
  [316, 209],
  c,
  [71583, 646],
  c,
  [14537, 67],
  c,
  [2672, 726],
  c,
  [13968, 736],
  c,
  [2171, 523],
  c,
  [12156, 8],
  c,
  [653, 112],
  c,
  [40, 80],
  c,
  [937, 156],
  c,
  [394, 45],
  c,
  [10131, 342],
  c,
  [399, 35],
  c,
  [35, 55],
  c,
  [69571, 14],
  c,
  [10978, 127],
  c,
  [151, 23],
  c,
  [10833, 70],
  c,
  [1641, 108],
  c,
  [1677, 342],
  c,
  [10676, 20],
  c,
  [77487, 77],
  c,
  [13568, 108],
  c,
  [547, 95],
  c,
  [2340, 363],
  c,
  [4876, 191],
  c,
  [807, 96],
  c,
  [808, 64],
  c,
  [333, 71],
  c,
  [14298, 118],
  c,
  [19544, 144],
  c,
  [1594, 253],
  c,
  [19854, 79],
  c,
  [381, 136],
  c,
  [1673, 126],
  c,
  [1799, 127],
  c,
  [19942, 66],
  c,
  [192, 192],
  c,
  [65, 192],
  c,
  [14173, 141],
  c,
  [72508, 43],
  c,
  [108, 24],
  c,
  [72014, 100],
  c,
  [2085, 174],
  c,
  [80973, 78],
  c,
  [138, 58],
  c,
  [1933, 214],
  c,
  [80655, 31],
  c,
  [1998, 215],
  c,
  [79553, 10],
  c,
  [2002, 79],
  c,
  [5704, 379],
  c,
  [23431, 314],
  c,
  [82019, 11],
  c,
  [5189, 27],
  c,
  [1719, 10],
  c,
  [14203, 49],
  c,
  [1096, 88],
  c,
  [24691, 13],
  c,
  [4257, 177],
  c,
  [3668, 70],
  c,
  [4515, 185],
  c,
  [1323, 211],
  c,
  [2645, 65],
  c,
  [44, 15],
  c,
  [17365, 125],
  c,
  [6881, 152],
  c,
  [9791, 231],
  c,
  [17818, 95],
  c,
  [7924, 467],
  c,
  [924, 85],
  c,
  [9385, 505],
  c,
  [22107, 125],
  c,
  [9124, 519],
  c,
  [500, 91],
  c,
  [18097, 16],
  c,
  [610, 20],
  c,
  [127, 57],
  c,
  [56, 35],
  c,
  [83800, 25],
  c,
  [77443, 68],
  c,
  [822, 45],
  c,
  [357, 67],
  c,
  [2728, 77],
  c,
  [1001, 141],
  c,
  [7295, 174],
  c,
  [9816, 224],
  c,
  [366, 100],
  c,
  [69, 207],
  c,
  [72, 73],
  c,
  [275, 152],
  c,
  [1213, 67],
  c,
  [85255, 13],
  c,
  [88, 11],
  c,
  [78230, 51],
  c,
  [6266, 28],
  c,
  [2311, 115],
  c,
  [78691, 45],
  c,
  [6547, 119],
  c,
  [2189, 259],
  c,
  [3055, 171],
  c,
  [40, 160],
  c,
  [6570, 95],
  c,
  [2226, 28],
  c,
  [5914, 20],
  c,
  [25611, 35],
  c,
  [3362, 87],
  c,
  [80806, 90],
  c,
  [1153, 87],
  c,
  [1066, 197],
  c,
  [13941, 815],
  c,
  [659, 469],
  c,
  [468, 156],
  c,
  [1283, 504],
  c,
  [3337, 48],
  c,
  [11237, 102],
  c,
  [2703, 12],
  c,
  [9881, 88],
  c,
  [25285, 85],
  c,
  [5048, 70],
  c,
  [12048, 172],
  c,
  [105, 23],
  c,
  [2721, 80],
  c,
  [568, 39],
  c,
  [83106, 203],
  c,
  [5614, 203],
  c,
  [2226, 580],
  c,
  [139, 415],
  c,
  [28837, 102],
  c,
  [623, 384],
  c,
  [36573, 371],
  c,
  [575, 131],
  c,
  [2947, 61],
  c,
  [2763, 115],
  c,
  [2740, 23],
  c,
  [29320, 73],
  c,
  [88577, 351],
  c,
  [3397, 42],
  c,
  [7239, 15],
  c,
  [659, 87],
  c,
  [29890, 69],
  c,
  [949, 91],
  c,
  [85645, 1099],
  c,
  [1099, 630],
  c,
  [5514, 86],
  c,
  [5461, 103],
  c,
  [20260, 55],
  c,
  [912, 152],
  c,
  [32775, 73],
  c,
  [8638, 39],
  c,
  [34, 68],
  c,
  [697, 205],
  c,
  [17726, 151],
  c,
  [10318, 75],
  c,
  [1756, 150],
  c,
  [31, 24],
  c,
  [179, 41],
  c,
  [3320, 66],
  c,
  [9873, 206],
  c,
  [33747, 21],
  c,
  [90318, 24],
  c,
  [6555, 78],
  c,
  [29867, 156],
  c,
  [156, 108],
  c,
  [40711, 28],
  c,
  [10296, 57],
  c,
  [1035, 52],
  c,
  [16235, 41],
  c,
  [4138, 73],
  c,
  [17012, 80],
  c,
  [105, 26],
  c,
  [12873, 35],
  c,
  [2023, 98],
  c,
  [1863, 67],
  c,
  [1969, 8],
  c,
  [11215, 179],
  c,
  [177, 127],
  c,
  [788, 54],
  c,
  [4933, 92],
  c,
  [93643, 934],
  c,
  [1461, 35],
  c,
  [1742, 10],
  c,
  [904, 537],
  c,
  [34647, 223],
  c,
  [26951, 203],
  c,
  [4651, 65],
  c,
  [2152, 4],
  c,
  [472, 88],
  c,
  [488, 71],
  c,
  [19207, 21],
  c,
  [5769, 200],
  c,
  [149, 103],
  c,
  [253, 39],
  c,
  [4249, 42],
  c,
  [2717, 125],
  c,
  [3560, 16],
  c,
  [44613, 13],
  c,
  [14684, 44],
  c,
  [3542, 20],
  c,
  [1183, 180],
  c,
  [25162, 30],
  c,
  [14075, 9],
  c,
  [420, 71],
  c,
  [72, 84],
  c,
  [3834, 12],
  c,
  [14173, 15],
  c,
  [805, 80],
  c,
  [1757, 93],
  c,
  [24215, 127],
  c,
  [75, 60],
  c,
  [45247, 29],
  c,
  [1645, 57],
  c,
  [19578, 57],
  c,
  [25960, 32],
  c,
  [1552, 111],
  c,
  [35976, 22],
  c,
  [102513, 16],
  c,
  [12, 22],
  c,
  [706, 70],
  c,
  [529, 100],
  c,
  [2533, 78],
  c,
  [2539, 62],
  c,
  [12185, 68],
  c,
  [622, 48],
  c,
  [182, 20],
  c,
  [37932, 15],
  c,
  [6751, 100],
  c,
  [22980, 110],
  c,
  [79, 40],
  c,
  [36474, 17],
  c,
  [21697, 31],
  c,
  [1460, 101],
  c,
  [38054, 25],
  c,
  [103744, 55],
  c,
  [6591, 35],
  c,
  [404, 80],
  c,
  [36817, 24],
  c,
  [105, 32]
]),
  state: u([
  100,
  1,
  2,
  4,
  3,
  5,
  36,
  29,
  75,
  99,
  45,
  59,
  60,
  44,
  18,
  25,
  13,
  22,
  7,
  28,
  8,
  19,
  10,
  43,
  20,
  11,
  21,
  32,
  34,
  31,
  33,
  30,
  14,
  23,
  55,
  46,
  47,
  54,
  40,
  41,
  39,
  24,
  s,
  [48, 6, 1],
  58,
  17,
  35,
  26,
  16,
  15,
  12,
  56,
  95,
  57,
  9,
  37,
  38,
  27,
  106,
  100,
  109,
  c,
  [60, 57],
  112,
  114,
  113,
  122,
  126,
  133,
  134,
  139,
  141,
  169,
  151,
  150,
  146,
  166,
  164,
  160,
  147,
  168,
  148,
  s,
  [152, 4, 1],
  157,
  158,
  163,
  156,
  159,
  149,
  162,
  191,
  206,
  209,
  221,
  211,
  220,
  215,
  217,
  219,
  216,
  214,
  191,
  210,
  223,
  226,
  225,
  228,
  232,
  238,
  236,
  237,
  100,
  240,
  c,
  [172, 59],
  244,
  246,
  245,
  247,
  114,
  249,
  257,
  252,
  254,
  253,
  255,
  256,
  248,
  191,
  c,
  [117, 3],
  259,
  c,
  [117, 18],
  169,
  261,
  75,
  99,
  151,
  150,
  262,
  c,
  [25, 6],
  260,
  c,
  [26, 12],
  268,
  265,
  266,
  263,
  264,
  269,
  270,
  c,
  [55, 3],
  273,
  c,
  [55, 18],
  100,
  275,
  276,
  114,
  277,
  c,
  [27, 3],
  278,
  c,
  [27, 18],
  282,
  292,
  100,
  560,
  c,
  [179, 57],
  246,
  562,
  c,
  [85, 3],
  570,
  c,
  [85, 18],
  571,
  574,
  581,
  588,
  576,
  578,
  580,
  585,
  579,
  584,
  582,
  589,
  594,
  593,
  596,
  595,
  597,
  601,
  246,
  602,
  603,
  604,
  s,
  [607, 4, 1],
  100,
  611,
  c,
  [109, 3],
  628,
  c,
  [110, 5],
  640,
  c,
  [111, 49],
  169,
  651,
  c,
  [254, 4],
  654,
  c,
  [112, 16],
  652,
  162,
  191,
  656,
  657,
  653,
  c,
  [138, 3],
  661,
  c,
  [305, 19],
  151,
  150,
  662,
  c,
  [22, 21],
  663,
  c,
  [22, 21],
  664,
  c,
  [22, 21],
  665,
  c,
  [22, 18],
  667,
  666,
  669,
  670,
  673,
  674,
  672,
  675,
  676,
  c,
  [31, 3],
  678,
  c,
  [31, 15],
  679,
  680,
  c,
  [33, 3],
  698,
  693,
  696,
  690,
  692,
  691,
  694,
  695,
  688,
  687,
  689,
  191,
  684,
  685,
  c,
  [38, 3],
  c,
  [437, 7],
  699,
  c,
  [70, 12],
  700,
  701,
  707,
  702,
  704,
  246,
  708,
  246,
  710,
  711,
  221,
  713,
  c,
  [588, 7],
  714,
  75,
  99,
  715,
  717,
  s,
  [720, 4, 2],
  246,
  729,
  730,
  732,
  736,
  739,
  735,
  734,
  771,
  761,
  191,
  772,
  246,
  792,
  793,
  75,
  99,
  106,
  797,
  c,
  [113, 5],
  100,
  800,
  c,
  [322, 59],
  628,
  640,
  810,
  807,
  806,
  811,
  628,
  640,
  100,
  812,
  276,
  628,
  640,
  814,
  815,
  816,
  169,
  818,
  819,
  151,
  150,
  820,
  c,
  [223, 18],
  817,
  821,
  100,
  823,
  276,
  100,
  824,
  c,
  [537, 57],
  829,
  832,
  830,
  c,
  [243, 10],
  835,
  c,
  [335, 15],
  c,
  [23, 7],
  836,
  c,
  [23, 12],
  837,
  839,
  c,
  [25, 3],
  841,
  c,
  [137, 18],
  842,
  628,
  640,
  843,
  845,
  847,
  c,
  [28, 3],
  849,
  c,
  [28, 18],
  851,
  191,
  850,
  856,
  855,
  857,
  860,
  859,
  861,
  s,
  [863, 4, 1],
  869,
  868,
  871,
  879,
  883,
  882,
  880,
  887,
  889,
  246,
  891,
  890,
  246,
  891,
  892,
  893,
  c,
  [51, 3],
  895,
  c,
  [461, 21],
  896,
  c,
  [22, 21],
  897,
  c,
  [22, 21],
  898,
  c,
  [22, 21],
  899,
  c,
  [22, 21],
  900,
  c,
  [22, 21],
  901,
  c,
  [22, 21],
  902,
  c,
  [22, 21],
  903,
  c,
  [22, 21],
  904,
  c,
  [22, 21],
  905,
  c,
  [22, 21],
  906,
  c,
  [22, 21],
  907,
  c,
  [22, 21],
  908,
  c,
  [22, 21],
  909,
  c,
  [22, 21],
  910,
  c,
  [22, 18],
  911,
  914,
  912,
  915,
  918,
  916,
  c,
  [28, 3],
  919,
  c,
  [50, 21],
  920,
  c,
  [22, 21],
  921,
  c,
  [22, 21],
  922,
  c,
  [22, 21],
  923,
  c,
  [22, 21],
  924,
  c,
  [22, 21],
  925,
  c,
  [22, 21],
  926,
  c,
  [22, 21],
  927,
  c,
  [22, 21],
  928,
  c,
  [22, 18],
  929,
  c,
  [23, 3],
  933,
  c,
  [45, 21],
  934,
  c,
  [22, 18],
  698,
  938,
  939,
  937,
  936,
  c,
  [27, 3],
  943,
  c,
  [49, 21],
  944,
  c,
  [22, 21],
  945,
  c,
  [22, 18],
  883,
  882,
  946,
  628,
  640,
  209,
  c,
  [804, 10],
  951,
  c,
  [29, 12],
  954,
  628,
  640,
  628,
  640,
  c,
  [4, 6],
  c,
  [34, 3],
  957,
  c,
  [62, 18],
  958,
  75,
  99,
  628,
  959,
  680,
  640,
  961,
  960,
  c,
  [31, 3],
  963,
  c,
  [115, 21],
  964,
  c,
  [115, 20],
  965,
  c,
  [25, 3],
  968,
  c,
  [25, 18],
  980,
  75,
  99,
  984,
  976,
  977,
  983,
  191,
  985,
  984,
  986,
  987,
  983,
  191,
  989,
  221,
  991,
  c,
  [1186, 7],
  994,
  993,
  995,
  s,
  [997, 5, 1],
  1003,
  221,
  1005,
  1006,
  1008,
  1007,
  1015,
  1011,
  1012,
  1013,
  1017,
  1016,
  1019,
  1025,
  c,
  [68, 3],
  1026,
  c,
  [115, 21],
  1027,
  c,
  [22, 18],
  736,
  739,
  1029,
  c,
  [1238, 3],
  1028,
  772,
  1034,
  1035,
  1037,
  c,
  [1235, 5],
  1042,
  246,
  1058,
  246,
  1059,
  1060,
  246,
  1062,
  1063,
  1064,
  238,
  1065,
  1015,
  1069,
  1067,
  1068,
  1070,
  1073,
  c,
  [57, 4],
  1074,
  c,
  [79, 21],
  1075,
  c,
  [22, 18],
  1076,
  268,
  1077,
  c,
  [25, 3],
  1079,
  c,
  [25, 18],
  1078,
  1081,
  1083,
  1082,
  810,
  1087,
  100,
  1088,
  169,
  1089,
  c,
  [1254, 22],
  169,
  1090,
  c,
  [24, 23],
  1091,
  c,
  [24, 22],
  1094,
  628,
  1096,
  640,
  1097,
  1099,
  c,
  [414, 10],
  1108,
  c,
  [29, 12],
  628,
  640,
  1117,
  1118,
  246,
  1119,
  581,
  588,
  1121,
  c,
  [1783, 5],
  628,
  640,
  1123,
  1122,
  1127,
  1126,
  191,
  1125,
  584,
  582,
  1127,
  588,
  1128,
  585,
  1129,
  584,
  582,
  581,
  588,
  1130,
  c,
  [1809, 6],
  1131,
  1134,
  1133,
  246,
  1135,
  246,
  1136,
  c,
  [70, 3],
  1137,
  c,
  [98, 18],
  1139,
  1138,
  1140,
  1141,
  246,
  1145,
  883,
  882,
  1150,
  c,
  [31, 3],
  1155,
  c,
  [31, 18],
  1156,
  1157,
  100,
  1159,
  c,
  [1428, 57],
  c,
  [574, 10],
  c,
  [4, 22],
  c,
  [115, 3],
  1162,
  c,
  [371, 21],
  1163,
  c,
  [22, 18],
  c,
  [68, 25],
  1165,
  c,
  [2208, 11],
  1166,
  c,
  [50, 12],
  670,
  c,
  [802, 3],
  1171,
  1170,
  c,
  [106, 9],
  1173,
  c,
  [106, 21],
  1174,
  c,
  [106, 20],
  961,
  1178,
  c,
  [26, 3],
  1180,
  c,
  [132, 22],
  c,
  [1894, 9],
  1185,
  689,
  c,
  [16, 3],
  1187,
  707,
  1189,
  c,
  [17, 9],
  1190,
  689,
  c,
  [1923, 10],
  1191,
  c,
  [12, 11],
  1192,
  689,
  191,
  984,
  1193,
  983,
  191,
  1195,
  169,
  151,
  1198,
  1199,
  c,
  [84, 16],
  1197,
  1196,
  162,
  191,
  246,
  1200,
  984,
  1201,
  983,
  c,
  [140, 4],
  c,
  [30, 18],
  162,
  191,
  1202,
  1203,
  1204,
  c,
  [26, 3],
  1206,
  c,
  [140, 18],
  1207,
  1209,
  1211,
  1210,
  221,
  1214,
  1216,
  c,
  [802, 7],
  670,
  1218,
  c,
  [38, 3],
  1219,
  c,
  [226, 21],
  c,
  [283, 7],
  1221,
  c,
  [23, 12],
  1220,
  c,
  [202, 4],
  736,
  739,
  1224,
  c,
  [2026, 4],
  1019,
  736,
  739,
  1226,
  c,
  [8, 3],
  1225,
  772,
  c,
  [44, 3],
  1227,
  c,
  [66, 21],
  1228,
  c,
  [22, 18],
  1229,
  1230,
  1015,
  1069,
  1231,
  1068,
  1070,
  1232,
  c,
  [96, 10],
  1233,
  c,
  [31, 12],
  s,
  [1234, 6, 1],
  1241,
  1242,
  1243,
  1239,
  1244,
  1239,
  1245,
  1239,
  1246,
  1239,
  736,
  739,
  1247,
  c,
  [107, 4],
  169,
  1248,
  c,
  [742, 22],
  1249,
  1252,
  1255,
  75,
  99,
  1259,
  c,
  [426, 9],
  1260,
  c,
  [34, 18],
  1083,
  1261,
  c,
  [24, 3],
  1262,
  c,
  [158, 21],
  1263,
  c,
  [22, 18],
  1081,
  169,
  1265,
  c,
  [104, 21],
  1266,
  1268,
  1270,
  1271,
  1273,
  s,
  [1272, 4, 1],
  c,
  [183, 10],
  1276,
  c,
  [32, 12],
  1277,
  c,
  [24, 3],
  1279,
  c,
  [101, 21],
  1280,
  c,
  [22, 21],
  1281,
  c,
  [22, 21],
  1282,
  c,
  [22, 21],
  1283,
  c,
  [22, 18],
  1284,
  1287,
  246,
  1289,
  1290,
  1292,
  191,
  1291,
  1294,
  1293,
  856,
  855,
  1297,
  1296,
  628,
  640,
  1305,
  75,
  99,
  1302,
  1307,
  c,
  [43, 3],
  1308,
  c,
  [43, 18],
  1310,
  c,
  [543, 20],
  1313,
  c,
  [658, 4],
  246,
  1314,
  c,
  [27, 3],
  1315,
  c,
  [115, 21],
  1316,
  c,
  [706, 22],
  169,
  1319,
  c,
  [818, 11],
  1320,
  c,
  [52, 15],
  1323,
  c,
  [74, 19],
  1324,
  c,
  [48, 11],
  1325,
  c,
  [26, 12],
  1327,
  c,
  [79, 4],
  1331,
  c,
  [436, 5],
  1334,
  c,
  [1511, 20],
  1335,
  c,
  [25, 3],
  1336,
  c,
  [25, 18],
  1340,
  1339,
  c,
  [136, 3],
  1347,
  c,
  [1516, 3],
  1345,
  1346,
  983,
  191,
  1349,
  1350,
  1348,
  628,
  640,
  1354,
  1355,
  1362,
  1359,
  1361,
  1363,
  1366,
  221,
  c,
  [2699, 3],
  1375,
  c,
  [723, 8],
  1015,
  1376,
  1013,
  c,
  [90, 3],
  1378,
  1380,
  151,
  150,
  1382,
  c,
  [67, 18],
  1379,
  c,
  [694, 3],
  1384,
  c,
  [702, 5],
  c,
  [714, 6],
  1391,
  c,
  [12, 4],
  736,
  739,
  1393,
  c,
  [7, 6],
  1395,
  c,
  [7, 6],
  1397,
  c,
  [7, 6],
  1400,
  c,
  [7, 4],
  1401,
  c,
  [644, 3],
  1403,
  c,
  [16, 6],
  1405,
  c,
  [758, 7],
  1413,
  c,
  [8, 4],
  s,
  [1414, 4, 1],
  c,
  [166, 3],
  1419,
  c,
  [99, 18],
  1015,
  1069,
  1420,
  1070,
  c,
  [26, 3],
  1421,
  c,
  [1163, 24],
  c,
  [28, 3],
  1424,
  c,
  [245, 20],
  1426,
  c,
  [1248, 13],
  c,
  [311, 7],
  1434,
  c,
  [36, 12],
  1435,
  169,
  1436,
  c,
  [214, 22],
  1438,
  1440,
  1439,
  1273,
  1442,
  1443,
  1445,
  1015,
  1447,
  1446,
  1448,
  75,
  99,
  c,
  [61, 3],
  1449,
  c,
  [150, 20],
  1450,
  1068,
  c,
  [151, 4],
  c,
  [88, 7],
  1451,
  c,
  [28, 12],
  246,
  1452,
  1453,
  c,
  [116, 5],
  1454,
  c,
  [179, 24],
  1464,
  1465,
  c,
  [433, 5],
  c,
  [588, 20],
  1470,
  162,
  191,
  1473,
  c,
  [402, 3],
  1471,
  1472,
  983,
  191,
  1015,
  1474,
  c,
  [33, 3],
  1475,
  c,
  [68, 18],
  984,
  1476,
  c,
  [1190, 3],
  1477,
  c,
  [962, 22],
  1481,
  c,
  [51, 3],
  1483,
  c,
  [645, 21],
  1484,
  c,
  [22, 18],
  1485,
  1487,
  1486,
  c,
  [492, 3],
  1488,
  c,
  [488, 7],
  221,
  1490,
  1489,
  1494,
  1495,
  1492,
  1491,
  191,
  1500,
  1362,
  1511,
  c,
  [515, 3],
  628,
  640,
  s,
  [1019, 5],
  1517,
  s,
  [1019, 3],
  c,
  [230, 10],
  1519,
  c,
  [62, 12],
  c,
  [498, 5],
  c,
  [28, 3],
  1520,
  c,
  [230, 20],
  1521,
  1532,
  1522,
  1523,
  1524,
  c,
  [29, 3],
  1537,
  c,
  [140, 21],
  1538,
  c,
  [22, 21],
  1539,
  c,
  [22, 21],
  1540,
  c,
  [22, 21],
  1541,
  c,
  [22, 19],
  1544,
  c,
  [461, 22],
  1127,
  588,
  1546,
  c,
  [1926, 4],
  1549,
  75,
  99,
  1552,
  1551,
  1305,
  c,
  [3390, 3],
  640,
  1554,
  1556,
  1555,
  1558,
  628,
  640,
  1561,
  1562,
  984,
  1568,
  983,
  c,
  [170, 3],
  1570,
  c,
  [78, 3],
  1573,
  c,
  [54, 18],
  1577,
  c,
  [222, 4],
  1582,
  s,
  [1585, 4, 2],
  75,
  99,
  1592,
  1594,
  c,
  [297, 4],
  169,
  1602,
  c,
  [95, 21],
  1603,
  736,
  739,
  1606,
  c,
  [705, 4],
  628,
  640,
  1532,
  1608,
  246,
  1611,
  114,
  1613,
  1615,
  c,
  [4038, 5],
  1619,
  c,
  [637, 10],
  1625,
  1127,
  588,
  1627,
  c,
  [129, 4],
  1628,
  1629,
  1630,
  1273,
  1635,
  1637,
  1638,
  1636,
  100,
  1643,
  c,
  [1992, 57],
  100,
  1644,
  c,
  [59, 57],
  1647,
  246,
  1654,
  1653,
  628,
  640,
  1657,
  c,
  [237, 3],
  1661,
  c,
  [196, 18],
  1662,
  169,
  1666,
  1667,
  151,
  150,
  1671,
  c,
  [25, 18],
  1672,
  1673,
  c,
  [49, 3],
  1674,
  c,
  [766, 19],
  1447,
  1675,
  1676,
  1678,
  1677,
  1679,
  1681,
  1682,
  1683,
  75,
  99,
  1684,
  75,
  99,
  1019,
  1690,
  1689,
  1692,
  c,
  [41, 3],
  1693,
  c,
  [41, 18],
  114,
  1694,
  c,
  [4310, 6],
  c,
  [30, 3],
  1696,
  c,
  [30, 18],
  1697,
  1706,
  s,
  [1702, 4, 1],
  1712,
  1713,
  c,
  [869, 3],
  1717,
  c,
  [129, 22],
  169,
  1718,
  c,
  [469, 22],
  1719,
  1015,
  1069,
  1721,
  1068,
  1070,
  1722,
  628,
  640,
  1731,
  1735,
  1736,
  169,
  1737,
  c,
  [36, 22],
  1738,
  628,
  640,
  1745,
  1744,
  628,
  640,
  1748,
  246,
  1752,
  1753,
  c,
  [681, 5],
  1756,
  c,
  [681, 20],
  s,
  [1758, 4, 1],
  1638,
  1764,
  1766,
  1767,
  1769,
  1768,
  1015,
  1447,
  1771,
  984,
  1772,
  c,
  [886, 3],
  1447,
  1773,
  1775,
  c,
  [45, 3],
  1776,
  c,
  [45, 18],
  1777,
  c,
  [23, 3],
  1778,
  c,
  [23, 18],
  1779,
  1780,
  75,
  99,
  1783,
  75,
  99,
  1785,
  75,
  99,
  1787,
  1789,
  169,
  1791,
  c,
  [198, 22],
  151,
  150,
  1792,
  c,
  [22, 19],
  1794,
  c,
  [244, 23],
  1795,
  c,
  [24, 22],
  1799,
  1800,
  1802,
  1805,
  1804,
  1807,
  628,
  640,
  1810,
  1809,
  1813,
  1812,
  1816,
  1638,
  c,
  [603, 4],
  1821,
  75,
  99,
  1823,
  75,
  99,
  1824,
  75,
  99,
  1825,
  75,
  99,
  1826,
  c,
  [228, 3],
  1828,
  c,
  [57, 22],
  1834,
  1832,
  1831,
  169,
  1835,
  1836,
  151,
  150,
  1837,
  c,
  [457, 20],
  1838,
  1839,
  1840,
  1844,
  1843,
  1015,
  1447,
  1847,
  1015,
  1447,
  1848,
  1851,
  1852,
  1853,
  75,
  99,
  1854,
  1857,
  628,
  640,
  1844,
  1862,
  1015,
  1447,
  1865,
  984,
  1868,
  983,
  191,
  1870,
  169,
  1871,
  c,
  [55, 21],
  1872,
  1876,
  1879,
  1834,
  1882,
  1881,
  246,
  1883,
  1884,
  1887,
  1886,
  1889,
  1890,
  1844,
  1892,
  1893
]),
  mode: u([
  2,
  s,
  [1, 42],
  2,
  c,
  [44, 4],
  s,
  [2, 14],
  c,
  [33, 15],
  c,
  [62, 30],
  s,
  [2, 270],
  c,
  [288, 17],
  c,
  [7, 9],
  c,
  [403, 43],
  c,
  [361, 23],
  c,
  [5, 7],
  c,
  [394, 28],
  c,
  [400, 84],
  c,
  [148, 27],
  c,
  [601, 34],
  c,
  [550, 160],
  s,
  [1, 73],
  c,
  [83, 83],
  s,
  [1, 97],
  c,
  [275, 23],
  c,
  [199, 9],
  c,
  [327, 43],
  c,
  [351, 25],
  c,
  [366, 18],
  s,
  [2, 395],
  s,
  [1, 267],
  c,
  [269, 15],
  c,
  [1781, 125],
  c,
  [1488, 11],
  c,
  [1580, 58],
  c,
  [1454, 19],
  c,
  [980, 16],
  c,
  [104, 9],
  c,
  [1214, 20],
  c,
  [32, 11],
  c,
  [12, 8],
  c,
  [568, 39],
  c,
  [183, 49],
  s,
  [2, 2774],
  c,
  [3986, 74],
  c,
  [360, 287],
  c,
  [4229, 18],
  c,
  [328, 136],
  c,
  [3909, 242],
  c,
  [1910, 1160],
  c,
  [5666, 394],
  c,
  [5889, 238],
  c,
  [91, 20],
  c,
  [5438, 8],
  c,
  [49, 27],
  c,
  [294, 29],
  c,
  [5459, 6],
  c,
  [6504, 31],
  c,
  [35, 9],
  c,
  [34, 57],
  c,
  [298, 33],
  c,
  [98, 71],
  c,
  [5714, 8],
  c,
  [442, 65],
  c,
  [6784, 35],
  c,
  [31, 9],
  c,
  [7345, 36],
  c,
  [6144, 26],
  c,
  [6857, 6],
  c,
  [5955, 5],
  c,
  [6869, 6],
  c,
  [5943, 7],
  c,
  [5921, 12],
  c,
  [147, 15],
  c,
  [7570, 21],
  c,
  [781, 83],
  c,
  [137, 11],
  c,
  [879, 125],
  c,
  [6163, 82],
  c,
  [6315, 18],
  c,
  [6373, 36],
  c,
  [810, 32],
  c,
  [78, 13],
  c,
  [93, 27],
  c,
  [8490, 25],
  c,
  [89, 18],
  c,
  [63, 41],
  c,
  [7478, 40],
  c,
  [7527, 49],
  c,
  [49, 59],
  c,
  [211, 11],
  c,
  [347, 15],
  c,
  [7615, 7],
  c,
  [469, 32],
  c,
  [7638, 402],
  s,
  [2, 47550],
  c,
  [54919, 44],
  c,
  [48218, 11],
  c,
  [51453, 14],
  c,
  [48015, 33],
  c,
  [51310, 200],
  c,
  [290, 6],
  c,
  [48902, 17],
  c,
  [49818, 50],
  c,
  [49124, 10],
  c,
  [12, 6],
  c,
  [48456, 32],
  c,
  [48736, 37],
  c,
  [55102, 10],
  c,
  [55, 14],
  c,
  [61, 22],
  c,
  [48852, 14],
  c,
  [466, 12],
  c,
  [484, 14],
  c,
  [48828, 14],
  c,
  [55750, 269],
  s,
  [1, 536],
  c,
  [805, 35],
  c,
  [34, 16],
  c,
  [51, 204],
  c,
  [351, 147],
  c,
  [743, 343],
  c,
  [2028, 61],
  c,
  [50162, 33],
  c,
  [127, 47],
  c,
  [51002, 9],
  c,
  [1876, 8],
  c,
  [165, 24],
  c,
  [50239, 43],
  c,
  [587, 16],
  c,
  [51029, 55],
  c,
  [57, 11],
  c,
  [154, 6],
  c,
  [50547, 67],
  c,
  [51417, 72],
  c,
  [154, 152],
  c,
  [54209, 97],
  c,
  [154, 299],
  c,
  [55584, 755],
  c,
  [833, 825],
  c,
  [60985, 31],
  c,
  [55806, 230],
  c,
  [1088, 188],
  c,
  [393, 56],
  c,
  [56593, 146],
  c,
  [391, 11],
  c,
  [1488, 300],
  c,
  [701, 161],
  c,
  [54173, 38],
  c,
  [60558, 30],
  c,
  [148, 84],
  c,
  [54852, 44],
  c,
  [33, 88],
  c,
  [55319, 15],
  c,
  [980, 26],
  c,
  [793, 61],
  c,
  [138, 30],
  c,
  [3735, 67],
  c,
  [408, 76],
  c,
  [57697, 234],
  c,
  [56901, 773],
  c,
  [2350, 127],
  c,
  [1134, 92],
  c,
  [55884, 11],
  c,
  [7300, 13],
  c,
  [1671, 24],
  c,
  [63918, 14],
  c,
  [6004, 154],
  c,
  [56529, 21],
  c,
  [232, 19],
  c,
  [63694, 168],
  c,
  [57057, 43],
  c,
  [2201, 6],
  c,
  [318, 13],
  c,
  [455, 12],
  c,
  [56285, 40],
  c,
  [2227, 60],
  c,
  [3511, 11],
  c,
  [4391, 357],
  c,
  [354, 215],
  c,
  [1042, 37],
  c,
  [719, 25],
  c,
  [64443, 19],
  c,
  [8582, 26],
  c,
  [5961, 130],
  c,
  [63787, 58],
  c,
  [8671, 21],
  c,
  [493, 17],
  c,
  [3928, 16],
  c,
  [57508, 18],
  c,
  [6338, 154],
  c,
  [6498, 317],
  c,
  [58883, 63],
  c,
  [227, 13],
  c,
  [65575, 24],
  c,
  [102, 30],
  c,
  [7206, 38],
  c,
  [7514, 64],
  c,
  [64487, 18],
  c,
  [554, 207],
  c,
  [308, 154],
  c,
  [154, 86],
  c,
  [10012, 7],
  c,
  [154, 215],
  c,
  [5038, 158],
  c,
  [8284, 304],
  c,
  [8649, 14],
  c,
  [539, 70],
  c,
  [154, 382],
  c,
  [2020, 80],
  c,
  [770, 110],
  c,
  [1540, 50],
  c,
  [154, 517],
  c,
  [6869, 302],
  c,
  [3959, 208],
  c,
  [510, 510],
  c,
  [62216, 20],
  c,
  [2868, 72],
  c,
  [4539, 9],
  c,
  [620, 61],
  c,
  [154, 454],
  c,
  [5064, 8],
  c,
  [11611, 10],
  c,
  [61888, 15],
  c,
  [240, 57],
  c,
  [698, 608],
  c,
  [154, 146],
  c,
  [14296, 20],
  c,
  [12470, 29],
  c,
  [5069, 13],
  c,
  [12470, 110],
  c,
  [154, 38],
  c,
  [5788, 10],
  c,
  [154, 54],
  c,
  [1899, 38],
  c,
  [66076, 667],
  c,
  [631, 183],
  c,
  [1144, 192],
  c,
  [13768, 118],
  c,
  [1610, 102],
  c,
  [68848, 858],
  c,
  [2115, 509],
  c,
  [66443, 43],
  c,
  [9842, 128],
  c,
  [67492, 380],
  c,
  [1266, 237],
  c,
  [67147, 10],
  c,
  [451, 99],
  c,
  [120, 68],
  c,
  [10934, 52],
  c,
  [15705, 368],
  c,
  [75327, 11],
  c,
  [11468, 30],
  c,
  [5907, 100],
  c,
  [7759, 59],
  c,
  [66, 40],
  c,
  [1279, 340],
  c,
  [11856, 50],
  c,
  [13778, 88],
  c,
  [3567, 55],
  c,
  [19457, 34],
  c,
  [93, 82],
  c,
  [1942, 110],
  c,
  [76744, 31],
  c,
  [13597, 438],
  c,
  [3375, 443],
  c,
  [385, 377],
  c,
  [1221, 172],
  c,
  [12193, 16],
  c,
  [11825, 14],
  c,
  [15406, 10],
  c,
  [1654, 17],
  c,
  [124, 18],
  c,
  [69924, 43],
  c,
  [7211, 169],
  c,
  [70045, 46],
  c,
  [446, 59],
  c,
  [554, 108],
  c,
  [265, 21],
  c,
  [21, 40],
  c,
  [1548, 253],
  c,
  [13187, 10],
  c,
  [5199, 395],
  c,
  [20838, 246],
  c,
  [71648, 12],
  c,
  [590, 25],
  c,
  [70949, 10],
  c,
  [78630, 37],
  c,
  [9137, 49],
  c,
  [18439, 45],
  c,
  [3975, 31],
  c,
  [784, 145],
  c,
  [71304, 10],
  c,
  [4059, 60],
  c,
  [999, 167],
  c,
  [10976, 165],
  c,
  [5325, 49],
  c,
  [71962, 50],
  c,
  [16156, 69],
  c,
  [75052, 318],
  c,
  [17687, 492],
  c,
  [13212, 71],
  c,
  [543, 390],
  c,
  [1108, 173],
  c,
  [1506, 118],
  c,
  [8840, 484],
  c,
  [12045, 19],
  c,
  [507, 45],
  c,
  [7605, 56],
  c,
  [13954, 21],
  c,
  [18328, 40],
  c,
  [6107, 42],
  c,
  [43, 26],
  c,
  [2799, 13],
  c,
  [20056, 18],
  c,
  [784, 48],
  c,
  [32, 27],
  c,
  [4501, 43],
  c,
  [6714, 133],
  c,
  [6466, 118],
  c,
  [6593, 142],
  c,
  [3243, 148],
  c,
  [25009, 257],
  c,
  [1800, 58],
  c,
  [378, 269],
  c,
  [211, 113],
  c,
  [3803, 45],
  c,
  [83, 80],
  c,
  [9918, 206],
  c,
  [12984, 25],
  c,
  [19306, 189],
  c,
  [830, 228],
  c,
  [251, 58],
  c,
  [3245, 38],
  c,
  [5538, 65],
  c,
  [59, 63],
  c,
  [6781, 93],
  c,
  [738, 29],
  c,
  [18603, 240],
  c,
  [19065, 156],
  c,
  [10249, 209],
  c,
  [6881, 346],
  c,
  [4789, 394],
  c,
  [4875, 156],
  c,
  [13629, 550],
  c,
  [2646, 114],
  c,
  [15180, 42],
  c,
  [12510, 63],
  c,
  [15959, 113],
  c,
  [2577, 60],
  c,
  [80384, 69],
  c,
  [12146, 77],
  c,
  [264, 38],
  c,
  [26, 35],
  c,
  [1721, 103],
  c,
  [603, 35],
  c,
  [30934, 13],
  c,
  [1881, 142],
  c,
  [15369, 503],
  c,
  [503, 138],
  c,
  [138, 414],
  c,
  [6259, 83],
  c,
  [480, 461],
  c,
  [20453, 349],
  c,
  [51, 41],
  c,
  [81827, 54],
  c,
  [6040, 19],
  c,
  [82038, 26],
  c,
  [5119, 53],
  c,
  [82040, 43],
  c,
  [81774, 13],
  c,
  [12323, 16],
  c,
  [31979, 247],
  c,
  [2976, 58],
  c,
  [26078, 13],
  c,
  [18143, 11],
  c,
  [3138, 52],
  c,
  [8165, 23],
  c,
  [6363, 14],
  c,
  [15109, 54],
  c,
  [5445, 44],
  c,
  [589, 41],
  c,
  [35496, 1096],
  c,
  [10039, 468],
  c,
  [2631, 160],
  c,
  [167, 43],
  c,
  [5266, 45],
  c,
  [16304, 59],
  c,
  [36221, 18],
  c,
  [2613, 14],
  c,
  [28221, 13],
  c,
  [7740, 59],
  c,
  [31137, 113],
  c,
  [366, 36],
  c,
  [30325, 29],
  c,
  [18879, 10],
  c,
  [85561, 33],
  c,
  [30397, 46],
  c,
  [8252, 37],
  c,
  [22014, 53],
  c,
  [8342, 46],
  c,
  [23822, 201],
  c,
  [2783, 12],
  c,
  [9876, 122],
  c,
  [36619, 21],
  c,
  [3455, 38],
  c,
  [17450, 22],
  c,
  [27454, 26],
  c,
  [2826, 21],
  c,
  [5977, 39],
  c,
  [10077, 229],
  c,
  [36991, 15],
  c,
  [3390, 15],
  c,
  [37166, 9],
  c,
  [86682, 20],
  c,
  [6386, 22],
  c,
  [27875, 49],
  c,
  [37676, 49],
  c,
  [97, 77],
  c,
  [6609, 19],
  c,
  [93379, 24],
  c,
  [14954, 102],
  c,
  [11257, 85],
  c,
  [996, 80],
  c,
  [20399, 10],
  c,
  [32212, 119],
  c,
  [32, 35],
  c,
  [1868, 98],
  c,
  [32203, 63],
  c,
  [5375, 126],
  c,
  [1304, 20],
  c,
  [1712, 99],
  c,
  [89728, 917],
  c,
  [5401, 26],
  c,
  [3282, 22],
  c,
  [3978, 492],
  c,
  [14754, 396],
  c,
  [32663, 16],
  c,
  [430, 52],
  c,
  [2167, 10],
  c,
  [21974, 53],
  c,
  [40152, 29],
  c,
  [17701, 10],
  c,
  [4375, 43],
  c,
  [26847, 10],
  c,
  [3732, 14],
  c,
  [2567, 22],
  c,
  [31898, 56],
  c,
  [21317, 114],
  c,
  [5490, 98],
  c,
  [2417, 79],
  c,
  [1030, 103],
  c,
  [2980, 18],
  c,
  [240, 42],
  c,
  [764, 19],
  c,
  [11123, 169],
  c,
  [12625, 11],
  c,
  [4873, 17],
  c,
  [10754, 118],
  c,
  [90782, 22],
  c,
  [401, 27],
  c,
  [14738, 207],
  c,
  [5118, 41],
  c,
  [1157, 18],
  c,
  [283, 55],
  c,
  [1519, 51],
  c,
  [1340, 10],
  c,
  [18962, 19],
  c,
  [5847, 14],
  c,
  [142, 55],
  c,
  [187, 52],
  c,
  [64, 14],
  c,
  [279, 19],
  c,
  [5008, 25],
  c,
  [1563, 22],
  c,
  [20458, 74],
  c,
  [5770, 21],
  c,
  [2208, 107],
  c,
  [4489, 33],
  c,
  [2602, 69],
  c,
  [20852, 8],
  c,
  [32907, 22],
  c,
  [1608, 40],
  c,
  [2439, 63],
  c,
  [1950, 20],
  c,
  [8564, 15],
  c,
  [2563, 100],
  c,
  [9065, 26],
  c,
  [2935, 54],
  c,
  [2775, 76],
  c,
  [19846, 31],
  c,
  [6419, 25],
  c,
  [5840, 23],
  c,
  [3168, 75],
  c,
  [24102, 17],
  c,
  [11, 20],
  c,
  [143, 19]
]),
  goto: u([
  13,
  104,
  102,
  103,
  6,
  42,
  79,
  76,
  94,
  93,
  69,
  101,
  85,
  64,
  71,
  84,
  66,
  70,
  68,
  61,
  74,
  62,
  67,
  83,
  77,
  86,
  87,
  81,
  82,
  80,
  s,
  [88, 5, 1],
  98,
  65,
  78,
  72,
  96,
  97,
  63,
  73,
  13,
  13,
  105,
  108,
  107,
  s,
  [8, 4],
  s,
  [9, 4],
  s,
  [12, 5],
  c,
  [61, 4],
  110,
  c,
  [61, 10],
  13,
  c,
  [62, 30],
  s,
  [14, 5],
  s,
  [15, 5],
  s,
  [16, 5],
  s,
  [17, 5],
  s,
  [18, 5],
  s,
  [19, 5],
  s,
  [20, 5],
  s,
  [21, 5],
  s,
  [22, 5],
  s,
  [23, 5],
  s,
  [24, 5],
  s,
  [25, 5],
  s,
  [26, 5],
  s,
  [27, 5],
  s,
  [28, 5],
  s,
  [29, 5],
  s,
  [30, 5],
  s,
  [31, 5],
  s,
  [32, 5],
  s,
  [33, 5],
  s,
  [34, 5],
  s,
  [35, 5],
  s,
  [36, 5],
  s,
  [37, 5],
  s,
  [38, 5],
  s,
  [39, 5],
  s,
  [40, 5],
  s,
  [41, 5],
  s,
  [42, 5],
  s,
  [43, 5],
  s,
  [44, 5],
  s,
  [45, 5],
  s,
  [46, 5],
  s,
  [47, 5],
  s,
  [48, 5],
  s,
  [49, 5],
  s,
  [50, 5],
  s,
  [51, 5],
  s,
  [52, 5],
  s,
  [53, 5],
  s,
  [54, 5],
  s,
  [55, 5],
  s,
  [56, 5],
  s,
  [57, 5],
  s,
  [58, 5],
  s,
  [59, 5],
  s,
  [60, 5],
  s,
  [61, 5],
  s,
  [62, 5],
  s,
  [63, 5],
  s,
  [64, 5],
  s,
  [65, 5],
  s,
  [66, 5],
  s,
  [67, 5],
  111,
  c,
  [316, 3],
  c,
  [3, 3],
  s,
  [115, 6, 1],
  c,
  [9, 3],
  506,
  128,
  127,
  124,
  123,
  130,
  131,
  506,
  132,
  121,
  506,
  125,
  129,
  135,
  136,
  137,
  c,
  [19, 3],
  145,
  140,
  144,
  138,
  142,
  143,
  c,
  [9, 3],
  165,
  176,
  179,
  174,
  182,
  186,
  161,
  183,
  170,
  115,
  172,
  175,
  184,
  201,
  202,
  167,
  85,
  194,
  189,
  190,
  s,
  [195, 6, 1],
  203,
  204,
  c,
  [64, 5],
  177,
  178,
  180,
  181,
  187,
  193,
  185,
  188,
  173,
  171,
  192,
  205,
  s,
  [476, 3],
  207,
  208,
  s,
  [476, 3],
  208,
  c,
  [57, 3],
  213,
  222,
  182,
  186,
  183,
  115,
  184,
  212,
  218,
  c,
  [38, 5],
  185,
  192,
  205,
  c,
  [20, 3],
  224,
  s,
  [1048, 5],
  227,
  s,
  [1048, 14],
  s,
  [1052, 69],
  c,
  [93, 3],
  230,
  233,
  229,
  234,
  231,
  235,
  c,
  [219, 6],
  c,
  [599, 11],
  c,
  [538, 14],
  239,
  c,
  [539, 17],
  241,
  242,
  c,
  [48, 3],
  243,
  c,
  [4, 3],
  s,
  [314, 154],
  179,
  180,
  c,
  [159, 3],
  176,
  250,
  182,
  251,
  c,
  [336, 3],
  258,
  c,
  [373, 9],
  c,
  [339, 6],
  c,
  [416, 45],
  s,
  [677, 5],
  s,
  [678, 5],
  c,
  [58, 4],
  76,
  c,
  [59, 12],
  101,
  c,
  [60, 32],
  c,
  [50, 3],
  179,
  180,
  267,
  c,
  [6, 3],
  272,
  271,
  c,
  [119, 48],
  274,
  c,
  [624, 15],
  c,
  [61, 45],
  s,
  [162, 22],
  281,
  s,
  [162, 6],
  279,
  280,
  283,
  s,
  [162, 40],
  762,
  762,
  284,
  s,
  [762, 6],
  s,
  [152, 17],
  285,
  286,
  s,
  [152, 13],
  s,
  [287, 5, 1],
  s,
  [152, 41],
  s,
  [1, 177],
  s,
  [2, 177],
  293,
  314,
  381,
  405,
  417,
  452,
  521,
  441,
  464,
  440,
  375,
  409,
  413,
  406,
  297,
  299,
  551,
  473,
  445,
  511,
  444,
  527,
  344,
  420,
  450,
  343,
  309,
  301,
  401,
  294,
  295,
  s,
  [296, 4, 2],
  s,
  [303, 6, 1],
  s,
  [310, 4, 1],
  s,
  [315, 28, 1],
  s,
  [345, 30, 1],
  s,
  [376, 5, 1],
  s,
  [382, 19, 1],
  402,
  403,
  404,
  407,
  408,
  410,
  411,
  412,
  414,
  415,
  416,
  418,
  419,
  s,
  [421, 19, 1],
  442,
  443,
  s,
  [446, 4, 1],
  451,
  s,
  [453, 11, 1],
  s,
  [465, 8, 1],
  s,
  [474, 37, 1],
  s,
  [512, 9, 1],
  s,
  [522, 5, 1],
  s,
  [528, 23, 1],
  s,
  [552, 8, 1],
  6,
  c,
  [1782, 4],
  c,
  [1781, 41],
  s,
  [1046, 45],
  s,
  [1047, 45],
  s,
  [10, 4],
  561,
  c,
  [139, 3],
  563,
  s,
  [765, 5],
  s,
  [564, 6, 1],
  c,
  [984, 48],
  s,
  [508, 3],
  572,
  573,
  c,
  [53, 3],
  575,
  c,
  [4, 3],
  583,
  586,
  272,
  271,
  587,
  577,
  592,
  591,
  590,
  179,
  1146,
  180,
  1140,
  c,
  [16, 3],
  s,
  [1140, 12],
  c,
  [15, 3],
  598,
  599,
  s,
  [507, 3],
  691,
  600,
  s,
  [691, 4],
  s,
  [692, 6],
  c,
  [1104, 6],
  c,
  [3, 3],
  s,
  [572, 3],
  605,
  606,
  c,
  [8, 7],
  c,
  [4, 4],
  c,
  [11, 3],
  s,
  [1134, 4],
  s,
  [1135, 4],
  c,
  [299, 7],
  643,
  615,
  649,
  650,
  623,
  634,
  621,
  629,
  622,
  630,
  632,
  624,
  625,
  93,
  644,
  69,
  641,
  642,
  618,
  620,
  c,
  [316, 5],
  13,
  612,
  613,
  614,
  616,
  617,
  619,
  626,
  627,
  631,
  633,
  s,
  [635, 5, 1],
  s,
  [645, 4, 1],
  c,
  [336, 30],
  s,
  [291, 154],
  s,
  [292, 154],
  s,
  [293, 154],
  s,
  [294, 154],
  s,
  [295, 154],
  s,
  [296, 154],
  s,
  [297, 154],
  s,
  [298, 154],
  s,
  [299, 154],
  s,
  [300, 154],
  s,
  [301, 154],
  s,
  [302, 154],
  s,
  [303, 154],
  s,
  [304, 154],
  s,
  [305, 154],
  s,
  [306, 154],
  s,
  [307, 154],
  s,
  [308, 154],
  c,
  [4104, 22],
  658,
  c,
  [3001, 11],
  655,
  c,
  [3001, 14],
  70,
  192,
  205,
  s,
  [312, 154],
  s,
  [313, 154],
  659,
  s,
  [290, 8],
  564,
  s,
  [290, 9],
  660,
  s,
  [290, 135],
  c,
  [3513, 48],
  c,
  [48, 192],
  s,
  [286, 154],
  s,
  [361, 182],
  s,
  [362, 164],
  s,
  [363, 164],
  s,
  [364, 164],
  s,
  [365, 164],
  s,
  [366, 163],
  c,
  [1203, 3],
  668,
  c,
  [4, 3],
  s,
  [372, 164],
  s,
  [373, 164],
  c,
  [331, 3],
  671,
  176,
  179,
  182,
  183,
  184,
  c,
  [1511, 3],
  185,
  205,
  677,
  c,
  [1553, 44],
  681,
  c,
  [1554, 4],
  682,
  683,
  s,
  [629, 157],
  c,
  [208, 3],
  697,
  c,
  [223, 3],
  c,
  [6654, 4],
  c,
  [188, 9],
  686,
  c,
  [6654, 51],
  c,
  [6531, 9],
  s,
  [339, 10, 1],
  c,
  [19, 3],
  706,
  705,
  703,
  c,
  [6, 3],
  709,
  s,
  [477, 3],
  c,
  [7, 3],
  712,
  700,
  c,
  [7098, 10],
  c,
  [7097, 9],
  76,
  101,
  s,
  [1096, 6],
  716,
  s,
  [1096, 27],
  185,
  c,
  [56, 3],
  185,
  185,
  718,
  s,
  [185, 5],
  719,
  s,
  [185, 22],
  189,
  c,
  [35, 3],
  189,
  189,
  721,
  s,
  [189, 27],
  190,
  c,
  [34, 3],
  190,
  190,
  723,
  s,
  [190, 27],
  s,
  [193, 30],
  194,
  c,
  [64, 3],
  194,
  194,
  725,
  s,
  [194, 27],
  197,
  c,
  [34, 3],
  197,
  197,
  727,
  s,
  [197, 27],
  s,
  [202, 7],
  564,
  s,
  [202, 3],
  728,
  s,
  [202, 26],
  s,
  [200, 34],
  s,
  [778, 5],
  c,
  [110, 3],
  s,
  [163, 11],
  731,
  s,
  [163, 7],
  s,
  [1049, 19],
  s,
  [1062, 4],
  733,
  163,
  c,
  [47, 3],
  744,
  763,
  743,
  163,
  742,
  649,
  650,
  737,
  738,
  740,
  741,
  s,
  [745, 16, 1],
  762,
  s,
  [764, 7, 1],
  s,
  [773, 10, 1],
  163,
  783,
  784,
  731,
  201,
  202,
  c,
  [496, 8],
  163,
  163,
  192,
  205,
  163,
  163,
  785,
  786,
  599,
  787,
  s,
  [599, 4],
  788,
  789,
  603,
  790,
  791,
  s,
  [603, 4],
  c,
  [85, 3],
  794,
  76,
  101,
  s,
  [70, 3],
  795,
  s,
  [672, 5],
  796,
  108,
  107,
  s,
  [670, 5],
  s,
  [671, 5],
  c,
  [28, 3],
  s,
  [592, 5],
  798,
  s,
  [202, 12],
  c,
  [247, 27],
  s,
  [202, 40],
  s,
  [620, 5],
  s,
  [621, 5],
  s,
  [622, 5],
  364,
  799,
  s,
  [364, 4],
  c,
  [931, 11],
  s,
  [323, 17],
  s,
  [324, 17],
  s,
  [325, 17],
  s,
  [326, 17],
  s,
  [327, 17],
  s,
  [328, 17],
  s,
  [329, 17],
  c,
  [6163, 82],
  680,
  801,
  s,
  [680, 4],
  s,
  [681, 5],
  s,
  [359, 3],
  c,
  [89, 5],
  802,
  c,
  [89, 7],
  644,
  c,
  [87, 4],
  s,
  [359, 3],
  c,
  [84, 19],
  359,
  359,
  682,
  803,
  s,
  [682, 4],
  683,
  804,
  s,
  [683, 4],
  s,
  [688, 6],
  s,
  [690, 6],
  s,
  [684, 6],
  s,
  [685, 6],
  649,
  650,
  805,
  808,
  809,
  c,
  [178, 3],
  s,
  [661, 3],
  s,
  [662, 3],
  619,
  c,
  [93, 18],
  619,
  619,
  c,
  [92, 19],
  619,
  619,
  c,
  [51, 3],
  759,
  813,
  s,
  [759, 4],
  s,
  [761, 7],
  s,
  [764, 5],
  686,
  c,
  [63, 18],
  686,
  686,
  c,
  [63, 19],
  686,
  686,
  s,
  [162, 16],
  c,
  [7521, 41],
  c,
  [49, 90],
  1092,
  c,
  [211, 3],
  1092,
  165,
  s,
  [1092, 6],
  c,
  [1265, 9],
  s,
  [1092, 3],
  c,
  [1268, 3],
  s,
  [1092, 3],
  201,
  202,
  1092,
  1092,
  c,
  [1273, 26],
  1092,
  1092,
  c,
  [1275, 4],
  1092,
  1092,
  822,
  176,
  c,
  [69, 3],
  s,
  [153, 72],
  s,
  [154, 72],
  s,
  [155, 72],
  s,
  [156, 72],
  s,
  [157, 72],
  s,
  [158, 72],
  s,
  [159, 72],
  s,
  [3, 177],
  s,
  [779, 177],
  s,
  [780, 177],
  s,
  [781, 177],
  s,
  [782, 177],
  s,
  [783, 177],
  s,
  [784, 177],
  s,
  [785, 177],
  s,
  [786, 177],
  s,
  [787, 177],
  s,
  [788, 177],
  s,
  [789, 177],
  s,
  [790, 177],
  s,
  [791, 177],
  s,
  [792, 177],
  s,
  [793, 177],
  s,
  [794, 177],
  s,
  [795, 177],
  s,
  [796, 177],
  s,
  [797, 177],
  s,
  [798, 177],
  s,
  [799, 177],
  s,
  [800, 177],
  s,
  [801, 177],
  s,
  [802, 177],
  s,
  [803, 177],
  s,
  [804, 177],
  s,
  [805, 177],
  s,
  [806, 177],
  s,
  [807, 177],
  s,
  [808, 177],
  s,
  [809, 177],
  s,
  [810, 177],
  s,
  [811, 177],
  s,
  [812, 177],
  s,
  [813, 177],
  s,
  [814, 177],
  s,
  [815, 177],
  s,
  [816, 177],
  s,
  [817, 177],
  s,
  [818, 177],
  s,
  [819, 177],
  s,
  [820, 177],
  s,
  [821, 177],
  s,
  [822, 177],
  s,
  [823, 177],
  s,
  [824, 177],
  s,
  [825, 177],
  s,
  [826, 177],
  s,
  [827, 177],
  s,
  [828, 177],
  s,
  [829, 177],
  s,
  [830, 177],
  s,
  [831, 177],
  s,
  [832, 177],
  s,
  [833, 177],
  s,
  [834, 177],
  s,
  [835, 177],
  s,
  [836, 177],
  s,
  [837, 177],
  s,
  [838, 177],
  s,
  [839, 177],
  s,
  [840, 177],
  s,
  [841, 177],
  s,
  [842, 177],
  s,
  [843, 177],
  s,
  [844, 177],
  s,
  [845, 177],
  s,
  [846, 177],
  s,
  [847, 177],
  s,
  [848, 177],
  s,
  [849, 177],
  s,
  [850, 177],
  s,
  [851, 177],
  s,
  [852, 177],
  s,
  [853, 177],
  s,
  [854, 177],
  s,
  [855, 177],
  s,
  [856, 177],
  s,
  [857, 177],
  s,
  [858, 177],
  s,
  [859, 177],
  s,
  [860, 177],
  s,
  [861, 177],
  s,
  [862, 177],
  s,
  [863, 177],
  s,
  [864, 177],
  s,
  [865, 177],
  s,
  [866, 177],
  s,
  [867, 177],
  s,
  [868, 177],
  s,
  [869, 177],
  s,
  [870, 177],
  s,
  [871, 177],
  s,
  [872, 177],
  s,
  [873, 177],
  s,
  [874, 177],
  s,
  [875, 177],
  s,
  [876, 177],
  s,
  [877, 177],
  s,
  [878, 177],
  s,
  [879, 177],
  s,
  [880, 177],
  s,
  [881, 177],
  s,
  [882, 177],
  s,
  [883, 177],
  s,
  [884, 177],
  s,
  [885, 177],
  s,
  [886, 177],
  s,
  [887, 177],
  s,
  [888, 177],
  s,
  [889, 177],
  s,
  [890, 177],
  s,
  [891, 177],
  s,
  [892, 177],
  s,
  [893, 177],
  s,
  [894, 177],
  s,
  [895, 177],
  s,
  [896, 177],
  s,
  [897, 177],
  s,
  [898, 177],
  s,
  [899, 177],
  s,
  [900, 177],
  s,
  [901, 177],
  s,
  [902, 177],
  s,
  [903, 177],
  s,
  [904, 177],
  s,
  [905, 177],
  s,
  [906, 177],
  s,
  [907, 177],
  s,
  [908, 177],
  s,
  [909, 177],
  s,
  [910, 177],
  s,
  [911, 177],
  s,
  [912, 177],
  s,
  [913, 177],
  s,
  [914, 177],
  s,
  [915, 177],
  s,
  [916, 177],
  s,
  [917, 177],
  s,
  [918, 177],
  s,
  [919, 177],
  s,
  [920, 177],
  s,
  [921, 177],
  s,
  [922, 177],
  s,
  [923, 177],
  s,
  [924, 177],
  s,
  [925, 177],
  s,
  [926, 177],
  s,
  [927, 177],
  s,
  [928, 177],
  s,
  [929, 177],
  s,
  [930, 177],
  s,
  [931, 177],
  s,
  [932, 177],
  s,
  [933, 177],
  s,
  [934, 177],
  s,
  [935, 177],
  s,
  [936, 177],
  s,
  [937, 177],
  s,
  [938, 177],
  s,
  [939, 177],
  s,
  [940, 177],
  s,
  [941, 177],
  s,
  [942, 177],
  s,
  [943, 177],
  s,
  [944, 177],
  s,
  [945, 177],
  s,
  [946, 177],
  s,
  [947, 177],
  s,
  [948, 177],
  s,
  [949, 177],
  s,
  [950, 177],
  s,
  [951, 177],
  s,
  [952, 177],
  s,
  [953, 177],
  s,
  [954, 177],
  s,
  [955, 177],
  s,
  [956, 177],
  s,
  [957, 177],
  s,
  [958, 177],
  s,
  [959, 177],
  s,
  [960, 177],
  s,
  [961, 177],
  s,
  [962, 177],
  s,
  [963, 177],
  s,
  [964, 177],
  s,
  [965, 177],
  s,
  [966, 177],
  s,
  [967, 177],
  s,
  [968, 177],
  s,
  [969, 177],
  s,
  [970, 177],
  s,
  [971, 177],
  s,
  [972, 177],
  s,
  [973, 177],
  s,
  [974, 177],
  s,
  [975, 177],
  s,
  [976, 177],
  s,
  [977, 177],
  s,
  [978, 177],
  s,
  [979, 177],
  s,
  [980, 177],
  s,
  [981, 177],
  s,
  [982, 177],
  s,
  [983, 177],
  s,
  [984, 177],
  s,
  [985, 177],
  s,
  [986, 177],
  s,
  [987, 177],
  s,
  [988, 177],
  s,
  [989, 177],
  s,
  [990, 177],
  s,
  [991, 177],
  s,
  [992, 177],
  s,
  [993, 177],
  s,
  [994, 177],
  s,
  [995, 177],
  s,
  [996, 177],
  s,
  [997, 177],
  s,
  [998, 177],
  s,
  [999, 177],
  s,
  [1000, 177],
  s,
  [1001, 177],
  s,
  [1002, 177],
  s,
  [1003, 177],
  s,
  [1004, 177],
  s,
  [1005, 177],
  s,
  [1006, 177],
  s,
  [1007, 177],
  s,
  [1008, 177],
  s,
  [1009, 177],
  s,
  [1010, 177],
  s,
  [1011, 177],
  s,
  [1012, 177],
  s,
  [1013, 177],
  s,
  [1014, 177],
  s,
  [1015, 177],
  s,
  [1016, 177],
  s,
  [1017, 177],
  s,
  [1018, 177],
  s,
  [1019, 177],
  s,
  [1020, 177],
  s,
  [1021, 177],
  s,
  [1022, 177],
  s,
  [1023, 177],
  s,
  [1024, 177],
  s,
  [1025, 177],
  s,
  [1026, 177],
  s,
  [1027, 177],
  s,
  [1028, 177],
  s,
  [1029, 177],
  s,
  [1030, 177],
  s,
  [1031, 177],
  s,
  [1032, 177],
  s,
  [1033, 177],
  s,
  [1034, 177],
  s,
  [1035, 177],
  s,
  [1036, 177],
  s,
  [1037, 177],
  s,
  [1038, 177],
  s,
  [1039, 177],
  s,
  [1040, 177],
  s,
  [1041, 177],
  s,
  [1042, 177],
  s,
  [1043, 177],
  s,
  [1044, 177],
  s,
  [1045, 177],
  s,
  [7, 4],
  c,
  [54919, 45],
  828,
  825,
  826,
  827,
  c,
  [48, 3],
  s,
  [1116, 4],
  831,
  s,
  [1116, 9],
  834,
  s,
  [1116, 3],
  833,
  s,
  [1116, 32],
  c,
  [51258, 99],
  838,
  c,
  [4, 3],
  840,
  c,
  [56, 51],
  c,
  [48463, 18],
  c,
  [48461, 19],
  c,
  [40, 3],
  844,
  s,
  [508, 4],
  572,
  508,
  846,
  c,
  [11, 3],
  734,
  848,
  s,
  [734, 4],
  c,
  [108, 48],
  s,
  [737, 7],
  s,
  [1148, 4],
  743,
  743,
  251,
  1148,
  1148,
  192,
  205,
  1148,
  1148,
  852,
  853,
  s,
  [1166, 3],
  854,
  1166,
  1166,
  586,
  s,
  [1166, 10],
  s,
  [1172, 4],
  858,
  s,
  [1172, 10],
  s,
  [1176, 7],
  587,
  s,
  [1176, 6],
  s,
  [752, 13],
  s,
  [744, 9],
  c,
  [138, 3],
  862,
  c,
  [55110, 6],
  c,
  [163, 5],
  c,
  [4, 3],
  s,
  [496, 4],
  s,
  [497, 4],
  867,
  1147,
  s,
  [1142, 4],
  870,
  s,
  [1142, 8],
  s,
  [1141, 13],
  873,
  872,
  s,
  [769, 3],
  s,
  [874, 5, 1],
  135,
  885,
  881,
  884,
  461,
  886,
  s,
  [461, 4],
  s,
  [584, 5],
  c,
  [72, 3],
  888,
  s,
  [572, 4],
  605,
  572,
  s,
  [598, 5],
  c,
  [90, 6],
  s,
  [777, 5],
  674,
  674,
  894,
  674,
  674,
  c,
  [51814, 240],
  c,
  [48, 531],
  913,
  176,
  c,
  [57090, 9],
  917,
  c,
  [11, 10],
  c,
  [70, 10],
  445,
  445,
  c,
  [72, 33],
  445,
  c,
  [121, 15],
  446,
  446,
  c,
  [51, 33],
  446,
  c,
  [51, 15],
  447,
  447,
  c,
  [51, 33],
  447,
  c,
  [51, 15],
  448,
  448,
  c,
  [51, 33],
  448,
  c,
  [51, 15],
  449,
  449,
  c,
  [51, 33],
  449,
  c,
  [421, 111],
  450,
  450,
  c,
  [50, 33],
  450,
  c,
  [147, 98],
  930,
  932,
  931,
  c,
  [246, 99],
  935,
  940,
  c,
  [608, 6],
  941,
  942,
  c,
  [776, 144],
  885,
  884,
  s,
  [88, 11],
  s,
  [89, 11],
  s,
  [947, 4, 1],
  c,
  [1877, 37],
  s,
  [476, 3],
  566,
  208,
  1112,
  1113,
  128,
  127,
  c,
  [122, 13],
  953,
  c,
  [123, 3],
  952,
  c,
  [172, 35],
  955,
  956,
  s,
  [421, 16],
  c,
  [116, 3],
  421,
  421,
  623,
  802,
  s,
  [421, 5],
  621,
  421,
  421,
  629,
  421,
  c,
  [126, 5],
  s,
  [421, 19],
  618,
  620,
  s,
  [421, 41],
  c,
  [183, 3],
  421,
  c,
  [184, 12],
  421,
  421,
  647,
  s,
  [421, 35],
  s,
  [422, 17],
  649,
  650,
  422,
  422,
  623,
  s,
  [422, 6],
  621,
  422,
  422,
  629,
  422,
  622,
  s,
  [422, 24],
  620,
  s,
  [422, 42],
  613,
  s,
  [422, 3],
  617,
  s,
  [422, 48],
  s,
  [423, 17],
  649,
  650,
  423,
  423,
  623,
  s,
  [423, 6],
  621,
  423,
  423,
  629,
  423,
  622,
  s,
  [423, 24],
  620,
  s,
  [423, 42],
  613,
  s,
  [423, 3],
  617,
  s,
  [423, 48],
  s,
  [424, 105],
  617,
  s,
  [424, 48],
  s,
  [425, 105],
  617,
  s,
  [425, 48],
  s,
  [370, 164],
  s,
  [1118, 164],
  s,
  [1119, 164],
  s,
  [371, 164],
  s,
  [367, 156],
  c,
  [1759, 48],
  s,
  [625, 157],
  s,
  [626, 157],
  s,
  [627, 157],
  s,
  [628, 157],
  s,
  [630, 157],
  76,
  101,
  c,
  [2518, 18],
  681,
  c,
  [2519, 19],
  380,
  681,
  962,
  s,
  [377, 3],
  c,
  [2686, 98],
  s,
  [631, 157],
  967,
  966,
  s,
  [647, 157],
  654,
  654,
  s,
  [632, 3],
  s,
  [633, 3],
  s,
  [634, 3],
  s,
  [635, 3],
  s,
  [636, 3],
  s,
  [637, 3],
  s,
  [638, 3],
  s,
  [639, 3],
  s,
  [640, 3],
  c,
  [395, 48],
  c,
  [56593, 18],
  969,
  s,
  [290, 136],
  801,
  970,
  s,
  [317, 8],
  564,
  s,
  [317, 145],
  s,
  [318, 154],
  972,
  971,
  s,
  [644, 157],
  649,
  649,
  973,
  974,
  975,
  979,
  76,
  182,
  251,
  982,
  183,
  184,
  101,
  185,
  978,
  981,
  c,
  [62126, 5],
  208,
  988,
  c,
  [16, 5],
  185,
  c,
  [14, 3],
  990,
  c,
  [55034, 19],
  701,
  992,
  1098,
  c,
  [22, 3],
  s,
  [1098, 29],
  s,
  [1097, 33],
  s,
  [183, 30],
  c,
  [95, 3],
  996,
  s,
  [187, 30],
  c,
  [34, 3],
  s,
  [191, 30],
  c,
  [33, 3],
  s,
  [195, 30],
  c,
  [33, 3],
  s,
  [198, 30],
  c,
  [5548, 6],
  1002,
  s,
  [172, 10],
  1004,
  s,
  [172, 7],
  c,
  [22, 3],
  1009,
  182,
  1010,
  c,
  [55416, 8],
  c,
  [55268, 4],
  1014,
  s,
  [1063, 4],
  s,
  [1054, 3],
  1018,
  s,
  [1054, 4],
  s,
  [1053, 49],
  1020,
  1021,
  1022,
  s,
  [1053, 20],
  s,
  [90, 7],
  1023,
  s,
  [90, 65],
  1024,
  s,
  [93, 73],
  c,
  [235, 3],
  s,
  [95, 73],
  c,
  [4483, 99],
  c,
  [55351, 3],
  c,
  [55350, 41],
  783,
  784,
  c,
  [55348, 10],
  192,
  205,
  s,
  [1030, 4, 1],
  s,
  [104, 73],
  s,
  [105, 73],
  s,
  [106, 73],
  s,
  [107, 73],
  s,
  [108, 73],
  s,
  [109, 73],
  c,
  [950, 6],
  1036,
  s,
  [113, 73],
  s,
  [114, 73],
  s,
  [115, 73],
  s,
  [116, 73],
  s,
  [117, 73],
  s,
  [118, 73],
  c,
  [57011, 14],
  1038,
  1039,
  1040,
  s,
  [123, 73],
  1041,
  c,
  [91, 3],
  s,
  [1043, 15, 1],
  1078,
  1079,
  c,
  [556, 6],
  179,
  180,
  601,
  1061,
  s,
  [601, 4],
  c,
  [11, 5],
  c,
  [5, 3],
  s,
  [698, 5],
  s,
  [68, 5],
  c,
  [13, 3],
  1066,
  s,
  [679, 5],
  s,
  [591, 5],
  c,
  [14, 3],
  1072,
  1071,
  251,
  192,
  205,
  s,
  [676, 5],
  c,
  [1214, 61],
  c,
  [6151, 38],
  c,
  [141, 5],
  c,
  [63579, 4],
  c,
  [105, 13],
  808,
  c,
  [106, 32],
  809,
  s,
  [656, 5],
  649,
  650,
  1080,
  s,
  [668, 5],
  s,
  [669, 5],
  c,
  [68, 3],
  1085,
  1084,
  649,
  650,
  1086,
  758,
  813,
  s,
  [758, 4],
  c,
  [246, 6],
  c,
  [5887, 141],
  s,
  [151, 20],
  1093,
  1093,
  1092,
  s,
  [1093, 18],
  s,
  [276, 21],
  283,
  c,
  [111, 3],
  283,
  283,
  1093,
  s,
  [283, 3],
  643,
  283,
  c,
  [3414, 3],
  283,
  623,
  802,
  283,
  1095,
  179,
  c,
  [3418, 8],
  s,
  [283, 3],
  c,
  [3421, 4],
  s,
  [283, 5],
  180,
  283,
  283,
  c,
  [3428, 19],
  283,
  283,
  s,
  [1094, 68],
  1098,
  176,
  813,
  1100,
  s,
  [11, 4],
  s,
  [1101, 5, 1],
  580,
  1107,
  1106,
  s,
  [580, 4],
  c,
  [263, 48],
  s,
  [350, 164],
  s,
  [1117, 48],
  s,
  [1114, 48],
  s,
  [1115, 48],
  801,
  1109,
  801,
  s,
  [1110, 6, 1],
  c,
  [6439, 37],
  s,
  [358, 164],
  s,
  [585, 5],
  c,
  [8678, 4],
  c,
  [1025, 5],
  1120,
  c,
  [63497, 8],
  735,
  c,
  [225, 18],
  735,
  735,
  c,
  [227, 19],
  735,
  735,
  1150,
  1150,
  1124,
  s,
  [1150, 5],
  s,
  [1149, 8],
  c,
  [66, 5],
  251,
  587,
  c,
  [919, 5],
  c,
  [75, 5],
  c,
  [8, 8],
  s,
  [1168, 4],
  1132,
  s,
  [1168, 10],
  s,
  [1167, 15],
  s,
  [1174, 7],
  587,
  s,
  [1174, 6],
  s,
  [1173, 14],
  s,
  [751, 13],
  s,
  [1177, 13],
  s,
  [754, 15],
  s,
  [755, 15],
  s,
  [753, 13],
  s,
  [745, 9],
  c,
  [63673, 9],
  c,
  [814, 45],
  s,
  [1144, 3],
  179,
  1144,
  1144,
  180,
  s,
  [1144, 5],
  s,
  [1143, 12],
  c,
  [72, 3],
  1144,
  1143,
  1142,
  c,
  [6, 3],
  s,
  [770, 3],
  s,
  [771, 3],
  s,
  [772, 3],
  1146,
  1147,
  1148,
  s,
  [693, 6],
  694,
  694,
  1149,
  s,
  [694, 4],
  885,
  884,
  s,
  [547, 3],
  1151,
  s,
  [547, 158],
  544,
  544,
  1153,
  s,
  [544, 5],
  1152,
  s,
  [544, 153],
  1154,
  s,
  [4, 162],
  c,
  [595, 48],
  s,
  [593, 5],
  s,
  [573, 5],
  c,
  [895, 5],
  569,
  1158,
  s,
  [569, 4],
  s,
  [571, 6],
  618,
  1158,
  s,
  [618, 4],
  s,
  [673, 5],
  c,
  [9704, 15],
  c,
  [9705, 31],
  s,
  [381, 17],
  649,
  650,
  381,
  381,
  623,
  s,
  [381, 6],
  621,
  381,
  381,
  629,
  381,
  622,
  381,
  381,
  624,
  625,
  s,
  [381, 19],
  618,
  620,
  s,
  [381, 42],
  613,
  s,
  [381, 3],
  c,
  [1032, 4],
  s,
  [381, 45],
  s,
  [382, 105],
  617,
  s,
  [382, 48],
  s,
  [383, 17],
  649,
  650,
  383,
  383,
  623,
  s,
  [383, 6],
  621,
  383,
  383,
  629,
  383,
  622,
  383,
  383,
  624,
  625,
  s,
  [383, 19],
  618,
  620,
  s,
  [383, 42],
  613,
  s,
  [383, 3],
  c,
  [308, 4],
  s,
  [383, 45],
  s,
  [384, 17],
  649,
  650,
  384,
  384,
  623,
  s,
  [384, 6],
  621,
  384,
  384,
  629,
  384,
  622,
  384,
  384,
  624,
  625,
  s,
  [384, 19],
  618,
  620,
  s,
  [384, 42],
  613,
  384,
  1160,
  384,
  c,
  [154, 4],
  s,
  [384, 45],
  s,
  [386, 17],
  649,
  650,
  386,
  386,
  623,
  s,
  [386, 6],
  621,
  386,
  386,
  629,
  386,
  622,
  386,
  386,
  624,
  625,
  s,
  [386, 19],
  618,
  620,
  s,
  [386, 42],
  613,
  386,
  1161,
  386,
  c,
  [154, 4],
  s,
  [386, 45],
  s,
  [388, 154],
  s,
  [389, 17],
  649,
  650,
  389,
  389,
  623,
  s,
  [389, 6],
  621,
  389,
  389,
  629,
  389,
  622,
  s,
  [389, 24],
  620,
  s,
  [389, 42],
  613,
  s,
  [389, 3],
  617,
  s,
  [389, 48],
  s,
  [390, 17],
  649,
  650,
  390,
  390,
  623,
  s,
  [390, 6],
  621,
  390,
  390,
  629,
  390,
  622,
  s,
  [390, 24],
  620,
  s,
  [390, 42],
  613,
  s,
  [390, 3],
  617,
  s,
  [390, 48],
  s,
  [391, 17],
  649,
  650,
  391,
  391,
  623,
  s,
  [391, 9],
  629,
  s,
  [391, 69],
  613,
  s,
  [391, 3],
  617,
  s,
  [391, 48],
  s,
  [392, 17],
  649,
  650,
  392,
  392,
  623,
  s,
  [392, 9],
  629,
  s,
  [392, 69],
  613,
  s,
  [392, 3],
  617,
  s,
  [392, 48],
  s,
  [393, 17],
  649,
  650,
  393,
  393,
  623,
  s,
  [393, 9],
  629,
  s,
  [393, 69],
  613,
  s,
  [393, 3],
  617,
  s,
  [393, 48],
  s,
  [394, 17],
  649,
  650,
  s,
  [394, 12],
  629,
  s,
  [394, 69],
  613,
  s,
  [394, 3],
  617,
  s,
  [394, 48],
  s,
  [395, 17],
  649,
  650,
  395,
  395,
  623,
  s,
  [395, 6],
  621,
  395,
  395,
  629,
  395,
  622,
  s,
  [395, 23],
  618,
  620,
  s,
  [395, 42],
  613,
  s,
  [395, 3],
  617,
  619,
  s,
  [395, 47],
  s,
  [396, 17],
  649,
  650,
  396,
  396,
  623,
  s,
  [396, 6],
  621,
  396,
  396,
  629,
  396,
  622,
  s,
  [396, 23],
  618,
  620,
  s,
  [396, 42],
  613,
  s,
  [396, 3],
  617,
  619,
  s,
  [396, 47],
  s,
  [397, 17],
  649,
  650,
  397,
  397,
  623,
  s,
  [397, 6],
  621,
  397,
  397,
  629,
  397,
  622,
  s,
  [397, 23],
  618,
  620,
  s,
  [397, 42],
  613,
  s,
  [397, 3],
  617,
  619,
  s,
  [397, 47],
  s,
  [398, 17],
  649,
  650,
  398,
  398,
  623,
  s,
  [398, 6],
  621,
  398,
  398,
  629,
  398,
  622,
  s,
  [398, 23],
  618,
  620,
  s,
  [398, 42],
  613,
  s,
  [398, 3],
  617,
  619,
  s,
  [398, 47],
  s,
  [399, 8],
  564,
  s,
  [399, 145],
  s,
  [400, 154],
  c,
  [2904, 48],
  s,
  [402, 154],
  s,
  [403, 8],
  564,
  s,
  [403, 145],
  s,
  [404, 154],
  c,
  [510, 48],
  s,
  [406, 154],
  s,
  [407, 16],
  c,
  [4450, 3],
  407,
  407,
  623,
  s,
  [407, 6],
  621,
  407,
  407,
  629,
  407,
  622,
  407,
  407,
  624,
  625,
  s,
  [407, 19],
  618,
  620,
  s,
  [407, 41],
  c,
  [4515, 3],
  407,
  c,
  [4516, 5],
  s,
  [407, 9],
  647,
  s,
  [407, 35],
  s,
  [408, 16],
  c,
  [154, 3],
  408,
  408,
  623,
  s,
  [408, 6],
  621,
  408,
  408,
  629,
  408,
  622,
  408,
  408,
  624,
  625,
  s,
  [408, 19],
  618,
  620,
  s,
  [408, 41],
  c,
  [154, 3],
  408,
  c,
  [154, 5],
  s,
  [408, 9],
  647,
  s,
  [408, 35],
  s,
  [409, 16],
  c,
  [154, 3],
  409,
  409,
  623,
  s,
  [409, 6],
  621,
  409,
  409,
  629,
  409,
  622,
  409,
  409,
  624,
  625,
  s,
  [409, 19],
  618,
  620,
  s,
  [409, 41],
  c,
  [154, 3],
  409,
  c,
  [154, 5],
  s,
  [409, 9],
  647,
  s,
  [409, 35],
  s,
  [410, 16],
  c,
  [154, 3],
  410,
  410,
  623,
  s,
  [410, 6],
  621,
  410,
  410,
  629,
  410,
  622,
  410,
  410,
  624,
  625,
  s,
  [410, 19],
  618,
  620,
  s,
  [410, 41],
  c,
  [154, 3],
  410,
  c,
  [154, 5],
  s,
  [410, 9],
  647,
  s,
  [410, 35],
  s,
  [411, 8],
  c,
  [5058, 4],
  411,
  c,
  [5058, 3],
  411,
  411,
  624,
  625,
  s,
  [411, 5],
  618,
  620,
  s,
  [411, 6],
  c,
  [5064, 8],
  s,
  [411, 9],
  647,
  s,
  [411, 31],
  s,
  [412, 16],
  c,
  [90, 3],
  412,
  412,
  623,
  s,
  [412, 6],
  621,
  412,
  412,
  629,
  412,
  622,
  412,
  412,
  624,
  625,
  s,
  [412, 19],
  618,
  620,
  s,
  [412, 41],
  c,
  [149, 3],
  412,
  c,
  [150, 5],
  s,
  [412, 9],
  647,
  s,
  [412, 35],
  s,
  [413, 16],
  c,
  [154, 3],
  413,
  413,
  623,
  s,
  [413, 6],
  621,
  413,
  413,
  629,
  413,
  622,
  413,
  413,
  624,
  625,
  s,
  [413, 19],
  618,
  620,
  s,
  [413, 41],
  c,
  [154, 3],
  413,
  c,
  [154, 5],
  s,
  [413, 9],
  647,
  s,
  [413, 35],
  s,
  [414, 16],
  c,
  [154, 3],
  414,
  414,
  623,
  s,
  [414, 6],
  621,
  414,
  414,
  629,
  414,
  622,
  414,
  414,
  624,
  625,
  s,
  [414, 19],
  618,
  620,
  s,
  [414, 41],
  c,
  [154, 3],
  414,
  c,
  [154, 5],
  s,
  [414, 9],
  647,
  s,
  [414, 35],
  s,
  [415, 16],
  c,
  [154, 3],
  415,
  415,
  623,
  s,
  [415, 6],
  621,
  415,
  415,
  629,
  415,
  622,
  415,
  415,
  624,
  625,
  s,
  [415, 19],
  618,
  620,
  s,
  [415, 41],
  c,
  [154, 3],
  415,
  c,
  [154, 5],
  s,
  [415, 9],
  647,
  s,
  [415, 35],
  s,
  [416, 16],
  c,
  [154, 3],
  416,
  416,
  623,
  s,
  [416, 6],
  621,
  416,
  416,
  629,
  416,
  622,
  416,
  416,
  624,
  625,
  s,
  [416, 19],
  618,
  620,
  s,
  [416, 41],
  c,
  [154, 3],
  416,
  c,
  [154, 5],
  s,
  [416, 9],
  647,
  s,
  [416, 35],
  1164,
  451,
  452,
  453,
  s,
  [419, 14],
  643,
  419,
  c,
  [158, 3],
  419,
  419,
  623,
  802,
  s,
  [419, 5],
  621,
  419,
  419,
  629,
  419,
  c,
  [5932, 5],
  s,
  [419, 7],
  644,
  s,
  [419, 11],
  618,
  620,
  s,
  [419, 41],
  c,
  [158, 3],
  419,
  c,
  [5988, 12],
  419,
  419,
  647,
  s,
  [419, 35],
  s,
  [420, 14],
  643,
  420,
  c,
  [154, 3],
  420,
  420,
  623,
  802,
  s,
  [420, 5],
  621,
  420,
  420,
  629,
  420,
  c,
  [154, 5],
  s,
  [420, 7],
  644,
  s,
  [420, 6],
  641,
  s,
  [420, 4],
  618,
  620,
  s,
  [420, 41],
  c,
  [154, 3],
  420,
  c,
  [6142, 15],
  s,
  [420, 35],
  c,
  [1982, 4],
  1167,
  c,
  [70885, 46],
  s,
  [433, 154],
  s,
  [435, 154],
  s,
  [442, 154],
  s,
  [443, 154],
  c,
  [667, 3],
  1168,
  c,
  [4, 3],
  1169,
  c,
  [13735, 7],
  s,
  [440, 154],
  s,
  [437, 14],
  643,
  437,
  c,
  [990, 3],
  437,
  437,
  623,
  802,
  s,
  [437, 5],
  621,
  437,
  437,
  629,
  437,
  c,
  [990, 5],
  s,
  [437, 7],
  644,
  s,
  [437, 11],
  618,
  620,
  s,
  [437, 41],
  c,
  [990, 3],
  437,
  c,
  [990, 12],
  437,
  437,
  647,
  s,
  [437, 35],
  s,
  [438, 14],
  643,
  438,
  c,
  [154, 3],
  438,
  438,
  623,
  802,
  s,
  [438, 5],
  621,
  438,
  438,
  629,
  438,
  c,
  [154, 5],
  s,
  [438, 7],
  644,
  s,
  [438, 11],
  618,
  620,
  s,
  [438, 41],
  c,
  [154, 3],
  438,
  c,
  [154, 12],
  438,
  438,
  647,
  s,
  [438, 35],
  s,
  [439, 16],
  c,
  [154, 3],
  439,
  439,
  623,
  s,
  [439, 6],
  621,
  439,
  439,
  629,
  439,
  622,
  439,
  439,
  624,
  625,
  s,
  [439, 19],
  618,
  620,
  s,
  [439, 41],
  c,
  [154, 3],
  439,
  c,
  [154, 5],
  s,
  [439, 45],
  s,
  [441, 154],
  s,
  [309, 154],
  s,
  [310, 154],
  s,
  [311, 154],
  s,
  [426, 154],
  801,
  1172,
  c,
  [9186, 96],
  s,
  [288, 154],
  s,
  [289, 155],
  s,
  [285, 154],
  1176,
  c,
  [9070, 37],
  1177,
  c,
  [12991, 3],
  1179,
  s,
  [376, 3],
  c,
  [557, 48],
  c,
  [93, 18],
  1181,
  c,
  [94, 19],
  1182,
  c,
  [132, 37],
  1183,
  s,
  [645, 157],
  c,
  [67269, 20],
  1184,
  c,
  [12131, 3],
  1186,
  c,
  [17738, 40],
  955,
  s,
  [369, 154],
  s,
  [642, 157],
  c,
  [67555, 5],
  1188,
  c,
  [383, 20],
  c,
  [67651, 6],
  c,
  [23, 43],
  c,
  [12589, 3],
  c,
  [12588, 3],
  192,
  205,
  463,
  1194,
  s,
  [463, 5],
  982,
  981,
  c,
  [751, 48],
  s,
  [471, 6],
  s,
  [474, 14],
  s,
  [475, 14],
  s,
  [479, 9],
  s,
  [480, 9],
  c,
  [100, 3],
  c,
  [120, 8],
  467,
  1194,
  s,
  [467, 5],
  c,
  [118, 48],
  1205,
  c,
  [49, 48],
  702,
  181,
  c,
  [50, 3],
  181,
  181,
  1208,
  s,
  [181, 27],
  s,
  [182, 30],
  s,
  [1099, 30],
  s,
  [184, 30],
  s,
  [186, 30],
  s,
  [188, 30],
  s,
  [192, 30],
  s,
  [196, 30],
  s,
  [199, 30],
  s,
  [201, 98],
  c,
  [371, 3],
  s,
  [1050, 3],
  1212,
  1213,
  s,
  [1050, 12],
  c,
  [20, 3],
  1215,
  c,
  [13203, 15],
  s,
  [164, 18],
  s,
  [165, 18],
  s,
  [166, 18],
  s,
  [167, 18],
  s,
  [168, 18],
  c,
  [109, 3],
  83,
  83,
  1217,
  s,
  [83, 17],
  s,
  [85, 20],
  s,
  [86, 20],
  179,
  180,
  c,
  [14022, 32],
  s,
  [73, 7],
  s,
  [1055, 7],
  c,
  [661, 48],
  s,
  [126, 73],
  s,
  [144, 73],
  s,
  [145, 73],
  s,
  [146, 73],
  c,
  [340, 4],
  1070,
  c,
  [341, 44],
  1222,
  s,
  [94, 73],
  s,
  [96, 9],
  c,
  [1744, 4],
  96,
  96,
  623,
  s,
  [96, 6],
  621,
  96,
  96,
  629,
  96,
  622,
  96,
  96,
  624,
  625,
  s,
  [96, 19],
  618,
  620,
  s,
  [96, 17],
  c,
  [1787, 19],
  s,
  [96, 4],
  s,
  [97, 9],
  643,
  97,
  649,
  650,
  97,
  97,
  623,
  s,
  [97, 6],
  621,
  97,
  97,
  629,
  97,
  622,
  97,
  97,
  624,
  625,
  s,
  [97, 19],
  618,
  620,
  s,
  [97, 17],
  c,
  [93, 19],
  s,
  [97, 4],
  c,
  [13375, 6],
  1223,
  c,
  [13376, 55],
  s,
  [1066, 48],
  c,
  [13827, 3],
  s,
  [1066, 14],
  c,
  [13502, 61],
  c,
  [12255, 99],
  s,
  [110, 73],
  s,
  [111, 73],
  s,
  [112, 73],
  s,
  [119, 73],
  c,
  [11476, 6],
  1072,
  1071,
  c,
  [11484, 51],
  s,
  [125, 73],
  s,
  [1072, 62],
  s,
  [1074, 62],
  s,
  [1076, 62],
  s,
  [1080, 62],
  s,
  [1090, 63],
  1240,
  s,
  [1082, 62],
  s,
  [1084, 62],
  s,
  [1090, 252],
  c,
  [1272, 109],
  s,
  [1086, 62],
  611,
  1250,
  s,
  [611, 4],
  607,
  1251,
  s,
  [607, 4],
  s,
  [600, 5],
  179,
  180,
  609,
  1253,
  s,
  [609, 4],
  s,
  [604, 5],
  605,
  1254,
  s,
  [605, 4],
  s,
  [69, 3],
  76,
  101,
  455,
  1257,
  1256,
  s,
  [455, 4],
  s,
  [456, 10],
  1258,
  c,
  [12760, 4],
  1120,
  1120,
  s,
  [1121, 3],
  s,
  [623, 5],
  s,
  [360, 3],
  c,
  [3567, 18],
  s,
  [360, 3],
  c,
  [1690, 19],
  360,
  360,
  s,
  [411, 16],
  c,
  [57, 3],
  411,
  411,
  623,
  s,
  [411, 6],
  621,
  411,
  411,
  629,
  411,
  c,
  [7773, 10],
  s,
  [411, 14],
  c,
  [7787, 8],
  s,
  [411, 35],
  c,
  [121, 3],
  411,
  c,
  [7823, 46],
  s,
  [411, 4],
  s,
  [687, 6],
  s,
  [689, 6],
  s,
  [655, 5],
  657,
  c,
  [214, 18],
  657,
  657,
  c,
  [213, 19],
  657,
  657,
  c,
  [1665, 51],
  1085,
  1084,
  s,
  [664, 3],
  s,
  [665, 3],
  s,
  [666, 3],
  c,
  [1775, 96],
  649,
  650,
  1264,
  s,
  [760, 7],
  148,
  148,
  1092,
  s,
  [148, 18],
  149,
  149,
  1092,
  s,
  [149, 18],
  150,
  150,
  1092,
  s,
  [150, 18],
  c,
  [169, 51],
  1267,
  179,
  180,
  s,
  [278, 21],
  s,
  [280, 21],
  s,
  [282, 21],
  s,
  [160, 68],
  s,
  [1095, 68],
  1269,
  s,
  [763, 8],
  c,
  [13294, 9],
  c,
  [13303, 54],
  c,
  [48, 3],
  801,
  1278,
  s,
  [351, 164],
  s,
  [352, 164],
  c,
  [21616, 240],
  s,
  [509, 5],
  589,
  1286,
  1285,
  s,
  [589, 5],
  1286,
  s,
  [589, 4],
  1288,
  c,
  [67, 3],
  s,
  [736, 7],
  s,
  [738, 7],
  s,
  [1151, 7],
  272,
  271,
  1152,
  1152,
  c,
  [15342, 3],
  1124,
  1156,
  s,
  [1166, 5],
  c,
  [22613, 10],
  s,
  [741, 7],
  s,
  [743, 7],
  848,
  1295,
  s,
  [1170, 7],
  587,
  s,
  [1170, 6],
  s,
  [1169, 14],
  s,
  [750, 13],
  s,
  [1175, 13],
  495,
  1298,
  s,
  [495, 4],
  1300,
  1299,
  c,
  [1315, 13],
  1301,
  c,
  [5097, 24],
  729,
  729,
  76,
  1303,
  101,
  729,
  729,
  1304,
  729,
  729,
  s,
  [1145, 10],
  s,
  [728, 12],
  1306,
  s,
  [774, 48],
  s,
  [775, 48],
  s,
  [776, 48],
  873,
  c,
  [22799, 6],
  s,
  [773, 3],
  s,
  [315, 5],
  s,
  [316, 5],
  c,
  [428, 48],
  695,
  695,
  1309,
  s,
  [695, 4],
  s,
  [546, 162],
  1311,
  1312,
  s,
  [5, 162],
  c,
  [381, 48],
  460,
  c,
  [1980, 18],
  460,
  460,
  c,
  [666, 19],
  460,
  460,
  s,
  [594, 5],
  s,
  [595, 5],
  c,
  [100, 3],
  s,
  [675, 5],
  c,
  [965, 96],
  1317,
  c,
  [5917, 37],
  1318,
  c,
  [5955, 40],
  c,
  [79858, 47],
  1321,
  801,
  1322,
  s,
  [431, 154],
  c,
  [379, 52],
  1326,
  c,
  [256, 46],
  s,
  [434, 154],
  s,
  [436, 154],
  s,
  [333, 85],
  1328,
  s,
  [333, 69],
  1329,
  c,
  [807, 37],
  1330,
  c,
  [845, 40],
  1332,
  s,
  [624, 157],
  s,
  [368, 154],
  1333,
  s,
  [375, 154],
  c,
  [507, 18],
  379,
  c,
  [1353, 23],
  c,
  [20596, 46],
  c,
  [50, 48],
  s,
  [646, 157],
  653,
  653,
  s,
  [641, 3],
  s,
  [288, 155],
  s,
  [643, 157],
  648,
  648,
  650,
  650,
  651,
  651,
  652,
  652,
  462,
  1194,
  s,
  [462, 5],
  1338,
  c,
  [7385, 7],
  s,
  [468, 6],
  1342,
  1341,
  1344,
  1343,
  492,
  492,
  s,
  [294, 37],
  484,
  484,
  c,
  [1191, 37],
  988,
  c,
  [20207, 8],
  c,
  [20192, 3],
  466,
  1194,
  s,
  [466, 5],
  722,
  722,
  1205,
  722,
  1351,
  722,
  722,
  s,
  [706, 7],
  s,
  [707, 7],
  1353,
  1352,
  c,
  [79, 18],
  703,
  c,
  [80, 19],
  s,
  [179, 30],
  c,
  [743, 3],
  s,
  [579, 5],
  s,
  [238, 4],
  1356,
  s,
  [238, 10],
  s,
  [1051, 15],
  1357,
  1358,
  169,
  169,
  1360,
  s,
  [169, 8],
  1364,
  1365,
  s,
  [1367, 8, 1],
  s,
  [169, 7],
  c,
  [20357, 4],
  76,
  c,
  [7155, 6],
  101,
  c,
  [7156, 9],
  s,
  [177, 28],
  c,
  [20116, 4],
  s,
  [87, 20],
  s,
  [147, 3],
  c,
  [212, 18],
  147,
  147,
  c,
  [213, 19],
  147,
  147,
  1377,
  801,
  c,
  [5818, 4],
  165,
  1064,
  c,
  [932, 14],
  1381,
  c,
  [933, 30],
  s,
  [98, 73],
  s,
  [1067, 48],
  c,
  [6466, 3],
  s,
  [1067, 14],
  c,
  [5194, 6],
  1383,
  c,
  [5195, 55],
  s,
  [1068, 48],
  c,
  [127, 3],
  s,
  [1068, 14],
  1385,
  c,
  [651, 37],
  1386,
  c,
  [38, 37],
  1387,
  s,
  [120, 73],
  1257,
  1388,
  s,
  [122, 73],
  801,
  1389,
  c,
  [354, 6],
  1390,
  c,
  [5549, 58],
  c,
  [62, 3],
  1392,
  c,
  [62, 61],
  1394,
  c,
  [62, 61],
  1396,
  c,
  [62, 55],
  1399,
  1398,
  c,
  [64, 4],
  143,
  763,
  743,
  143,
  c,
  [65, 55],
  c,
  [5924, 69],
  1402,
  c,
  [252, 61],
  1404,
  c,
  [252, 56],
  1406,
  1399,
  1407,
  1399,
  1408,
  1399,
  1409,
  1410,
  c,
  [753, 3],
  1092,
  1411,
  c,
  [76, 4],
  1412,
  c,
  [6063, 60],
  c,
  [3, 3],
  s,
  [602, 5],
  c,
  [17775, 5],
  1418,
  c,
  [3262, 51],
  c,
  [7006, 5],
  c,
  [53, 45],
  1422,
  658,
  c,
  [884, 18],
  658,
  658,
  c,
  [886, 19],
  658,
  658,
  s,
  [663, 3],
  1423,
  c,
  [929, 37],
  659,
  c,
  [38, 18],
  659,
  659,
  c,
  [40, 20],
  659,
  c,
  [174, 48],
  s,
  [275, 21],
  s,
  [277, 21],
  s,
  [279, 21],
  s,
  [281, 21],
  s,
  [161, 68],
  s,
  [574, 5],
  1425,
  s,
  [575, 5],
  541,
  885,
  s,
  [541, 4],
  1427,
  884,
  541,
  541,
  s,
  [576, 5],
  s,
  [578, 5],
  801,
  1428,
  s,
  [582, 5],
  s,
  [349, 164],
  1429,
  c,
  [482, 37],
  1430,
  c,
  [38, 37],
  1431,
  c,
  [38, 37],
  1432,
  c,
  [38, 37],
  1433,
  c,
  [38, 37],
  s,
  [586, 5],
  c,
  [824, 51],
  s,
  [588, 5],
  c,
  [56, 48],
  1437,
  c,
  [49, 3],
  1124,
  1154,
  1153,
  1153,
  1441,
  1157,
  s,
  [742, 7],
  s,
  [749, 13],
  s,
  [1171, 13],
  c,
  [42, 3],
  1444,
  c,
  [4, 3],
  76,
  101,
  c,
  [100, 48],
  s,
  [727, 6],
  c,
  [986, 53],
  s,
  [732, 6],
  c,
  [19455, 6],
  696,
  696,
  c,
  [319, 18],
  696,
  696,
  c,
  [321, 19],
  696,
  696,
  c,
  [103, 48],
  1455,
  1456,
  548,
  548,
  549,
  549,
  1344,
  1457,
  s,
  [570, 6],
  s,
  [385, 17],
  649,
  650,
  385,
  385,
  623,
  s,
  [385, 6],
  621,
  385,
  385,
  629,
  385,
  622,
  385,
  385,
  624,
  625,
  s,
  [385, 19],
  618,
  620,
  s,
  [385, 42],
  613,
  s,
  [385, 3],
  c,
  [184, 4],
  s,
  [385, 45],
  s,
  [387, 17],
  649,
  650,
  387,
  387,
  623,
  s,
  [387, 6],
  621,
  387,
  387,
  629,
  387,
  622,
  387,
  387,
  624,
  625,
  s,
  [387, 19],
  618,
  620,
  s,
  [387, 42],
  613,
  s,
  [387, 3],
  c,
  [154, 4],
  s,
  [387, 45],
  s,
  [401, 154],
  s,
  [405, 154],
  1458,
  801,
  1459,
  s,
  [427, 154],
  s,
  [429, 154],
  1460,
  c,
  [1350, 37],
  1461,
  801,
  1462,
  s,
  [432, 154],
  s,
  [330, 154],
  1463,
  c,
  [5336, 155],
  c,
  [155, 155],
  s,
  [287, 155],
  s,
  [284, 154],
  s,
  [374, 154],
  c,
  [1122, 18],
  s,
  [378, 3],
  c,
  [1125, 19],
  1467,
  1466,
  1469,
  1468,
  c,
  [5959, 40],
  c,
  [2196, 48],
  s,
  [482, 9],
  s,
  [483, 9],
  c,
  [4837, 12],
  c,
  [78, 3],
  s,
  [478, 9],
  c,
  [90, 48],
  c,
  [12390, 8],
  465,
  1194,
  s,
  [465, 5],
  s,
  [472, 6],
  s,
  [699, 5],
  s,
  [704, 7],
  s,
  [705, 7],
  c,
  [88, 48],
  1479,
  1478,
  1480,
  s,
  [180, 30],
  s,
  [240, 7],
  1482,
  s,
  [240, 6],
  c,
  [8265, 99],
  s,
  [170, 10],
  c,
  [4992, 10],
  s,
  [170, 7],
  c,
  [25349, 19],
  s,
  [205, 27],
  s,
  [206, 27],
  c,
  [73, 3],
  1493,
  c,
  [72, 5],
  c,
  [71, 8],
  s,
  [1496, 4, 1],
  s,
  [222, 17],
  1502,
  1501,
  c,
  [127, 7],
  s,
  [224, 17],
  1503,
  1505,
  1504,
  1507,
  1506,
  1508,
  1509,
  1510,
  1360,
  c,
  [163, 10],
  s,
  [84, 20],
  s,
  [100, 73],
  1513,
  1512,
  1514,
  s,
  [261, 13],
  1065,
  s,
  [265, 4],
  c,
  [709, 14],
  s,
  [265, 3],
  c,
  [712, 4],
  1515,
  1516,
  s,
  [265, 4],
  c,
  [718, 19],
  265,
  265,
  s,
  [99, 73],
  s,
  [1069, 48],
  c,
  [4260, 3],
  s,
  [1069, 14],
  s,
  [101, 73],
  s,
  [102, 73],
  s,
  [103, 73],
  s,
  [121, 73],
  s,
  [124, 73],
  s,
  [127, 73],
  s,
  [1073, 48],
  c,
  [503, 3],
  s,
  [1073, 14],
  s,
  [128, 73],
  s,
  [1075, 48],
  c,
  [138, 3],
  s,
  [1075, 14],
  s,
  [129, 73],
  s,
  [1077, 48],
  c,
  [138, 3],
  s,
  [1077, 14],
  s,
  [130, 73],
  s,
  [1081, 48],
  c,
  [138, 3],
  s,
  [1081, 14],
  s,
  [131, 73],
  s,
  [1088, 63],
  s,
  [1091, 49],
  c,
  [202, 3],
  s,
  [1091, 14],
  1399,
  1518,
  s,
  [133, 73],
  s,
  [1083, 48],
  c,
  [140, 3],
  s,
  [1083, 14],
  s,
  [134, 73],
  s,
  [1085, 48],
  c,
  [138, 3],
  s,
  [1085, 14],
  s,
  [135, 73],
  s,
  [136, 73],
  s,
  [137, 73],
  s,
  [138, 73],
  s,
  [139, 73],
  s,
  [140, 73],
  c,
  [2369, 48],
  s,
  [1087, 48],
  c,
  [551, 3],
  s,
  [1087, 14],
  s,
  [612, 5],
  s,
  [608, 5],
  s,
  [610, 5],
  s,
  [606, 5],
  s,
  [71, 3],
  454,
  c,
  [2867, 18],
  454,
  454,
  c,
  [2151, 19],
  454,
  454,
  s,
  [457, 10],
  s,
  [458, 3],
  c,
  [54, 6],
  458,
  c,
  [55, 12],
  s,
  [458, 3],
  c,
  [56, 19],
  s,
  [458, 3],
  c,
  [235, 48],
  s,
  [667, 3],
  660,
  c,
  [150, 18],
  660,
  660,
  c,
  [94, 19],
  660,
  660,
  c,
  [93, 3],
  s,
  [550, 3],
  1531,
  1533,
  1534,
  1530,
  550,
  550,
  1529,
  1528,
  1535,
  1525,
  1526,
  1527,
  550,
  550,
  s,
  [540, 7],
  581,
  1536,
  s,
  [581, 4],
  c,
  [11139, 240],
  801,
  1542,
  s,
  [590, 5],
  1513,
  1543,
  c,
  [57, 48],
  s,
  [746, 8],
  1545,
  1155,
  c,
  [25280, 8],
  1547,
  1548,
  511,
  76,
  101,
  537,
  537,
  1342,
  1550,
  s,
  [492, 28],
  1138,
  1553,
  s,
  [1138, 4],
  c,
  [11074, 3],
  c,
  [435, 13],
  1303,
  c,
  [436, 5],
  c,
  [11092, 3],
  c,
  [437, 19],
  c,
  [11111, 3],
  730,
  1257,
  s,
  [730, 5],
  731,
  801,
  s,
  [731, 5],
  1186,
  c,
  [113, 3],
  1186,
  1186,
  1557,
  s,
  [1186, 40],
  s,
  [1188, 6],
  1559,
  s,
  [1188, 40],
  697,
  697,
  c,
  [589, 18],
  697,
  697,
  c,
  [152, 19],
  697,
  697,
  1560,
  s,
  [543, 162],
  s,
  [545, 162],
  s,
  [417, 154],
  s,
  [418, 154],
  s,
  [444, 154],
  s,
  [428, 154],
  s,
  [430, 154],
  1564,
  1563,
  s,
  [331, 154],
  s,
  [332, 154],
  s,
  [319, 154],
  1565,
  s,
  [321, 154],
  1566,
  1344,
  1567,
  c,
  [5186, 8],
  470,
  1194,
  s,
  [470, 5],
  s,
  [473, 6],
  s,
  [493, 28],
  485,
  485,
  c,
  [5415, 37],
  464,
  1194,
  s,
  [464, 5],
  723,
  1092,
  1569,
  s,
  [723, 4],
  1572,
  1571,
  c,
  [2128, 48],
  1575,
  1576,
  1574,
  s,
  [259, 3],
  1578,
  s,
  [259, 9],
  1579,
  s,
  [239, 3],
  c,
  [121, 4],
  239,
  c,
  [122, 10],
  s,
  [239, 3],
  c,
  [125, 4],
  s,
  [239, 5],
  c,
  [130, 19],
  239,
  239,
  1580,
  c,
  [170, 37],
  1581,
  s,
  [203, 27],
  s,
  [204, 27],
  s,
  [178, 28],
  s,
  [237, 20],
  1583,
  1584,
  s,
  [237, 7],
  c,
  [92777, 4],
  208,
  1586,
  s,
  [208, 27],
  s,
  [1100, 5],
  1588,
  s,
  [1100, 27],
  c,
  [65, 3],
  1590,
  76,
  101,
  216,
  c,
  [7, 3],
  216,
  1593,
  s,
  [216, 27],
  219,
  c,
  [33, 3],
  219,
  1595,
  s,
  [219, 27],
  1596,
  s,
  [234, 17],
  1597,
  s,
  [230, 17],
  s,
  [223, 17],
  1499,
  1497,
  s,
  [225, 17],
  s,
  [226, 17],
  1598,
  s,
  [228, 17],
  1599,
  1600,
  s,
  [232, 17],
  s,
  [233, 17],
  1601,
  c,
  [5431, 10],
  s,
  [91, 73],
  c,
  [631, 48],
  s,
  [92, 73],
  s,
  [266, 7],
  1604,
  s,
  [266, 6],
  1605,
  c,
  [9612, 4],
  142,
  763,
  743,
  142,
  c,
  [9613, 55],
  s,
  [132, 73],
  801,
  1607,
  s,
  [459, 3],
  c,
  [791, 6],
  459,
  c,
  [792, 12],
  s,
  [459, 3],
  c,
  [795, 19],
  s,
  [459, 3],
  s,
  [577, 5],
  s,
  [539, 7],
  s,
  [551, 3],
  c,
  [3371, 4],
  551,
  551,
  c,
  [3371, 6],
  551,
  551,
  s,
  [553, 17],
  1609,
  1610,
  c,
  [233, 3],
  559,
  559,
  1612,
  s,
  [559, 15],
  c,
  [21, 3],
  1614,
  c,
  [29754, 4],
  c,
  [93195, 13],
  s,
  [563, 17],
  1616,
  s,
  [565, 17],
  s,
  [566, 17],
  1617,
  1618,
  c,
  [75, 3],
  1620,
  c,
  [983, 37],
  1621,
  c,
  [38, 37],
  1622,
  c,
  [38, 37],
  1623,
  c,
  [38, 37],
  1624,
  c,
  [38, 37],
  c,
  [14553, 6],
  s,
  [596, 5],
  1513,
  1626,
  c,
  [3372, 8],
  s,
  [740, 7],
  498,
  1632,
  1634,
  498,
  498,
  1631,
  1633,
  498,
  498,
  c,
  [24, 3],
  520,
  520,
  1639,
  s,
  [520, 4],
  512,
  1640,
  s,
  [614, 5],
  s,
  [1139, 5],
  1642,
  1641,
  s,
  [733, 6],
  c,
  [27875, 46],
  s,
  [767, 5],
  s,
  [1187, 46],
  c,
  [97, 46],
  s,
  [1189, 46],
  1645,
  1646,
  1564,
  s,
  [1648, 5, 1],
  s,
  [481, 9],
  469,
  1194,
  s,
  [469, 5],
  c,
  [93606, 5],
  s,
  [708, 7],
  s,
  [710, 7],
  1655,
  c,
  [337, 18],
  1656,
  c,
  [338, 19],
  1658,
  1660,
  1659,
  c,
  [999, 48],
  s,
  [270, 6],
  1663,
  1664,
  s,
  [270, 4],
  1665,
  c,
  [61, 16],
  1668,
  1669,
  1670,
  c,
  [3927, 35],
  c,
  [3, 3],
  s,
  [207, 27],
  c,
  [4008, 51],
  s,
  [209, 29],
  c,
  [32, 3],
  1102,
  c,
  [4, 4],
  s,
  [1102, 27],
  s,
  [1101, 32],
  s,
  [212, 29],
  c,
  [92, 3],
  1680,
  s,
  [217, 29],
  c,
  [33, 3],
  s,
  [220, 29],
  c,
  [9807, 5],
  76,
  101,
  s,
  [227, 17],
  s,
  [229, 17],
  s,
  [231, 17],
  s,
  [171, 17],
  s,
  [262, 13],
  s,
  [267, 13],
  1685,
  1686,
  s,
  [268, 7],
  1687,
  s,
  [268, 6],
  s,
  [1089, 49],
  c,
  [4824, 3],
  s,
  [1089, 14],
  s,
  [141, 73],
  s,
  [552, 17],
  s,
  [555, 17],
  1688,
  1132,
  1132,
  1691,
  s,
  [1132, 15],
  176,
  s,
  [560, 17],
  c,
  [568, 48],
  s,
  [562, 17],
  s,
  [564, 17],
  c,
  [82, 3],
  1695,
  c,
  [1404, 17],
  c,
  [103, 48],
  s,
  [583, 5],
  s,
  [353, 164],
  s,
  [354, 164],
  s,
  [355, 164],
  s,
  [356, 164],
  s,
  [357, 164],
  s,
  [587, 5],
  s,
  [597, 5],
  s,
  [739, 7],
  s,
  [494, 5],
  499,
  1632,
  1634,
  499,
  499,
  1631,
  1633,
  499,
  499,
  s,
  [501, 9],
  s,
  [502, 9],
  s,
  [1698, 4, 1],
  510,
  538,
  538,
  513,
  513,
  1709,
  1710,
  1535,
  1707,
  1711,
  1708,
  c,
  [1367, 5],
  1714,
  1715,
  s,
  [766, 5],
  s,
  [768, 5],
  s,
  [542, 162],
  s,
  [334, 154],
  1716,
  s,
  [335, 154],
  c,
  [2180, 54],
  c,
  [1476, 45],
  s,
  [320, 154],
  s,
  [322, 154],
  c,
  [356, 3],
  725,
  1720,
  s,
  [725, 4],
  c,
  [12019, 5],
  1572,
  1571,
  s,
  [712, 7],
  1724,
  1725,
  1723,
  1727,
  1726,
  1729,
  1728,
  c,
  [2719, 18],
  1730,
  c,
  [2719, 19],
  s,
  [250, 3],
  1732,
  1734,
  1733,
  s,
  [250, 4],
  176,
  c,
  [88528, 4],
  c,
  [436, 45],
  248,
  248,
  1739,
  s,
  [248, 5],
  1740,
  s,
  [248, 6],
  s,
  [242, 15],
  1741,
  1742,
  1743,
  s,
  [247, 4],
  c,
  [135, 4],
  247,
  c,
  [136, 10],
  s,
  [247, 3],
  c,
  [139, 4],
  s,
  [247, 5],
  c,
  [143, 19],
  247,
  247,
  1056,
  1746,
  1747,
  s,
  [235, 5],
  c,
  [56, 4],
  235,
  623,
  802,
  235,
  c,
  [57, 8],
  s,
  [235, 3],
  c,
  [57, 4],
  s,
  [235, 15],
  c,
  [67, 19],
  235,
  235,
  236,
  236,
  1342,
  s,
  [236, 25],
  s,
  [210, 29],
  s,
  [211, 29],
  s,
  [1103, 29],
  s,
  [213, 29],
  c,
  [344, 3],
  1749,
  s,
  [218, 29],
  s,
  [221, 29],
  1750,
  1751,
  s,
  [263, 13],
  s,
  [264, 13],
  s,
  [269, 13],
  c,
  [103, 3],
  s,
  [557, 17],
  s,
  [1133, 17],
  c,
  [37, 3],
  1754,
  1755,
  c,
  [3595, 37],
  s,
  [567, 17],
  c,
  [543, 48],
  1757,
  c,
  [103, 37],
  s,
  [500, 9],
  c,
  [97170, 4],
  c,
  [3674, 10],
  s,
  [515, 7],
  s,
  [516, 7],
  s,
  [517, 7],
  s,
  [518, 7],
  s,
  [519, 7],
  1762,
  1763,
  s,
  [1126, 4],
  1765,
  c,
  [3310, 6],
  s,
  [521, 6],
  1136,
  1553,
  s,
  [1136, 4],
  s,
  [615, 5],
  s,
  [616, 3],
  1770,
  616,
  616,
  s,
  [336, 154],
  1739,
  337,
  337,
  1513,
  338,
  s,
  [724, 5],
  c,
  [190, 3],
  711,
  1257,
  s,
  [711, 6],
  s,
  [709, 7],
  c,
  [5367, 8],
  c,
  [26, 3],
  1774,
  1658,
  c,
  [375, 48],
  c,
  [49, 50],
  s,
  [72, 7],
  76,
  1781,
  101,
  1782,
  76,
  101,
  1784,
  76,
  101,
  1786,
  s,
  [273, 6],
  1788,
  s,
  [273, 4],
  1104,
  1790,
  260,
  260,
  1513,
  s,
  [260, 10],
  s,
  [241, 13],
  c,
  [1559, 99],
  1793,
  c,
  [100, 67],
  c,
  [51, 35],
  1796,
  1057,
  1797,
  1798,
  s,
  [214, 29],
  c,
  [613, 6],
  1801,
  c,
  [4, 3],
  1803,
  1130,
  1130,
  1691,
  s,
  [1130, 15],
  1806,
  176,
  s,
  [561, 17],
  1808,
  c,
  [764, 37],
  s,
  [522, 17],
  s,
  [503, 9],
  s,
  [504, 9],
  s,
  [505, 9],
  514,
  514,
  c,
  [125, 3],
  1122,
  1811,
  c,
  [5, 3],
  1128,
  s,
  [1127, 4],
  1814,
  1815,
  s,
  [613, 5],
  s,
  [1137, 5],
  c,
  [819, 7],
  1342,
  1817,
  718,
  1194,
  s,
  [718, 6],
  1342,
  1818,
  s,
  [720, 7],
  s,
  [713, 7],
  c,
  [141, 18],
  1819,
  c,
  [142, 19],
  s,
  [716, 7],
  c,
  [45, 18],
  1820,
  c,
  [45, 19],
  s,
  [714, 7],
  s,
  [251, 7],
  76,
  101,
  1822,
  76,
  101,
  s,
  [253, 7],
  76,
  101,
  s,
  [254, 7],
  76,
  101,
  s,
  [271, 10],
  176,
  1827,
  1105,
  s,
  [243, 15],
  s,
  [249, 3],
  c,
  [106, 4],
  249,
  c,
  [107, 10],
  s,
  [249, 3],
  c,
  [110, 4],
  s,
  [249, 4],
  c,
  [113, 19],
  249,
  249,
  c,
  [472, 51],
  1739,
  1829,
  1739,
  1830,
  1058,
  c,
  [56, 3],
  1058,
  1833,
  s,
  [1058, 13],
  c,
  [4352, 51],
  s,
  [215, 29],
  s,
  [173, 27],
  c,
  [59, 3],
  s,
  [175, 27],
  c,
  [30, 3],
  s,
  [556, 17],
  s,
  [1131, 17],
  s,
  [554, 17],
  1841,
  s,
  [568, 17],
  1842,
  1123,
  c,
  [74, 3],
  1845,
  1846,
  1129,
  c,
  [679, 6],
  s,
  [617, 5],
  s,
  [726, 5],
  1850,
  1849,
  1658,
  1572,
  1571,
  s,
  [252, 7],
  76,
  101,
  s,
  [255, 7],
  s,
  [257, 7],
  s,
  [258, 7],
  s,
  [274, 10],
  1106,
  1855,
  1739,
  1856,
  s,
  [245, 15],
  s,
  [246, 15],
  s,
  [74, 15],
  s,
  [1059, 15],
  c,
  [122, 3],
  s,
  [78, 15],
  1859,
  1858,
  80,
  80,
  81,
  1860,
  81,
  c,
  [780, 37],
  1342,
  1861,
  s,
  [174, 27],
  s,
  [176, 27],
  s,
  [558, 17],
  c,
  [266, 4],
  1864,
  1863,
  533,
  533,
  534,
  534,
  c,
  [10, 3],
  1342,
  1866,
  1342,
  1867,
  c,
  [1358, 8],
  1869,
  s,
  [715, 7],
  s,
  [717, 7],
  s,
  [256, 7],
  176,
  1107,
  s,
  [244, 15],
  s,
  [77, 15],
  76,
  c,
  [557, 51],
  1873,
  1864,
  1874,
  1875,
  c,
  [7, 3],
  1877,
  1342,
  1878,
  s,
  [531, 7],
  s,
  [532, 7],
  719,
  1194,
  s,
  [719, 6],
  s,
  [721, 7],
  s,
  [1108, 11],
  1880,
  79,
  79,
  82,
  82,
  1060,
  c,
  [52, 3],
  1060,
  1833,
  s,
  [1060, 13],
  s,
  [523, 7],
  c,
  [25, 3],
  535,
  535,
  536,
  536,
  s,
  [530, 7],
  s,
  [1110, 8],
  1885,
  1110,
  1110,
  s,
  [1109, 11],
  s,
  [75, 15],
  s,
  [1061, 15],
  1124,
  1124,
  1888,
  s,
  [1124, 6],
  s,
  [272, 10],
  s,
  [1111, 10],
  s,
  [526, 3],
  1891,
  s,
  [526, 4],
  s,
  [1125, 8],
  c,
  [323, 4],
  s,
  [524, 7],
  1894,
  1895,
  1864,
  1896,
  s,
  [527, 7],
  1897,
  1898,
  s,
  [525, 8],
  1899,
  1900,
  1901,
  528,
  s,
  [529, 7]
])
}),
defaultActions: bda({
  idx: u([
  3,
  4,
  5,
  s,
  [7, 54, 1],
  76,
  85,
  89,
  90,
  102,
  103,
  105,
  107,
  108,
  109,
  113,
  132,
  134,
  144,
  145,
  s,
  [147, 18, 1],
  166,
  167,
  s,
  [175, 7, 1],
  184,
  185,
  191,
  s,
  [195, 10, 1],
  208,
  211,
  218,
  222,
  223,
  226,
  237,
  239,
  241,
  242,
  244,
  247,
  248,
  249,
  s,
  [252, 7, 1],
  261,
  s,
  [265, 4, 1],
  271,
  272,
  276,
  277,
  s,
  [285, 276, 1],
  578,
  584,
  585,
  591,
  592,
  594,
  596,
  603,
  607,
  610,
  649,
  650,
  656,
  657,
  s,
  [666, 5, 1],
  s,
  [672, 5, 1],
  680,
  684,
  s,
  [686, 11, 1],
  701,
  703,
  704,
  713,
  716,
  717,
  s,
  [720, 4, 2],
  733,
  738,
  740,
  s,
  [748, 6, 1],
  s,
  [756, 6, 1],
  766,
  783,
  784,
  792,
  793,
  796,
  797,
  800,
  806,
  808,
  809,
  817,
  819,
  824,
  s,
  [831, 4, 1],
  842,
  843,
  851,
  856,
  s,
  [858, 7, 1],
  869,
  873,
  874,
  875,
  879,
  885,
  887,
  888,
  891,
  893,
  900,
  s,
  [912, 4, 2],
  930,
  931,
  932,
  s,
  [936, 4, 1],
  942,
  s,
  [946, 5, 1],
  954,
  955,
  956,
  961,
  966,
  970,
  971,
  s,
  [980, 5, 1],
  991,
  s,
  [993, 9, 1],
  s,
  [1005, 5, 1],
  1012,
  1013,
  1016,
  1017,
  s,
  [1019, 4, 1],
  1025,
  s,
  [1034, 4, 1],
  s,
  [1042, 6, 1],
  s,
  [1049, 6, 1],
  1057,
  1060,
  1063,
  1065,
  1068,
  1071,
  1072,
  1073,
  1076,
  1077,
  1078,
  1082,
  1083,
  1084,
  1088,
  s,
  [1094, 5, 1],
  1100,
  1109,
  1110,
  1116,
  1121,
  1122,
  1123,
  1128,
  1129,
  1132,
  1133,
  1134,
  1139,
  1140,
  1142,
  1143,
  1144,
  1146,
  1147,
  1148,
  1151,
  1153,
  1156,
  1157,
  1159,
  1167,
  1170,
  1171,
  1176,
  1177,
  1179,
  s,
  [1184, 9, 1],
  1195,
  1203,
  1204,
  1207,
  1209,
  1211,
  1216,
  1218,
  1223,
  1230,
  1232,
  1240,
  1252,
  1261,
  s,
  [1265, 6, 1],
  1272,
  1274,
  1275,
  1277,
  1278,
  1284,
  1287,
  1292,
  s,
  [1294, 4, 1],
  1302,
  1305,
  1311,
  1312,
  1314,
  1317,
  1318,
  1321,
  1322,
  1326,
  1327,
  1331,
  1332,
  1333,
  1339,
  1340,
  1343,
  s,
  [1347, 4, 1],
  1354,
  1361,
  1362,
  1366,
  1368,
  1376,
  1377,
  1380,
  1381,
  1383,
  s,
  [1385, 6, 1],
  s,
  [1392, 4, 2],
  1399,
  1402,
  1404,
  s,
  [1406, 6, 1],
  s,
  [1414, 5, 1],
  1420,
  1423,
  1427,
  1435,
  1438,
  1440,
  1445,
  1447,
  s,
  [1456, 7, 1],
  1464,
  1465,
  1466,
  1468,
  1473,
  1474,
  1486,
  1487,
  1488,
  1497,
  1499,
  1500,
  1503,
  1504,
  1506,
  1509,
  1510,
  1512,
  1514,
  1518,
  1521,
  1522,
  1524,
  1530,
  1532,
  1533,
  1543,
  1546,
  1549,
  1551,
  1552,
  1554,
  1556,
  1557,
  1559,
  1567,
  1570,
  1571,
  1582,
  1585,
  1588,
  1589,
  1592,
  1594,
  s,
  [1598, 6, 1],
  1607,
  1608,
  1609,
  1613,
  1615,
  1616,
  s,
  [1619, 10, 1],
  1630,
  1631,
  1636,
  1637,
  s,
  [1643, 4, 1],
  1648,
  1651,
  1652,
  1657,
  1667,
  s,
  [1676, 4, 1],
  1681,
  1682,
  1685,
  1686,
  1687,
  1689,
  1690,
  1694,
  1697,
  s,
  [1702, 5, 1],
  1712,
  1714,
  1716,
  1719,
  1722,
  1731,
  1738,
  1745,
  1748,
  1755,
  s,
  [1757, 5, 1],
  1765,
  1768,
  1769,
  1774,
  1775,
  1777,
  1779,
  1780,
  1783,
  1785,
  1787,
  1790,
  1791,
  1799,
  1800,
  1802,
  1804,
  1805,
  1806,
  1808,
  1810,
  1813,
  1816,
  1817,
  1821,
  s,
  [1823, 4, 1],
  s,
  [1829, 4, 1],
  1834,
  1836,
  1839,
  1840,
  1841,
  1844,
  1845,
  1851,
  1852,
  1853,
  s,
  [1855, 4, 1],
  1866,
  1867,
  1869,
  1871,
  1872,
  1874,
  1876,
  1877,
  1878,
  1880,
  1881,
  1882,
  1884,
  1885,
  1887,
  1889,
  1893,
  1896,
  1900,
  1901
]),
  goto: u([
  8,
  9,
  12,
  s,
  [14, 54, 1],
  1052,
  314,
  677,
  678,
  1,
  2,
  6,
  1046,
  1047,
  10,
  765,
  507,
  692,
  1134,
  1135,
  s,
  [291, 18, 1],
  312,
  313,
  286,
  s,
  [361, 6, 1],
  372,
  373,
  629,
  s,
  [339, 10, 1],
  477,
  700,
  193,
  200,
  778,
  1049,
  70,
  672,
  670,
  671,
  592,
  620,
  621,
  622,
  s,
  [323, 7, 1],
  681,
  688,
  690,
  684,
  685,
  661,
  662,
  761,
  764,
  s,
  [153, 7, 1],
  3,
  s,
  [779, 267, 1],
  7,
  737,
  752,
  744,
  496,
  497,
  1147,
  1141,
  584,
  598,
  777,
  88,
  89,
  1112,
  1113,
  370,
  1118,
  1119,
  371,
  367,
  s,
  [625, 4, 1],
  630,
  377,
  631,
  647,
  654,
  s,
  [632, 9, 1],
  318,
  644,
  649,
  701,
  1097,
  s,
  [183, 4, 4],
  198,
  1063,
  93,
  95,
  s,
  [104, 6, 1],
  s,
  [113, 6, 1],
  123,
  1078,
  1079,
  698,
  68,
  679,
  591,
  676,
  656,
  668,
  669,
  151,
  276,
  11,
  350,
  1117,
  1114,
  1115,
  358,
  585,
  1149,
  1167,
  1173,
  751,
  1177,
  754,
  755,
  753,
  745,
  1143,
  770,
  771,
  772,
  693,
  4,
  593,
  573,
  571,
  673,
  388,
  s,
  [400, 4, 2],
  451,
  452,
  453,
  433,
  435,
  442,
  443,
  440,
  441,
  309,
  310,
  311,
  426,
  288,
  289,
  285,
  376,
  645,
  369,
  642,
  471,
  474,
  475,
  479,
  480,
  702,
  182,
  1099,
  184,
  186,
  188,
  192,
  196,
  199,
  201,
  s,
  [164, 5, 1],
  85,
  86,
  73,
  1055,
  126,
  144,
  145,
  146,
  94,
  110,
  111,
  112,
  119,
  125,
  1072,
  1074,
  1076,
  1080,
  1090,
  1082,
  1084,
  s,
  [1090, 4],
  1086,
  600,
  604,
  69,
  456,
  1120,
  1121,
  623,
  687,
  689,
  655,
  664,
  665,
  666,
  760,
  278,
  280,
  282,
  160,
  1095,
  763,
  351,
  352,
  509,
  736,
  738,
  1151,
  741,
  743,
  1169,
  750,
  1175,
  1145,
  728,
  774,
  775,
  776,
  773,
  315,
  316,
  546,
  5,
  594,
  595,
  675,
  431,
  434,
  436,
  624,
  368,
  375,
  646,
  653,
  641,
  288,
  643,
  648,
  650,
  651,
  652,
  468,
  706,
  707,
  179,
  579,
  1051,
  177,
  87,
  98,
  120,
  122,
  1090,
  602,
  663,
  s,
  [275, 4, 2],
  161,
  574,
  575,
  576,
  578,
  582,
  349,
  586,
  588,
  1153,
  1157,
  742,
  749,
  1171,
  727,
  732,
  548,
  549,
  570,
  401,
  405,
  427,
  429,
  432,
  330,
  287,
  284,
  374,
  482,
  483,
  478,
  472,
  699,
  704,
  705,
  180,
  205,
  206,
  222,
  224,
  84,
  100,
  261,
  1065,
  99,
  101,
  102,
  103,
  121,
  124,
  s,
  [127, 5, 1],
  1088,
  s,
  [133, 8, 1],
  612,
  608,
  610,
  606,
  71,
  457,
  667,
  540,
  590,
  746,
  1155,
  537,
  492,
  543,
  545,
  417,
  418,
  444,
  428,
  430,
  331,
  332,
  319,
  321,
  473,
  493,
  203,
  204,
  178,
  234,
  230,
  223,
  225,
  226,
  228,
  232,
  233,
  91,
  92,
  132,
  577,
  539,
  553,
  563,
  565,
  566,
  596,
  740,
  512,
  614,
  1139,
  733,
  767,
  1187,
  1189,
  481,
  708,
  710,
  207,
  209,
  1101,
  212,
  217,
  220,
  227,
  229,
  231,
  171,
  262,
  267,
  141,
  552,
  555,
  560,
  562,
  564,
  583,
  s,
  [353, 5, 1],
  587,
  597,
  739,
  494,
  501,
  502,
  538,
  513,
  766,
  768,
  542,
  334,
  335,
  320,
  322,
  712,
  242,
  210,
  211,
  1103,
  213,
  218,
  221,
  263,
  264,
  269,
  557,
  1133,
  567,
  500,
  s,
  [515, 5, 1],
  521,
  615,
  336,
  724,
  709,
  72,
  241,
  1057,
  214,
  561,
  522,
  503,
  504,
  505,
  514,
  1127,
  613,
  1137,
  720,
  713,
  716,
  714,
  251,
  253,
  254,
  271,
  1105,
  243,
  215,
  173,
  175,
  556,
  1131,
  554,
  568,
  1123,
  1129,
  617,
  726,
  252,
  255,
  257,
  258,
  274,
  245,
  246,
  74,
  1059,
  78,
  80,
  174,
  176,
  558,
  533,
  534,
  715,
  717,
  256,
  1107,
  244,
  77,
  76,
  531,
  532,
  721,
  79,
  82,
  523,
  535,
  536,
  530,
  1109,
  75,
  1061,
  272,
  1111,
  1125,
  524,
  527,
  525,
  528,
  529
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this;
    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
    var sstack = new Array(128);        // state stack: stores states (column storage)

    var vstack = new Array(128);        // semantic value stack

    var table = this.table;
    var sp = 0;                         // 'stack pointer': index into the stacks


    


    var symbol = 0;
    var preErrorSymbol = 0;
    var lastEofErrorStateDepth = Infinity;
    var recoveringErrorInfo = null;
    var recovering = 0;                 // (only used when the grammar contains error recovery rules)
    var TERROR = this.TERROR;
    var EOF = this.EOF;
    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, 1902 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: undefined,
        quoteName: undefined,
        lexer: undefined,
        parser: undefined,
        pre_parse: undefined,
        post_parse: undefined,
        pre_lex: undefined,
        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
    };

    var ASSERT;
    if (typeof assert !== 'function') {
        ASSERT = function JisonAssert(cond, msg) {
            if (!cond) {
                throw new Error('assertion failed: ' + (msg || '***'));
            }
        };
    } else {
        ASSERT = assert;
    }

    this.yyGetSharedState = function yyGetSharedState() {
        return sharedState_yy;
    };


    this.yyGetErrorInfoTrack = function yyGetErrorInfoTrack() {
        return recoveringErrorInfo;
    };


    // shallow clone objects, straight copy of simple `src` values
    // e.g. `lexer.yytext` MAY be a complex value object,
    // rather than a simple string/value.
    function shallow_copy(src) {
        if (typeof src === 'object') {
            var dst = {};
            for (var k in src) {
                if (Object.prototype.hasOwnProperty.call(src, k)) {
                    dst[k] = src[k];
                }
            }
            return dst;
        }
        return src;
    }
    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }

    // copy state
    shallow_copy_noclobber(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;







    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash && hash.destroy) {
                hash.destroy();
            }
        }

        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;

        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;


            for (var i = this.__error_recovery_infos.length - 1; i >= 0; i--) {
                var el = this.__error_recovery_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_recovery_infos.length = 0;

            // `recoveringErrorInfo` is also part of the `__error_recovery_infos` array,
            // hence has been destroyed already: no need to do that *twice*.
            if (recoveringErrorInfo) {
                recoveringErrorInfo = undefined;
            }


        }

        return resultValue;
    };






































































































































    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,

            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,

            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };

    // clone some parts of the (possibly enhanced!) errorInfo object
    // to give them some persistence.
    this.shallowCopyErrorInfo = function parser_shallowCopyErrorInfo(p) {
        var rv = shallow_copy(p);

        // remove the large parts which can only cause cyclic references
        // and are otherwise available from the parser kernel anyway.
        delete rv.sharedState_yy;
        delete rv.parser;
        delete rv.lexer;

        // lexer.yytext MAY be a complex value object, rather than a simple string/value:
        rv.value = shallow_copy(rv.value);




        // the 'expected' set won't be modified, so no need to clone it:
        //rv.expected = rv.expected.slice(0);

        //symbol stack is a simple array:
        rv.symbol_stack = rv.symbol_stack.slice(0);
        // ditto for state stack:
        rv.state_stack = rv.state_stack.slice(0);


        // and the value stack may carry both simple and complex values:
        // shallow-copy the latter.
        rv.value_stack = rv.value_stack.map(shallow_copy);

        // and we don't bother with the sharedState_yy reference:
        //delete rv.yy;

        // now we prepare for tracking the COMBINE actions
        // in the error recovery code path:
        //
        // as we want to keep the maximum error info context, we
        // *scan* the state stack to find the first *empty* slot.
        // This position will surely be AT OR ABOVE the current
        // stack pointer, but we want to keep the 'used but discarded'
        // part of the parse stacks *intact* as those slots carry
        // error context that may be useful when you want to produce
        // very detailed error diagnostic reports.
        //
        // ### Purpose of each stack pointer:
        //
        // - stack_pointer: points at the top of the parse stack
        //                  **as it existed at the time of the error
        //                  occurrence, i.e. at the time the stack
        //                  snapshot was taken and copied into the
        //                  errorInfo object.**
        // - base_pointer:  the bottom of the **empty part** of the
        //                  stack, i.e. **the start of the rest of
        //                  the stack space /above/ the existing
        //                  parse stack. This section will be filled
        //                  by the error recovery process as it
        //                  travels the parse state machine to
        //                  arrive at the resolving error recovery rule.**
        // - info_stack_pointer:
        //                  this stack pointer points to the **top of
        //                  the error ecovery tracking stack space**, i.e.
        //                  this stack pointer takes up the role of
        //                  the `stack_pointer` for the error recovery
        //                  process. Any mutations in the **parse stack**
        //                  are **copy-appended** to this part of the
        //                  stack space, keeping the bottom part of the
        //                  stack (the 'snapshot' part where the parse
        //                  state at the time of error occurrence was kept)
        //                  intact.
        // - root_failure_pointer:
        //                  copy of the `stack_pointer`...
        //
        for (var i = rv.stack_pointer; typeof rv.state_stack[i] !== 'undefined'; i++) {
            // empty
        }
        rv.base_pointer = i;
        rv.info_stack_pointer = i;

        rv.root_failure_pointer = rv.stack_pointer;

        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_recovery_infos.push(rv);

        return rv;
    };

    function getNonTerminalFromCode(symbol) {
        var tokenName = self.getSymbolName(symbol);
        if (!tokenName) {
            tokenName = symbol;
        }
        return tokenName;
    }


    function stdLex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    function fastLex() {
        var token = lexer.fastLex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    var lex = stdLex;


    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p;
    var yyrulelen;
    var this_production;
    var newState;
    var retval = false;


    // Return the rule stack depth where the nearest error rule can be found.
    // Return -1 when no error recovery rule was found.
    function locateNearestErrorRecoveryRule(state) {
        var stack_probe = sp - 1;
        var depth = 0;

        // try to recover from error
        while (stack_probe >= 0) {
            // check for error recovery rule in this state









            var t = table[state][TERROR] || NO_ACTION;
            if (t[0]) {
                // We need to make sure we're not cycling forever:
                // once we hit EOF, even when we `yyerrok()` an error, we must
                // prevent the core from running forever,
                // e.g. when parent rules are still expecting certain input to
                // follow after this, for example when you handle an error inside a set
                // of braces which are matched by a parent rule in your grammar.
                //
                // Hence we require that every error handling/recovery attempt
                // *after we've hit EOF* has a diminishing state stack: this means
                // we will ultimately have unwound the state stack entirely and thus
                // terminate the parse in a controlled fashion even when we have
                // very complex error/recovery code interplay in the core + user
                // action code blocks:









                if (symbol === EOF) {
                    if (lastEofErrorStateDepth > sp - 1 - depth) {
                        lastEofErrorStateDepth = sp - 1 - depth;
                    } else {









                        --stack_probe; // popStack(1): [symbol, action]
                        state = sstack[stack_probe];
                        ++depth;
                        continue;
                    }
                }
                return depth;
            }
            if (state === 0 /* $accept rule */ || stack_probe < 1) {









                return -1; // No suitable error recovery rule available.
            }
            --stack_probe; // popStack(1): [symbol, action]
            state = sstack[stack_probe];
            ++depth;
        }









        return -1; // No suitable error recovery rule available.
    }


    try {
        this.__reentrant_call_depth++;

        lexer.setInput(input, sharedState_yy);

        // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
        // this initial `setInput()` call: hence we can now check and decide
        // whether we'll go with the standard, slower, lex() API or the
        // `fast_lex()` one:
        if (typeof lexer.canIUse === 'function') {
            var lexerInfo = lexer.canIUse();
            if (lexerInfo.fastLex && typeof fastLex === 'function') {
                lex = fastLex;
            }
        } 



        vstack[sp] = null;
        sstack[sp] = 0;
        stack[sp] = 0;
        ++sp;





        if (this.pre_parse) {
            this.pre_parse.call(this, sharedState_yy);
        }
        if (sharedState_yy.pre_parse) {
            sharedState_yy.pre_parse.call(this, sharedState_yy);
        }

        newState = sstack[sp - 1];
        for (;;) {
            // retrieve state number from top of stack
            state = newState;               // sstack[sp - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = 2;
                newState = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                //
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (!symbol) {
                    symbol = lex();
                }
                // read action for current state and first input
                t = (table[state] && table[state][symbol]) || NO_ACTION;
                newState = t[1];
                action = t[0];











                // handle parse error
                if (!action) {
                    // first see if there's any chance at hitting an error recovery rule:
                    var error_rule_depth = locateNearestErrorRecoveryRule(state);
                    var errStr = null;
                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                    var expected = this.collect_expected_token_set(state);

                    if (!recovering) {
                        // Report error
                        if (typeof lexer.yylineno === 'number') {
                            errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                        } else {
                            errStr = 'Parse error: ';
                        }

                        if (typeof lexer.showPosition === 'function') {
                            errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                        }
                        if (expected.length) {
                            errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                        } else {
                            errStr += 'Unexpected ' + errSymbolDescr;
                        }

                        p = this.constructParseErrorInfo(errStr, null, expected, (error_rule_depth >= 0));

                        // DO NOT cleanup the old one before we start the new error info track:
                        // the old one will *linger* on the error stack and stay alive until we 
                        // invoke the parser's cleanup API!
                        recoveringErrorInfo = this.shallowCopyErrorInfo(p);










                        r = this.parseError(p.errStr, p, this.JisonParserError);
                        if (typeof r !== 'undefined') {
                            retval = r;
                            break;
                        }

                        // Protect against overly blunt userland `parseError` code which *sets*
                        // the `recoverable` flag without properly checking first:
                        // we always terminate the parse when there's no recovery rule available anyhow!
                        if (!p.recoverable || error_rule_depth < 0) {
                            break;
                        } else {
                            // TODO: allow parseError callback to edit symbol and or state at the start of the error recovery process...
                        }
                    }










                    var esp = recoveringErrorInfo.info_stack_pointer;

                    // just recovered from another error
                    if (recovering === ERROR_RECOVERY_TOKEN_DISCARD_COUNT && error_rule_depth >= 0) {
                        // SHIFT current lookahead and grab another
                        recoveringErrorInfo.symbol_stack[esp] = symbol;
                        recoveringErrorInfo.value_stack[esp] = shallow_copy(lexer.yytext);

                        recoveringErrorInfo.state_stack[esp] = newState; // push state
                        ++esp;

                        // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:





                        preErrorSymbol = 0;
                        symbol = lex();









                    }

                    // try to recover from error
                    if (error_rule_depth < 0) {
                        ASSERT(recovering > 0, "line 897");
                        recoveringErrorInfo.info_stack_pointer = esp;

                        // barf a fatal hairball when we're out of look-ahead symbols and none hit a match
                        // while we are still busy recovering from another error:
                        var po = this.__error_infos[this.__error_infos.length - 1];

                        // Report error
                        if (typeof lexer.yylineno === 'number') {
                            errStr = 'Parsing halted on line ' + (lexer.yylineno + 1) + ' while starting to recover from another error';
                        } else {
                            errStr = 'Parsing halted while starting to recover from another error';
                        }

                        if (po) {
                            errStr += ' -- previous error which resulted in this fatal result: ' + po.errStr;
                        } else {
                            errStr += ': ';
                        }

                        if (typeof lexer.showPosition === 'function') {
                            errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                        }
                        if (expected.length) {
                            errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                        } else {
                            errStr += 'Unexpected ' + errSymbolDescr;
                        }

                        p = this.constructParseErrorInfo(errStr, null, expected, false);
                        if (po) {
                            p.extra_error_attributes = po;
                        }

                        r = this.parseError(p.errStr, p, this.JisonParserError);
                        if (typeof r !== 'undefined') {
                            retval = r;
                        }
                        break;
                    }

                    preErrorSymbol = (symbol === TERROR ? 0 : symbol); // save the lookahead token
                    symbol = TERROR;            // insert generic error symbol as new lookahead

                    const EXTRA_STACK_SAMPLE_DEPTH = 3;

                    // REDUCE/COMBINE the pushed terms/tokens to a new ERROR token:
                    recoveringErrorInfo.symbol_stack[esp] = preErrorSymbol;
                    if (errStr) {
                        recoveringErrorInfo.value_stack[esp] = {
                            yytext: shallow_copy(lexer.yytext),
                            errorRuleDepth: error_rule_depth,
                            errStr: errStr,
                            errorSymbolDescr: errSymbolDescr,
                            expectedStr: expected,
                            stackSampleLength: error_rule_depth + EXTRA_STACK_SAMPLE_DEPTH
                        };









                    } else {
                        recoveringErrorInfo.value_stack[esp] = {
                            yytext: shallow_copy(lexer.yytext),
                            errorRuleDepth: error_rule_depth,
                            stackSampleLength: error_rule_depth + EXTRA_STACK_SAMPLE_DEPTH
                        };
                    }

                    recoveringErrorInfo.state_stack[esp] = newState || NO_ACTION[1];

                    ++esp;
                    recoveringErrorInfo.info_stack_pointer = esp;

                    yyval.$ = recoveringErrorInfo;


                    yyrulelen = error_rule_depth;









                    r = this.performAction.call(yyval, NO_ACTION[1], sp - 1, vstack);

                    if (typeof r !== 'undefined') {
                        retval = r;
                        break;
                    }

                    // pop off stack
                    sp -= yyrulelen;

                    // and move the top entries + discarded part of the parse stacks onto the error info stack:
                    for (var idx = sp - EXTRA_STACK_SAMPLE_DEPTH, top = idx + yyrulelen; idx < top; idx++, esp++) {
                        recoveringErrorInfo.symbol_stack[esp] = stack[idx];
                        recoveringErrorInfo.value_stack[esp] = shallow_copy(vstack[idx]);

                        recoveringErrorInfo.state_stack[esp] = sstack[idx];
                    }

                    recoveringErrorInfo.symbol_stack[esp] = TERROR;
                    recoveringErrorInfo.value_stack[esp] = shallow_copy(yyval.$);


                    // goto new state = table[STATE][NONTERMINAL]
                    newState = sstack[sp - 1];

                    if (this.defaultActions[newState]) {
                        recoveringErrorInfo.state_stack[esp] = this.defaultActions[newState];
                    } else {
                        t = (table[newState] && table[newState][symbol]) || NO_ACTION;
                        recoveringErrorInfo.state_stack[esp] = t[1];
                    }

                    ++esp;
                    recoveringErrorInfo.info_stack_pointer = esp;

                    // allow N (default: 3) real symbols to be shifted before reporting a new error
                    recovering = ERROR_RECOVERY_TOKEN_DISCARD_COUNT;










                    // Now duplicate the standard parse machine here, at least its initial
                    // couple of rounds until the TERROR symbol is **pushed onto the parse stack**,
                    // as we wish to push something special then!
                    //
                    // Run the state machine in this copy of the parser state machine
                    // until we *either* consume the error symbol (and its related information)
                    // *or* we run into another error while recovering from this one
                    // *or* we execute a `reduce` action which outputs a final parse
                    // result (yes, that MAY happen!).
                    //
                    // We stay in this secondary parse loop until we have completed
                    // the *error recovery phase* as the main parse loop (further below)
                    // is optimized for regular parse operation and DOES NOT cope with
                    // error recovery *at all*.
                    //
                    // We call the secondary parse loop just below the "slow parse loop",
                    // while the main parse loop, which is an almost-duplicate of this one,
                    // yet optimized for regular parse operation, is called the "fast
                    // parse loop".
                    //
                    // Compare this to `bison` & (vanilla) `jison`, both of which have
                    // only a single parse loop, which handles everything. Our goal is
                    // to eke out every drop of performance in the main parse loop...

                    ASSERT(recoveringErrorInfo, "line 1049");
                    ASSERT(symbol === TERROR, "line 1050");
                    ASSERT(!action, "line 1051");
                    var errorSymbolFromParser = true;
                    for (;;) {
                        // retrieve state number from top of stack
                        state = newState;               // sstack[sp - 1];

                        // use default actions if available
                        if (this.defaultActions[state]) {
                            action = 2;
                            newState = this.defaultActions[state];
                        } else {
                            // The single `==` condition below covers both these `===` comparisons in a single
                            // operation:
                            //
                            //     if (symbol === null || typeof symbol === 'undefined') ...
                            if (!symbol) {
                                symbol = lex();
                                // **Warning: Edge Case**: the *lexer* may produce
                                // TERROR tokens of its own volition: *those* TERROR
                                // tokens should be treated like *regular tokens*
                                // i.e. tokens which have a lexer-provided `yyvalue`

                                errorSymbolFromParser = false;
                            }
                            // read action for current state and first input
                            t = (table[state] && table[state][symbol]) || NO_ACTION;
                            newState = t[1];
                            action = t[0];










                            // encountered another parse error? If so, break out to main loop
                            // and take it from there!
                            if (!action) {










                                ASSERT(recoveringErrorInfo, "line 1087");

                                // Prep state variables so that upon breaking out of
                                // this "slow parse loop" and hitting the `continue;`
                                // statement in the outer "fast parse loop" we redo
                                // the exact same state table lookup as the one above
                                // so that the outer=main loop will also correctly
                                // detect the 'parse error' state (`!action`) we have
                                // just encountered above.
                                newState = state;
                                break;
                            }
                        }










                        switch (action) {
                        // catch misc. parse failures:
                        default:
                            // this shouldn't happen, unless resolve defaults are off
                            //
                            // SILENTLY SIGNAL that the outer "fast parse loop" should
                            // take care of this internal error condition:
                            // prevent useless code duplication now/here.
                            break;

                        // shift:
                        case 1:
                            stack[sp] = symbol;
                            // ### Note/Warning ###
                            //
                            // The *lexer* may also produce TERROR tokens on its own,
                            // so we specifically test for the TERROR we did set up
                            // in the error recovery logic further above!
                            if (symbol === TERROR && errorSymbolFromParser) {
                                // Push a special value onto the stack when we're
                                // shifting the `error` symbol that is related to the
                                // error we're recovering from.
                                ASSERT(recoveringErrorInfo, "line 1131");
                                vstack[sp] = recoveringErrorInfo;
                            } else {
                                ASSERT(symbol !== 0, "line 1135");
                                ASSERT(preErrorSymbol === 0, "line 1136");
                                vstack[sp] = lexer.yytext;

                            }
                            sstack[sp] = newState; // push state

                            ++sp;
                            symbol = 0;
                            // **Warning: Edge Case**: the *lexer* may have produced
                            // TERROR tokens of its own volition: *those* TERROR
                            // tokens should be treated like *regular tokens*
                            // i.e. tokens which have a lexer-provided `yyvalue`

                            errorSymbolFromParser = false;
                            if (!preErrorSymbol) { // normal execution / no error
                                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:





                                if (recovering > 0) {
                                    recovering--;









                                }
                            } else {
                                // error just occurred, resume old lookahead f/ before error, *unless* that drops us straight back into error mode:
                                ASSERT(recovering > 0, "line 1163");
                                symbol = preErrorSymbol;
                                preErrorSymbol = 0;









                                // read action for current state and first input
                                t = (table[newState] && table[newState][symbol]) || NO_ACTION;
                                if (!t[0] || symbol === TERROR) {
                                    // forget about that symbol and move forward: this wasn't a 'forgot to insert' error type where
                                    // (simple) stuff might have been missing before the token which caused the error we're
                                    // recovering from now...
                                    //
                                    // Also check if the LookAhead symbol isn't the ERROR token we set as part of the error
                                    // recovery, for then this we would we idling (cycling) on the error forever.
                                    // Yes, this does not take into account the possibility that the *lexer* may have
                                    // produced a *new* TERROR token all by itself, but that would be a very peculiar grammar!









                                    symbol = 0;
                                }
                            }

                            // once we have pushed the special ERROR token value,
                            // we REMAIN in this inner, "slow parse loop" until
                            // the entire error recovery phase has completed.
                            //
                            // ### Note About Edge Case ###
                            //
                            // Userland action code MAY already have 'reset' the
                            // error recovery phase marker `recovering` to ZERO(0)
                            // while the error symbol hasn't been shifted onto
                            // the stack yet. Hence we only exit this "slow parse loop"
                            // when *both* conditions are met!
                            ASSERT(preErrorSymbol === 0, "line 1194");
                            if (recovering === 0) {
                                break;
                            }
                            continue;

                        // reduce:
                        case 2:
                            this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                            yyrulelen = this_production[1];










                            r = this.performAction.call(yyval, newState, sp - 1, vstack);

                            if (typeof r !== 'undefined') {
                                // signal end of error recovery loop AND end of outer parse loop
                                action = 3;
                                sp = -2;      // magic number: signal outer "fast parse loop" ACCEPT state that we already have a properly set up `retval` parser return value.
                                retval = r;
                                break;
                            }

                            // pop off stack
                            sp -= yyrulelen;

                            // don't overwrite the `symbol` variable: use a local var to speed things up:
                            var ntsymbol = this_production[0];    // push nonterminal (reduce)
                            stack[sp] = ntsymbol;
                            vstack[sp] = yyval.$;

                            // goto new state = table[STATE][NONTERMINAL]
                            newState = table[sstack[sp - 1]][ntsymbol];
                            sstack[sp] = newState;
                            ++sp;









                            continue;

                        // accept:
                        case 3:
                            retval = true;
                            // Return the `$accept` rule's `$$` result, if available.
                            //
                            // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                            // default, action):
                            //
                            //     $accept: <startSymbol> $end
                            //                  %{ $$ = $1; @$ = @1; %}
                            //
                            // which, combined with the parse kernel's `$accept` state behaviour coded below,
                            // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                            // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                            //
                            // In code:
                            //
                            //                  %{
                            //                      @$ = @1;            // if location tracking support is included
                            //                      if (typeof $1 !== 'undefined')
                            //                          return $1;
                            //                      else
                            //                          return true;           // the default parse result if the rule actions don't produce anything
                            //                  %}
                            sp--;
                            if (sp >= 0 && typeof vstack[sp] !== 'undefined') {
                                retval = vstack[sp];
                            }
                            sp = -2;      // magic number: signal outer "fast parse loop" ACCEPT state that we already have a properly set up `retval` parser return value.
                            break;
                        }

                        // break out of loop: we accept or fail with error
                        break;
                    }

                    // should we also break out of the regular/outer parse loop,
                    // i.e. did the parser already produce a parse result in here?!
                    // *or* did we hit an unsupported parse state, to be handled
                    // in the `switch/default` code further below?
                    ASSERT(action !== 2, "line 1272");
                    if (!action || action === 1) {
                        continue;
                    }
                }


            }










            switch (action) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action instanceof Array) {
                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;

            // shift:
            case 1:
                stack[sp] = symbol;
                vstack[sp] = lexer.yytext;

                sstack[sp] = newState; // push state

                ++sp;
                symbol = 0;

                ASSERT(preErrorSymbol === 0, "line 1352");         // normal execution / no error
                ASSERT(recovering === 0, "line 1353");             // normal execution / no error

                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:




                continue;

            // reduce:
            case 2:
                ASSERT(preErrorSymbol === 0, "line 1364");         // normal execution / no error
                ASSERT(recovering === 0, "line 1365");             // normal execution / no error

                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                yyrulelen = this_production[1];










                r = this.performAction.call(yyval, newState, sp - 1, vstack);

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                sp -= yyrulelen;

                // don't overwrite the `symbol` variable: use a local var to speed things up:
                var ntsymbol = this_production[0];    // push nonterminal (reduce)
                stack[sp] = ntsymbol;
                vstack[sp] = yyval.$;

                // goto new state = table[STATE][NONTERMINAL]
                newState = table[sstack[sp - 1]][ntsymbol];
                sstack[sp] = newState;
                ++sp;









                continue;

            // accept:
            case 3:
                if (sp !== -2) {
                    retval = true;
                    // Return the `$accept` rule's `$$` result, if available.
                    //
                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                    // default, action):
                    //
                    //     $accept: <startSymbol> $end
                    //                  %{ $$ = $1; @$ = @1; %}
                    //
                    // which, combined with the parse kernel's `$accept` state behaviour coded below,
                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                    //
                    // In code:
                    //
                    //                  %{
                    //                      @$ = @1;            // if location tracking support is included
                    //                      if (typeof $1 !== 'undefined')
                    //                          return $1;
                    //                      else
                    //                          return true;           // the default parse result if the rule actions don't produce anything
                    //                  %}
                    sp--;
                    if (typeof vstack[sp] !== 'undefined') {
                        retval = vstack[sp];
                    }
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too, but keep the exception intact
        // if it is a known parser or lexer error which has been thrown by parseError() already:
        if (ex instanceof this.JisonParserError) {
            throw ex;
        }
        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {
            throw ex;
        }

        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
        retval = false;
        r = this.parseError(p.errStr, p, this.JisonParserError);
        if (typeof r !== 'undefined') {
            retval = r;
        }
    } finally {
        retval = this.cleanupAfterParse(retval, true, true);
        this.__reentrant_call_depth--;
    }   // /finally

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;
/* lexer generated by jison-lex 0.6.1-215 */

/*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a direct reference!
 *
 *               This "shared context" object was passed to the lexer by way of 
 *               the `lexer.setInput(str, yy)` API before you may use it.
 *
 *               This "shared context" object is passed to the lexer action code in `performAction()`
 *               so userland code in the lexer actions may communicate with the outside world 
 *               and/or other lexer rules' actions in more or less complex ways.
 *
 *  }
 *
 *  Lexer.prototype: {
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    yy:        The overall "shared context" object reference.
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance. 
 *                               `yy_` is an alias for `this` lexer instance reference used internally.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *                             Note:
 *                             The extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file are passed to the lexer via this object
 *                             reference as member variables.
 *
 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function(),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the **parser** or the jison run-time; 
 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
 *               from silently accepting this confusing and potentially hazardous situation! 
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *
 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
 *
 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *    setInput: function(input, [yy]),
 *
 *
 *    input: function(),
 *
 *
 *    unput: function(str),
 *
 *
 *    more: function(),
 *
 *
 *    reject: function(),
 *
 *
 *    less: function(n),
 *
 *
 *    pastInput: function(n),
 *
 *
 *    upcomingInput: function(n),
 *
 *
 *    showPosition: function(),
 *
 *
 *    test_match: function(regex_match_array, rule_index),
 *
 *
 *    next: function(),
 *
 *
 *    begin: function(condition),
 *
 *
 *    pushState: function(condition),
 *
 *
 *    popState: function(),
 *
 *
 *    topState: function(),
 *
 *
 *    _currentRules: function(),
 *
 *
 *    stateStackSize: function(),
 *
 *
 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
 *
 *
 *    rules: [...],
 *
 *
 *    conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *  
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */


var lexer = function() {
  /**
   * See also:
   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
   * with userland code which might access the derived class in a 'classic' way.
   *
   * @public
   * @constructor
   * @nocollapse
   */
  function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
      enumerable: false,
      writable: false,
      value: 'JisonLexerError'
    });

    if (msg == null)
      msg = '???';

    Object.defineProperty(this, 'message', {
      enumerable: false,
      writable: true,
      value: msg
    });

    this.hash = hash;
    var stacktrace;

    if (hash && hash.exception instanceof Error) {
      var ex2 = hash.exception;
      this.message = ex2.message || msg;
      stacktrace = ex2.stack;
    }

    if (!stacktrace) {
      if (Error.hasOwnProperty('captureStackTrace')) {
        // V8
        Error.captureStackTrace(this, this.constructor);
      } else {
        stacktrace = new Error(msg).stack;
      }
    }

    if (stacktrace) {
      Object.defineProperty(this, 'stack', {
        enumerable: false,
        writable: false,
        value: stacktrace
      });
    }
  }

  if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
  } else {
    JisonLexerError.prototype = Object.create(Error.prototype);
  }

  JisonLexerError.prototype.constructor = JisonLexerError;
  JisonLexerError.prototype.name = 'JisonLexerError';

  var lexer = {
    
// Code Generator Information Report
// ---------------------------------
//
// Options:
//
//   backtracking: .................... false
//   location.ranges: ................. false
//   location line+column tracking: ... true
//
//
// Forwarded Parser Analysis flags:
//
//   uses yyleng: ..................... false
//   uses yylineno: ................... false
//   uses yytext: ..................... false
//   uses yylloc: ..................... false
//   uses lexer values: ............... true / true
//   location tracking: ............... false
//   location assignment: ............. false
//
//
// Lexer Analysis flags:
//
//   uses yyleng: ..................... ???
//   uses yylineno: ................... ???
//   uses yytext: ..................... ???
//   uses yylloc: ..................... ???
//   uses ParseError API: ............. ???
//   uses yyerror: .................... ???
//   uses location tracking & editing:  ???
//   uses more() API: ................. ???
//   uses unput() API: ................ ???
//   uses reject() API: ............... ???
//   uses less() API: ................. ???
//   uses display APIs pastInput(), upcomingInput(), showPosition():
//        ............................. ???
//   uses describeYYLLOC() API: ....... ???
//
// --------- END OF REPORT -----------

EOF: 1,
    ERROR: 2,

    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator

    // options: {},                             /// <-- injected by the code generator

    // yy: ...,                                 /// <-- injected by setInput()

    __currentRuleSet__: null,                   /// INTERNAL USE ONLY: internal rule set cache for the current lexer state  

    __error_infos: [],                          /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup  
    __decompressed: false,                      /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use  
    done: false,                                /// INTERNAL USE ONLY  
    _backtrack: false,                          /// INTERNAL USE ONLY  
    _input: '',                                 /// INTERNAL USE ONLY  
    _more: false,                               /// INTERNAL USE ONLY  
    _signaled_error_token: false,               /// INTERNAL USE ONLY  
    conditionStack: [],                         /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`  
    match: '',                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!  
    matched: '',                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far  
    matches: false,                             /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt  
    yytext: '',                                 /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.  
    offset: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far  
    yyleng: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)  
    yylineno: 0,                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located  
    yylloc: null,                               /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction  

    /**
     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
      msg = '' + msg;

      // heuristic to determine if the error message already contains a (partial) source code dump
      // as produced by either `showPosition()` or `prettyPrintRange()`:
      if (show_input_position == undefined) {
        show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
      }

      if (this.yylloc && show_input_position) {
        if (typeof this.prettyPrintRange === 'function') {
          var pretty_src = this.prettyPrintRange(this.yylloc);

          if (!/\n\s*$/.test(msg)) {
            msg += '\n';
          }

          msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
        } else if (typeof this.showPosition === 'function') {
          var pos_str = this.showPosition();

          if (pos_str) {
            if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') {
              msg += '\n' + pos_str;
            } else {
              msg += pos_str;
            }
          }
        }
      }

      /** @constructor */
      var pei = {
        errStr: msg,
        recoverable: !!recoverable,
        text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...  
        token: null,
        line: this.yylineno,
        loc: this.yylloc,
        yy: this.yy,
        lexer: this,

        /**
         * and make sure the error info doesn't stay due to potential
         * ref cycle via userland code manipulations.
         * These would otherwise all be memory leak opportunities!
         * 
         * Note that only array and object references are nuked as those
         * constitute the set of elements which can produce a cyclic ref.
         * The rest of the members is kept intact as they are harmless.
         * 
         * @public
         * @this {LexErrorInfo}
         */
        destroy: function destructLexErrorInfo() {
          // remove cyclic references added to error info:
          // info.yy = null;
          // info.lexer = null;
          // ...
          var rec = !!this.recoverable;

          for (var key in this) {
            if (this.hasOwnProperty(key) && typeof key === 'object') {
              this[key] = undefined;
            }
          }

          this.recoverable = rec;
        }
      };

      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
      this.__error_infos.push(pei);

      return pei;
    },

    /**
     * handler which is invoked when a lexer error occurs.
     * 
     * @public
     * @this {RegExpLexer}
     */
    parseError: function lexer_parseError(str, hash, ExceptionClass) {
      if (!ExceptionClass) {
        ExceptionClass = this.JisonLexerError;
      }

      if (this.yy) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        } else if (typeof this.yy.parseError === 'function') {
          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        }
      }

      throw new ExceptionClass(str, hash);
    },

    /**
     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
     * 
     * @public
     * @this {RegExpLexer}
     */
    yyerror: function yyError(str /*, ...args */) {
      var lineno_msg = '';

      if (this.yylloc) {
        lineno_msg = ' on line ' + (this.yylineno + 1);
      }

      var p = this.constructLexErrorInfo(
        'Lexical error' + lineno_msg + ': ' + str,
        this.options.lexerErrorsAreRecoverable
      );

      // Add any extra args to the hash under the name `extra_error_attributes`:
      var args = Array.prototype.slice.call(arguments, 1);

      if (args.length) {
        p.extra_error_attributes = args;
      }

      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
    },

    /**
     * final cleanup function for when we have completed lexing the input;
     * make it an API so that external code can use this one once userland
     * code has decided it's time to destroy any lingering lexer error
     * hash object instances and the like: this function helps to clean
     * up these constructs, which *may* carry cyclic references which would
     * otherwise prevent the instances from being properly and timely
     * garbage-collected, i.e. this function helps prevent memory leaks!
     * 
     * @public
     * @this {RegExpLexer}
     */
    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
      // prevent lingering circular references from causing memory leaks:
      this.setInput('', {});

      // nuke the error hash info instances created during this run.
      // Userland code must COPY any data/references
      // in the error hash instance(s) it is more permanently interested in.
      if (!do_not_nuke_errorinfos) {
        for (var i = this.__error_infos.length - 1; i >= 0; i--) {
          var el = this.__error_infos[i];

          if (el && typeof el.destroy === 'function') {
            el.destroy();
          }
        }

        this.__error_infos.length = 0;
      }

      return this;
    },

    /**
     * clear the lexer token context; intended for internal use only
     * 
     * @public
     * @this {RegExpLexer}
     */
    clear: function lexer_clear() {
      this.yytext = '';
      this.yyleng = 0;
      this.match = '';

      // - DO NOT reset `this.matched`
      this.matches = false;

      this._more = false;
      this._backtrack = false;
      var col = (this.yylloc ? this.yylloc.last_column : 0);

      this.yylloc = {
        first_line: this.yylineno + 1,
        first_column: col,
        last_line: this.yylineno + 1,
        last_column: col,
        range: [this.offset, this.offset]
      };
    },

    /**
     * resets the lexer, sets new input
     * 
     * @public
     * @this {RegExpLexer}
     */
    setInput: function lexer_setInput(input, yy) {
      this.yy = yy || this.yy || {};

      // also check if we've fully initialized the lexer instance,
      // including expansion work to be done to go from a loaded
      // lexer to a usable lexer:
      if (!this.__decompressed) {
        // step 1: decompress the regex list:
        var rules = this.rules;

        for (var i = 0, len = rules.length; i < len; i++) {
          var rule_re = rules[i];

          // compression: is the RE an xref to another RE slot in the rules[] table?
          if (typeof rule_re === 'number') {
            rules[i] = rules[rule_re];
          }
        }

        // step 2: unfold the conditions[] set to make these ready for use:
        var conditions = this.conditions;

        for (var k in conditions) {
          var spec = conditions[k];
          var rule_ids = spec.rules;
          var len = rule_ids.length;
          var rule_regexes = new Array(len + 1);             // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple! 
          var rule_new_ids = new Array(len + 1);

          for (var i = 0; i < len; i++) {
            var idx = rule_ids[i];
            var rule_re = rules[idx];
            rule_regexes[i + 1] = rule_re;
            rule_new_ids[i + 1] = idx;
          }

          spec.rules = rule_new_ids;
          spec.__rule_regexes = rule_regexes;
          spec.__rule_count = len;
        }

        this.__decompressed = true;
      }

      this._input = input || '';
      this.clear();
      this._signaled_error_token = false;
      this.done = false;
      this.yylineno = 0;
      this.matched = '';
      this.conditionStack = ['INITIAL'];
      this.__currentRuleSet__ = null;

      this.yylloc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      this.offset = 0;
      return this;
    },

    /**
     * edit the remaining input via user-specified callback.
     * This can be used to forward-adjust the input-to-parse, 
     * e.g. inserting macro expansions and alike in the
     * input which has yet to be lexed.
     * The behaviour of this API contrasts the `unput()` et al
     * APIs as those act on the *consumed* input, while this
     * one allows one to manipulate the future, without impacting
     * the current `yyloc` cursor location or any history. 
     * 
     * Use this API to help implement C-preprocessor-like
     * `#include` statements, etc.
     * 
     * The provided callback must be synchronous and is
     * expected to return the edited input (string).
     *
     * The `cpsArg` argument value is passed to the callback
     * as-is.
     *
     * `callback` interface: 
     * `function callback(input, cpsArg)`
     * 
     * - `input` will carry the remaining-input-to-lex string
     *   from the lexer.
     * - `cpsArg` is `cpsArg` passed into this API.
     * 
     * The `this` reference for the callback will be set to
     * reference this lexer instance so that userland code
     * in the callback can easily and quickly access any lexer
     * API. 
     *
     * When the callback returns a non-string-type falsey value,
     * we assume the callback did not edit the input and we
     * will using the input as-is.
     *
     * When the callback returns a non-string-type value, it
     * is converted to a string for lexing via the `"" + retval`
     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
     * -- that way any returned object's `toValue()` and `toString()`
     * methods will be invoked in a proper/desirable order.)
     * 
     * @public
     * @this {RegExpLexer}
     */
    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
      var rv = callback.call(this, this._input, cpsArg);

      if (typeof rv !== 'string') {
        if (rv) {
          this._input = '' + rv;
        } 
        // else: keep `this._input` as is.  
      } else {
        this._input = rv;
      }

      return this;
    },

    /**
     * consumes and returns one char from the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    input: function lexer_input() {
      if (!this._input) {
        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
        return null;
      }

      var ch = this._input[0];
      this.yytext += ch;
      this.yyleng++;
      this.offset++;
      this.match += ch;
      this.matched += ch;

      // Count the linenumber up when we hit the LF (or a stand-alone CR).
      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
      // and we advance immediately past the LF as well, returning both together as if
      // it was all a single 'character' only.
      var slice_len = 1;

      var lines = false;

      if (ch === '\n') {
        lines = true;
      } else if (ch === '\r') {
        lines = true;
        var ch2 = this._input[1];

        if (ch2 === '\n') {
          slice_len++;
          ch += ch2;
          this.yytext += ch2;
          this.yyleng++;
          this.offset++;
          this.match += ch2;
          this.matched += ch2;
          this.yylloc.range[1]++;
        }
      }

      if (lines) {
        this.yylineno++;
        this.yylloc.last_line++;
        this.yylloc.last_column = 0;
      } else {
        this.yylloc.last_column++;
      }

      this.yylloc.range[1]++;
      this._input = this._input.slice(slice_len);
      return ch;
    },

    /**
     * unshifts one char (or an entire string) into the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    unput: function lexer_unput(ch) {
      var len = ch.length;
      var lines = ch.split(/(?:\r\n?|\n)/g);
      this._input = ch + this._input;
      this.yytext = this.yytext.substr(0, this.yytext.length - len);
      this.yyleng = this.yytext.length;
      this.offset -= len;
      this.match = this.match.substr(0, this.match.length - len);
      this.matched = this.matched.substr(0, this.matched.length - len);

      if (lines.length > 1) {
        this.yylineno -= lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;

        // Get last entirely matched line into the `pre_lines[]` array's
        // last index slot; we don't mind when other previously 
        // matched lines end up in the array too. 
        var pre = this.match;

        var pre_lines = pre.split(/(?:\r\n?|\n)/g);

        if (pre_lines.length === 1) {
          pre = this.matched;
          pre_lines = pre.split(/(?:\r\n?|\n)/g);
        }

        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
      } else {
        this.yylloc.last_column -= len;
      }

      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
      this.done = false;
      return this;
    },

    /**
     * cache matched text and append it on next action
     * 
     * @public
     * @this {RegExpLexer}
     */
    more: function lexer_more() {
      this._more = true;
      return this;
    },

    /**
     * signal the lexer that this rule fails to match the input, so the
     * next matching rule (regex) should be tested instead.
     * 
     * @public
     * @this {RegExpLexer}
     */
    reject: function lexer_reject() {
      if (this.options.backtrack_lexer) {
        this._backtrack = true;
      } else {
        // when the `parseError()` call returns, we MUST ensure that the error is registered.
        // We accomplish this by signaling an 'error' token to be produced for the current
        // `.lex()` run.
        var lineno_msg = '';

        if (this.yylloc) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',
          false
        );

        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
      }

      return this;
    },

    /**
     * retain first n characters of the match
     * 
     * @public
     * @this {RegExpLexer}
     */
    less: function lexer_less(n) {
      return this.unput(this.match.slice(n));
    },

    /**
     * return (part of the) already matched input, i.e. for error
     * messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of
     * input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     * 
     * @public
     * @this {RegExpLexer}
     */
    pastInput: function lexer_pastInput(maxSize, maxLines) {
      var past = this.matched.substring(0, this.matched.length - this.match.length);

      if (maxSize < 0)
        maxSize = past.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = past.length;          // can't ever have more input lines than this! 
      else if (!maxLines)
        maxLines = 1;

      // `substr` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      past = past.substr(-maxSize * 2 - 2);

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = past.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(-maxLines);
      past = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis prefix...
      if (past.length > maxSize) {
        past = '...' + past.substr(-maxSize);
      }

      return past;
    },

    /**
     * return (part of the) upcoming input, i.e. for error messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     *
     * > ### NOTE ###
     * >
     * > *"upcoming input"* is defined as the whole of the both
     * > the *currently lexed* input, together with any remaining input
     * > following that. *"currently lexed"* input is the input 
     * > already recognized by the lexer but not yet returned with
     * > the lexer token. This happens when you are invoking this API
     * > from inside any lexer rule action code block. 
     * >
     * 
     * @public
     * @this {RegExpLexer}
     */
    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
      var next = this.match;

      if (maxSize < 0)
        maxSize = next.length + this._input.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = maxSize;          // can't ever have more input lines than this! 
      else if (!maxLines)
        maxLines = 1;

      // `substring` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      if (next.length < maxSize * 2 + 2) {
        next += this._input.substring(0, maxSize * 2 + 2);   // substring is faster on Chrome/V8 
      }

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = next.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(0, maxLines);
      next = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis postfix...
      if (next.length > maxSize) {
        next = next.substring(0, maxSize) + '...';
      }

      return next;
    },

    /**
     * return a string which displays the character position where the
     * lexing error occurred, i.e. for error messages
     * 
     * @public
     * @this {RegExpLexer}
     */
    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
      var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
      var c = new Array(pre.length + 1).join('-');
      return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    /**
     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
     * it MAY be NULL) and you MUST have a valid location info object anyway:
     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
     * and reconstruct the `actual` location info from those.
     * If this fails, the heuristic is to take the `current` location, IFF available.
     * If this fails as well, we assume the sought location is at/around the current lexer position
     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
     * values MAY be inaccurate!
     *
     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
     * 
     * @public
     * @this {RegExpLexer}
     */
    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
      var loc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      if (actual) {
        loc.first_line = actual.first_line | 0;
        loc.last_line = actual.last_line | 0;
        loc.first_column = actual.first_column | 0;
        loc.last_column = actual.last_column | 0;

        if (actual.range) {
          loc.range[0] = actual.range[0] | 0;
          loc.range[1] = actual.range[1] | 0;
        }
      }

      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
        // plan B: heuristic using preceding and following:
        if (loc.first_line <= 0 && preceding) {
          loc.first_line = preceding.last_line | 0;
          loc.first_column = preceding.last_column | 0;

          if (preceding.range) {
            loc.range[0] = actual.range[1] | 0;
          }
        }

        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
          loc.last_line = following.first_line | 0;
          loc.last_column = following.first_column | 0;

          if (following.range) {
            loc.range[1] = actual.range[0] | 0;
          }
        }

        // plan C?: see if the 'current' location is useful/sane too:
        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
          loc.first_line = current.first_line | 0;
          loc.first_column = current.first_column | 0;

          if (current.range) {
            loc.range[0] = current.range[0] | 0;
          }
        }

        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
          loc.last_line = current.last_line | 0;
          loc.last_column = current.last_column | 0;

          if (current.range) {
            loc.range[1] = current.range[1] | 0;
          }
        }
      }

      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
      // or plan D heuristics to produce a 'sensible' last_line value:
      if (loc.last_line <= 0) {
        if (loc.first_line <= 0) {
          loc.first_line = this.yylloc.first_line;
          loc.last_line = this.yylloc.last_line;
          loc.first_column = this.yylloc.first_column;
          loc.last_column = this.yylloc.last_column;
          loc.range[0] = this.yylloc.range[0];
          loc.range[1] = this.yylloc.range[1];
        } else {
          loc.last_line = this.yylloc.last_line;
          loc.last_column = this.yylloc.last_column;
          loc.range[1] = this.yylloc.range[1];
        }
      }

      if (loc.first_line <= 0) {
        loc.first_line = loc.last_line;
        loc.first_column = 0;  // loc.last_column; 
        loc.range[1] = loc.range[0];
      }

      if (loc.first_column < 0) {
        loc.first_column = 0;
      }

      if (loc.last_column < 0) {
        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);
      }

      return loc;
    },

    /**
     * return a string which displays the lines & columns of input which are referenced 
     * by the given location info range, plus a few lines of context.
     * 
     * This function pretty-prints the indicated section of the input, with line numbers 
     * and everything!
     * 
     * This function is very useful to provide highly readable error reports, while
     * the location range may be specified in various flexible ways:
     * 
     * - `loc` is the location info object which references the area which should be
     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
     *   characters below each character in the entire input range.
     * 
     * - `context_loc` is the *optional* location info object which instructs this
     *   pretty-printer how much *leading* context should be displayed alongside
     *   the area referenced by `loc`. This can help provide context for the displayed
     *   error, etc.
     * 
     *   When this location info is not provided, a default context of 3 lines is
     *   used.
     * 
     * - `context_loc2` is another *optional* location info object, which serves
     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
     *   context lines to display in the pretty-print output.
     * 
     *   When this location info is not provided, a default context of 1 line only is
     *   used.
     * 
     * Special Notes:
     * 
     * - when the `loc`-indicated range is very large (about 5 lines or more), then
     *   only the first and last few lines of this block are printed while a
     *   `...continued...` message will be printed between them.
     * 
     *   This serves the purpose of not printing a huge amount of text when the `loc`
     *   range happens to be huge: this way a manageable & readable output results
     *   for arbitrary large ranges.
     * 
     * - this function can display lines of input which whave not yet been lexed.
     *   `prettyPrintRange()` can access the entire input!
     * 
     * @public
     * @this {RegExpLexer}
     */
    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
      const CONTEXT = 3;
      const CONTEXT_TAIL = 1;
      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
      var input = this.matched + this._input;
      var lines = input.split('\n');
      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));
      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));
      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
      var ws_prefix = new Array(lineno_display_width).join(' ');
      var nonempty_line_indexes = [];

      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
        var lno = index + l0;
        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
        var rv = lno_pfx + ': ' + line;
        var errpfx = new Array(lineno_display_width + 1).join('^');
        var offset = 2 + 1;
        var len = 0;

        if (lno === loc.first_line) {
          offset += loc.first_column;

          len = Math.max(
            2,
            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1
          );
        } else if (lno === loc.last_line) {
          len = Math.max(2, loc.last_column + 1);
        } else if (lno > loc.first_line && lno < loc.last_line) {
          len = Math.max(2, line.length + 1);
        }

        if (len) {
          var lead = new Array(offset).join('.');
          var mark = new Array(len).join('^');
          rv += '\n' + errpfx + lead + mark;

          if (line.trim().length > 0) {
            nonempty_line_indexes.push(index);
          }
        }

        rv = rv.replace(/\t/g, ' ');
        return rv;
      });

      // now make sure we don't print an overly large amount of error area: limit it 
      // to the top and bottom line count:
      if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
        var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
        var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
        var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';
        intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
        rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
      }

      return rv.join('\n');
    },

    /**
     * helper function, used to produce a human readable description as a string, given
     * the input `yylloc` location object.
     * 
     * Set `display_range_too` to TRUE to include the string character index position(s)
     * in the description if the `yylloc.range` is available.
     * 
     * @public
     * @this {RegExpLexer}
     */
    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
      var l1 = yylloc.first_line;
      var l2 = yylloc.last_line;
      var c1 = yylloc.first_column;
      var c2 = yylloc.last_column;
      var dl = l2 - l1;
      var dc = c2 - c1;
      var rv;

      if (dl === 0) {
        rv = 'line ' + l1 + ', ';

        if (dc <= 1) {
          rv += 'column ' + c1;
        } else {
          rv += 'columns ' + c1 + ' .. ' + c2;
        }
      } else {
        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
      }

      if (yylloc.range && display_range_too) {
        var r1 = yylloc.range[0];
        var r2 = yylloc.range[1] - 1;

        if (r2 <= r1) {
          rv += ' {String Offset: ' + r1 + '}';
        } else {
          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
        }
      }

      return rv;
    },

    /**
     * test the lexed token: return FALSE when not a match, otherwise return token.
     * 
     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
     * contains the actually matched text string.
     * 
     * Also move the input cursor forward and update the match collectors:
     * 
     * - `yytext`
     * - `yyleng`
     * - `match`
     * - `matches`
     * - `yylloc`
     * - `offset`
     * 
     * @public
     * @this {RegExpLexer}
     */
    test_match: function lexer_test_match(match, indexed_rule) {
      var token, lines, backup, match_str, match_str_len;

      if (this.options.backtrack_lexer) {
        // save context
        backup = {
          yylineno: this.yylineno,

          yylloc: {
            first_line: this.yylloc.first_line,
            last_line: this.yylloc.last_line,
            first_column: this.yylloc.first_column,
            last_column: this.yylloc.last_column,
            range: this.yylloc.range.slice(0)
          },

          yytext: this.yytext,
          match: this.match,
          matches: this.matches,
          matched: this.matched,
          yyleng: this.yyleng,
          offset: this.offset,
          _more: this._more,
          _input: this._input,

          //_signaled_error_token: this._signaled_error_token,
          yy: this.yy,

          conditionStack: this.conditionStack.slice(0),
          done: this.done
        };
      }

      match_str = match[0];
      match_str_len = match_str.length;

      // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
      lines = match_str.split(/(?:\r\n?|\n)/g);

      if (lines.length > 1) {
        this.yylineno += lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = lines[lines.length - 1].length;
      } else {
        this.yylloc.last_column += match_str_len;
      }

      // }
      this.yytext += match_str;

      this.match += match_str;
      this.matched += match_str;
      this.matches = match;
      this.yyleng = this.yytext.length;
      this.yylloc.range[1] += match_str_len;

      // previous lex rules MAY have invoked the `more()` API rather than producing a token:
      // those rules will already have moved this `offset` forward matching their match lengths,
      // hence we must only add our own match length now:
      this.offset += match_str_len;

      this._more = false;
      this._backtrack = false;
      this._input = this._input.slice(match_str_len);

      // calling this method:
      //
      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
      token = this.performAction.call(
        this,
        this.yy,
        indexed_rule,
        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */
      );

      // otherwise, when the action codes are all simple return token statements:
      //token = this.simpleCaseActionClusters[indexed_rule];

      if (this.done && this._input) {
        this.done = false;
      }

      if (token) {
        return token;
      } else if (this._backtrack) {
        // recover context
        for (var k in backup) {
          this[k] = backup[k];
        }

        this.__currentRuleSet__ = null;
        return false;  // rule action called reject() implying the next rule should be tested instead. 
      } else if (this._signaled_error_token) {
        // produce one 'error' token as `.parseError()` in `reject()`
        // did not guarantee a failure signal by throwing an exception!
        token = this._signaled_error_token;

        this._signaled_error_token = false;
        return token;
      }

      return false;
    },

    /**
     * return next match in input
     * 
     * @public
     * @this {RegExpLexer}
     */
    next: function lexer_next() {
      if (this.done) {
        this.clear();
        return this.EOF;
      }

      if (!this._input) {
        this.done = true;
      }

      var token, match, tempMatch, index;

      if (!this._more) {
        this.clear();
      }

      var spec = this.__currentRuleSet__;

      if (!spec) {
        // Update the ruleset cache as we apparently encountered a state change or just started lexing.
        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
        // speed up those activities a tiny bit.
        spec = this.__currentRuleSet__ = this._currentRules();

        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
        if (!spec || !spec.rules) {
          var lineno_msg = '';

          if (this.options.trackPosition) {
            lineno_msg = ' on line ' + (this.yylineno + 1);
          }

          var p = this.constructLexErrorInfo(
            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!',
            false
          );

          // produce one 'error' token until this situation has been resolved, most probably by parse termination!
          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        }
      }

      var rule_ids = spec.rules;
      var regexes = spec.__rule_regexes;
      var len = spec.__rule_count;

      // Note: the arrays are 1-based, while `len` itself is a valid index,
      // hence the non-standard less-or-equal check in the next loop condition!
      for (var i = 1; i <= len; i++) {
        tempMatch = this._input.match(regexes[i]);

        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
          match = tempMatch;
          index = i;

          if (this.options.backtrack_lexer) {
            token = this.test_match(tempMatch, rule_ids[i]);

            if (token !== false) {
              return token;
            } else if (this._backtrack) {
              match = undefined;
              continue;  // rule action called reject() implying a rule MISmatch. 
            } else {
              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
              return false;
            }
          } else if (!this.options.flex) {
            break;
          }
        }
      }

      if (match) {
        token = this.test_match(match, rule_ids[index]);

        if (token !== false) {
          return token;
        }

        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
        return false;
      }

      if (!this._input) {
        this.done = true;
        this.clear();
        return this.EOF;
      } else {
        var lineno_msg = '';

        if (this.options.trackPosition) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': Unrecognized text.',
          this.options.lexerErrorsAreRecoverable
        );

        var pendingInput = this._input;
        var activeCondition = this.topState();
        var conditionStackDepth = this.conditionStack.length;
        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;

        if (token === this.ERROR) {
          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
          // has not consumed/modified any pending input or changed state in the error handler:
          if (!this.matches && // and make sure the input has been modified/consumed ...
          pendingInput === this._input && // ...or the lexer state has been modified significantly enough
          // to merit a non-consuming error handling action right now.
          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {
            this.input();
          }
        }

        return token;
      }
    },

    /**
     * return next match that has a token
     * 
     * @public
     * @this {RegExpLexer}
     */
    lex: function lexer_lex() {
      var r;

      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
      if (typeof this.pre_lex === 'function') {
        r = this.pre_lex.call(this, 0);
      }

      if (typeof this.options.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.pre_lex.call(this, r) || r;
      }

      if (this.yy && typeof this.yy.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.pre_lex.call(this, r) || r;
      }

      while (!r) {
        r = this.next();
      }

      if (this.yy && typeof this.yy.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.post_lex.call(this, r) || r;
      }

      if (typeof this.options.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.post_lex.call(this, r) || r;
      }

      if (typeof this.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.post_lex.call(this, r) || r;
      }

      return r;
    },

    /**
     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
     * `pre_lex()` nor any of the `post_lex()` callbacks.
     * 
     * @public
     * @this {RegExpLexer}
     */
    fastLex: function lexer_fastLex() {
      var r;

      while (!r) {
        r = this.next();
      }

      return r;
    },

    /**
     * return info about the lexer state that can help a parser or other lexer API user to use the
     * most efficient means available. This API is provided to aid run-time performance for larger
     * systems which employ this lexer.
     * 
     * @public
     * @this {RegExpLexer}
     */
    canIUse: function lexer_canIUse() {
      var rv = {
        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
      };

      return rv;
    },

    /**
     * backwards compatible alias for `pushState()`;
     * the latter is symmetrical with `popState()` and we advise to use
     * those APIs in any modern lexer code, rather than `begin()`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    begin: function lexer_begin(condition) {
      return this.pushState(condition);
    },

    /**
     * activates a new lexer condition state (pushes the new lexer
     * condition state onto the condition stack)
     * 
     * @public
     * @this {RegExpLexer}
     */
    pushState: function lexer_pushState(condition) {
      this.conditionStack.push(condition);
      this.__currentRuleSet__ = null;
      return this;
    },

    /**
     * pop the previously active lexer condition state off the condition
     * stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    popState: function lexer_popState() {
      var n = this.conditionStack.length - 1;

      if (n > 0) {
        this.__currentRuleSet__ = null;
        return this.conditionStack.pop();
      } else {
        return this.conditionStack[0];
      }
    },

    /**
     * return the currently active lexer condition state; when an index
     * argument is provided it produces the N-th previous condition state,
     * if available
     * 
     * @public
     * @this {RegExpLexer}
     */
    topState: function lexer_topState(n) {
      n = this.conditionStack.length - 1 - Math.abs(n || 0);

      if (n >= 0) {
        return this.conditionStack[n];
      } else {
        return 'INITIAL';
      }
    },

    /**
     * (internal) determine the lexer rule set which is active for the
     * currently active lexer condition state
     * 
     * @public
     * @this {RegExpLexer}
     */
    _currentRules: function lexer__currentRules() {
      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
      } else {
        return this.conditions['INITIAL'];
      }
    },

    /**
     * return the number of states currently on the stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    stateStackSize: function lexer_stateStackSize() {
      return this.conditionStack.length;
    },

    options: {
      trackPosition: true,
      caseInsensitive: true
    },

    JisonLexerError: JisonLexerError,

    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
      var yy_ = this;
      var YYSTATE = YY_START;

      switch (yyrulenumber) {
      case 10:
        /*! Conditions:: INITIAL */
        /*! Rule::       --(.*?)($|\r\n|\r|\n) */
        return;

        /* its a COMMENT */
        break;

      case 11:
        /*! Conditions:: INITIAL */
        /*! Rule::       \s+ */
        /* skip whitespace */
        break;

      case 14:
        /*! Conditions:: INITIAL */
        /*! Rule::       VALUE\s+OF\s+SEARCH */
        yy_.yytext = 'VALUE';

        return 21;
        break;

      case 15:
        /*! Conditions:: INITIAL */
        /*! Rule::       VALUE\s+OF\s+SELECT */
        yy_.yytext = 'VALUE';

        return 75;
        break;

      case 16:
        /*! Conditions:: INITIAL */
        /*! Rule::       ROW\s+OF\s+SELECT */
        yy_.yytext = 'ROW';

        return 75;
        break;

      case 17:
        /*! Conditions:: INITIAL */
        /*! Rule::       COLUMN\s+OF\s+SELECT */
        yy_.yytext = 'COLUMN';

        return 75;
        break;

      case 18:
        /*! Conditions:: INITIAL */
        /*! Rule::       MATRIX\s+OF\s+SELECT */
        yy_.yytext = 'MATRIX';

        return 75;
        break;

      case 19:
        /*! Conditions:: INITIAL */
        /*! Rule::       INDEX\s+OF\s+SELECT */
        yy_.yytext = 'INDEX';

        return 75;
        break;

      case 20:
        /*! Conditions:: INITIAL */
        /*! Rule::       RECORDSET\s+OF\s+SELECT */
        yy_.yytext = 'RECORDSET';

        return 75;
        break;

      case 21:
        /*! Conditions:: INITIAL */
        /*! Rule::       TEXT\s+OF\s+SELECT */
        yy_.yytext = 'TEXT';

        return 75;
        break;

      case 22:
        /*! Conditions:: INITIAL */
        /*! Rule::       SELECT */
        yy_.yytext = 'SELECT';

        return 75;
        break;

      case 231:
        /*! Conditions:: INITIAL */
        /*! Rule::       WORK */
        return 211;

        /* Is this keyword required? */
        break;

      default:
        return this.simpleCaseActionClusters[yyrulenumber];
      }
    },

    simpleCaseActionClusters: {
      /*! Conditions:: INITIAL */
      /*! Rule::       ``([^\`])+`` */
      0: 114,

      /*! Conditions:: INITIAL */
      /*! Rule::       \[\?\] */
      1: 143,

      /*! Conditions:: INITIAL */
      /*! Rule::       @\[ */
      2: 206,

      /*! Conditions:: INITIAL */
      /*! Rule::       ARRAY\[ */
      3: 141,

      /*! Conditions:: INITIAL */
      /*! Rule::       \[([^\]'])*?\] */
      4: 11,

      /*! Conditions:: INITIAL */
      /*! Rule::       `([^\`'])*?` */
      5: 11,

      /*! Conditions:: INITIAL */
      /*! Rule::       N(['](\\.|[^']|\\')*?['])+ */
      6: 138,

      /*! Conditions:: INITIAL */
      /*! Rule::       X(['](\\.|[^']|\\')*?['])+ */
      7: 138,

      /*! Conditions:: INITIAL */
      /*! Rule::       (['](\\.|[^']|\\')*?['])+ */
      8: 39,

      /*! Conditions:: INITIAL */
      /*! Rule::       (["](\\.|[^"]|\\")*?["])+ */
      9: 39,

      /*! Conditions:: INITIAL */
      /*! Rule::       \|\| */
      12: 154,

      /*! Conditions:: INITIAL */
      /*! Rule::       \| */
      13: 157,

      /*! Conditions:: INITIAL */
      /*! Rule::       ABSOLUTE */
      23: 237,

      /*! Conditions:: INITIAL */
      /*! Rule::       ACTION */
      24: 186,

      /*! Conditions:: INITIAL */
      /*! Rule::       ADD */
      25: 193,

      /*! Conditions:: INITIAL */
      /*! Rule::       AFTER */
      26: 233,

      /*! Conditions:: INITIAL */
      /*! Rule::       AGGR */
      27: 129,

      /*! Conditions:: INITIAL */
      /*! Rule::       AGGREGATE */
      28: 117,

      /*! Conditions:: INITIAL */
      /*! Rule::       AGGREGATOR */
      29: 117,

      /*! Conditions:: INITIAL */
      /*! Rule::       ALL */
      30: 60,

      /*! Conditions:: INITIAL */
      /*! Rule::       ALTER */
      31: 191,

      /*! Conditions:: INITIAL */
      /*! Rule::       AND */
      32: 64,

      /*! Conditions:: INITIAL */
      /*! Rule::       ANTI */
      33: 95,

      /*! Conditions:: INITIAL */
      /*! Rule::       ANY */
      34: 61,

      /*! Conditions:: INITIAL */
      /*! Rule::       APPLY */
      35: 84,

      /*! Conditions:: INITIAL */
      /*! Rule::       ARRAY */
      36: 130,

      /*! Conditions:: INITIAL */
      /*! Rule::       AS */
      37: 18,

      /*! Conditions:: INITIAL */
      /*! Rule::       ASSERT */
      38: 205,

      /*! Conditions:: INITIAL */
      /*! Rule::       ASC */
      39: 107,

      /*! Conditions:: INITIAL */
      /*! Rule::       ATTACH */
      40: 195,

      /*! Conditions:: INITIAL */
      /*! Rule::       AUTO(_)?INCREMENT */
      41: 177,

      /*! Conditions:: INITIAL */
      /*! Rule::       AVG */
      42: 128,

      /*! Conditions:: INITIAL */
      /*! Rule::       BEFORE */
      43: 232,

      /*! Conditions:: INITIAL */
      /*! Rule::       BEGIN */
      44: 213,

      /*! Conditions:: INITIAL */
      /*! Rule::       BETWEEN */
      45: 165,

      /*! Conditions:: INITIAL */
      /*! Rule::       BREAK */
      46: 216,

      /*! Conditions:: INITIAL */
      /*! Rule::       NOT\s+BETWEEN */
      47: 166,

      /*! Conditions:: INITIAL */
      /*! Rule::       NOT\s+LIKE */
      48: 153,

      /*! Conditions:: INITIAL */
      /*! Rule::       BY */
      49: 31,

      /*! Conditions:: INITIAL */
      /*! Rule::       ~~\* */
      50: 27,

      /*! Conditions:: INITIAL */
      /*! Rule::       !~~\* */
      51: 153,

      /*! Conditions:: INITIAL */
      /*! Rule::       ~~ */
      52: 27,

      /*! Conditions:: INITIAL */
      /*! Rule::       !~~ */
      53: 153,

      /*! Conditions:: INITIAL */
      /*! Rule::       ILIKE */
      54: 27,

      /*! Conditions:: INITIAL */
      /*! Rule::       NOT\s+ILIKE */
      55: 153,

      /*! Conditions:: INITIAL */
      /*! Rule::       CALL */
      56: 230,

      /*! Conditions:: INITIAL */
      /*! Rule::       CASE */
      57: 144,

      /*! Conditions:: INITIAL */
      /*! Rule::       CAST */
      58: 119,

      /*! Conditions:: INITIAL */
      /*! Rule::       CHECK */
      59: 180,

      /*! Conditions:: INITIAL */
      /*! Rule::       CLASS */
      60: 37,

      /*! Conditions:: INITIAL */
      /*! Rule::       CLOSE */
      61: 'CLOSE',

      /*! Conditions:: INITIAL */
      /*! Rule::       COLLATE */
      62: 108,

      /*! Conditions:: INITIAL */
      /*! Rule::       COLUMN */
      63: 76,

      /*! Conditions:: INITIAL */
      /*! Rule::       COLUMNS */
      64: 76,

      /*! Conditions:: INITIAL */
      /*! Rule::       COMMIT */
      65: 210,

      /*! Conditions:: INITIAL */
      /*! Rule::       CONSTRAINT */
      66: 179,

      /*! Conditions:: INITIAL */
      /*! Rule::       CONTENT */
      67: 226,

      /*! Conditions:: INITIAL */
      /*! Rule::       CONTINUE */
      68: 215,

      /*! Conditions:: INITIAL */
      /*! Rule::       CONVERT */
      69: 120,

      /*! Conditions:: INITIAL */
      /*! Rule::       CORRESPONDING */
      70: 103,

      /*! Conditions:: INITIAL */
      /*! Rule::       COUNT */
      71: 125,

      /*! Conditions:: INITIAL */
      /*! Rule::       CREATE */
      72: 115,

      /*! Conditions:: INITIAL */
      /*! Rule::       CROSS */
      73: 83,

      /*! Conditions:: INITIAL */
      /*! Rule::       CUBE */
      74: 101,

      /*! Conditions:: INITIAL */
      /*! Rule::       CURRENT_TIMESTAMP */
      75: 113,

      /*! Conditions:: INITIAL */
      /*! Rule::       CURSOR */
      76: 'CURSOR',

      /*! Conditions:: INITIAL */
      /*! Rule::       DATABASE(S)? */
      77: 196,

      /*! Conditions:: INITIAL */
      /*! Rule::       DATEADD */
      78: 132,

      /*! Conditions:: INITIAL */
      /*! Rule::       DATEDIFF */
      79: 133,

      /*! Conditions:: INITIAL */
      /*! Rule::       TIMESTAMPDIFF */
      80: 134,

      /*! Conditions:: INITIAL */
      /*! Rule::       DECLARE */
      81: 220,

      /*! Conditions:: INITIAL */
      /*! Rule::       DEFAULT */
      82: 173,

      /*! Conditions:: INITIAL */
      /*! Rule::       DELETE */
      83: 171,

      /*! Conditions:: INITIAL */
      /*! Rule::       DELETED */
      84: 'DELETED',

      /*! Conditions:: INITIAL */
      /*! Rule::       DESC */
      85: 107,

      /*! Conditions:: INITIAL */
      /*! Rule::       DETACH */
      86: 197,

      /*! Conditions:: INITIAL */
      /*! Rule::       DISTINCT */
      87: 73,

      /*! Conditions:: INITIAL */
      /*! Rule::       DROP */
      88: 190,

      /*! Conditions:: INITIAL */
      /*! Rule::       ECHO */
      89: 219,

      /*! Conditions:: INITIAL */
      /*! Rule::       EDGE */
      90: 42,

      /*! Conditions:: INITIAL */
      /*! Rule::       END */
      91: 145,

      /*! Conditions:: INITIAL */
      /*! Rule::       ENUM */
      92: 188,

      /*! Conditions:: INITIAL */
      /*! Rule::       ELSE */
      93: 148,

      /*! Conditions:: INITIAL */
      /*! Rule::       ESCAPE */
      94: 152,

      /*! Conditions:: INITIAL */
      /*! Rule::       EXCEPT */
      95: 63,

      /*! Conditions:: INITIAL */
      /*! Rule::       EXEC */
      96: 230,

      /*! Conditions:: INITIAL */
      /*! Rule::       EXECUTE */
      97: 230,

      /*! Conditions:: INITIAL */
      /*! Rule::       EXISTS */
      98: 140,

      /*! Conditions:: INITIAL */
      /*! Rule::       EXPLAIN */
      99: 12,

      /*! Conditions:: INITIAL */
      /*! Rule::       FALSE */
      100: 137,

      /*! Conditions:: INITIAL */
      /*! Rule::       FETCH */
      101: 112,

      /*! Conditions:: INITIAL */
      /*! Rule::       FIRST */
      102: 105,

      /*! Conditions:: INITIAL */
      /*! Rule::       FOR */
      103: 23,

      /*! Conditions:: INITIAL */
      /*! Rule::       FOREIGN */
      104: 183,

      /*! Conditions:: INITIAL */
      /*! Rule::       FROM */
      105: 72,

      /*! Conditions:: INITIAL */
      /*! Rule::       FULL */
      106: 93,

      /*! Conditions:: INITIAL */
      /*! Rule::       FUNCTION */
      107: 116,

      /*! Conditions:: INITIAL */
      /*! Rule::       GLOB */
      108: 151,

      /*! Conditions:: INITIAL */
      /*! Rule::       GO */
      109: 317,

      /*! Conditions:: INITIAL */
      /*! Rule::       GRAPH */
      110: 227,

      /*! Conditions:: INITIAL */
      /*! Rule::       GROUP */
      111: 98,

      /*! Conditions:: INITIAL */
      /*! Rule::       GROUPING */
      112: 99,

      /*! Conditions:: INITIAL */
      /*! Rule::       HAVING */
      113: 102,

      /*! Conditions:: INITIAL */
      /*! Rule::       IF */
      114: 58,

      /*! Conditions:: INITIAL */
      /*! Rule::       IDENTITY */
      115: 177,

      /*! Conditions:: INITIAL */
      /*! Rule::       IS */
      116: 167,

      /*! Conditions:: INITIAL */
      /*! Rule::       IN */
      117: 25,

      /*! Conditions:: INITIAL */
      /*! Rule::       INDEX */
      118: 79,

      /*! Conditions:: INITIAL */
      /*! Rule::       INDEXED */
      119: 86,

      /*! Conditions:: INITIAL */
      /*! Rule::       INNER */
      120: 90,

      /*! Conditions:: INITIAL */
      /*! Rule::       INSTEAD */
      121: 234,

      /*! Conditions:: INITIAL */
      /*! Rule::       INSERT */
      122: 172,

      /*! Conditions:: INITIAL */
      /*! Rule::       INSERTED */
      123: 87,

      /*! Conditions:: INITIAL */
      /*! Rule::       INTERSECT */
      124: 62,

      /*! Conditions:: INITIAL */
      /*! Rule::       INTERVAL */
      125: 135,

      /*! Conditions:: INITIAL */
      /*! Rule::       INTO */
      126: 82,

      /*! Conditions:: INITIAL */
      /*! Rule::       JOIN */
      127: 89,

      /*! Conditions:: INITIAL */
      /*! Rule::       KEY */
      128: 182,

      /*! Conditions:: INITIAL */
      /*! Rule::       LAST */
      129: 106,

      /*! Conditions:: INITIAL */
      /*! Rule::       LET */
      130: 'LET',

      /*! Conditions:: INITIAL */
      /*! Rule::       LEFT */
      131: 91,

      /*! Conditions:: INITIAL */
      /*! Rule::       LIKE */
      132: 27,

      /*! Conditions:: INITIAL */
      /*! Rule::       LIMIT */
      133: 110,

      /*! Conditions:: INITIAL */
      /*! Rule::       MATCHED */
      134: 223,

      /*! Conditions:: INITIAL */
      /*! Rule::       MATRIX */
      135: 77,

      /*! Conditions:: INITIAL */
      /*! Rule::       MAX(\s+)?(?=\() */
      136: 127,

      /*! Conditions:: INITIAL */
      /*! Rule::       MAX(\s+)?(?=(,|\))) */
      137: 189,

      /*! Conditions:: INITIAL */
      /*! Rule::       MIN(\s+)?(?=\() */
      138: 126,

      /*! Conditions:: INITIAL */
      /*! Rule::       MERGE */
      139: 222,

      /*! Conditions:: INITIAL */
      /*! Rule::       MINUS */
      140: 63,

      /*! Conditions:: INITIAL */
      /*! Rule::       MODIFY */
      141: 194,

      /*! Conditions:: INITIAL */
      /*! Rule::       NATURAL */
      142: 88,

      /*! Conditions:: INITIAL */
      /*! Rule::       NEXT */
      143: 358,

      /*! Conditions:: INITIAL */
      /*! Rule::       NEW */
      144: 118,

      /*! Conditions:: INITIAL */
      /*! Rule::       NOCASE */
      145: 109,

      /*! Conditions:: INITIAL */
      /*! Rule::       NO */
      146: 185,

      /*! Conditions:: INITIAL */
      /*! Rule::       NOT */
      147: 57,

      /*! Conditions:: INITIAL */
      /*! Rule::       NULL */
      148: 139,

      /*! Conditions:: INITIAL */
      /*! Rule::       NULLS */
      149: 104,

      /*! Conditions:: INITIAL */
      /*! Rule::       OFF */
      150: 209,

      /*! Conditions:: INITIAL */
      /*! Rule::       ON */
      151: 96,

      /*! Conditions:: INITIAL */
      /*! Rule::       ONLY */
      152: 202,

      /*! Conditions:: INITIAL */
      /*! Rule::       OF */
      153: 36,

      /*! Conditions:: INITIAL */
      /*! Rule::       OFFSET */
      154: 111,

      /*! Conditions:: INITIAL */
      /*! Rule::       OPEN */
      155: 'OPEN',

      /*! Conditions:: INITIAL */
      /*! Rule::       OPTION */
      156: 203,

      /*! Conditions:: INITIAL */
      /*! Rule::       OR */
      157: 65,

      /*! Conditions:: INITIAL */
      /*! Rule::       ORDER */
      158: 30,

      /*! Conditions:: INITIAL */
      /*! Rule::       OUTER */
      159: 85,

      /*! Conditions:: INITIAL */
      /*! Rule::       OVER */
      160: 121,

      /*! Conditions:: INITIAL */
      /*! Rule::       PATH */
      161: 66,

      /*! Conditions:: INITIAL */
      /*! Rule::       PARTITION */
      162: 122,

      /*! Conditions:: INITIAL */
      /*! Rule::       PERCENT */
      163: 475,

      /*! Conditions:: INITIAL */
      /*! Rule::       PIVOT */
      164: 22,

      /*! Conditions:: INITIAL */
      /*! Rule::       PLAN */
      165: 14,

      /*! Conditions:: INITIAL */
      /*! Rule::       PRIMARY */
      166: 181,

      /*! Conditions:: INITIAL */
      /*! Rule::       PRINT */
      167: 217,

      /*! Conditions:: INITIAL */
      /*! Rule::       PRIOR */
      168: 389,

      /*! Conditions:: INITIAL */
      /*! Rule::       QUERY */
      169: 13,

      /*! Conditions:: INITIAL */
      /*! Rule::       READ */
      170: 201,

      /*! Conditions:: INITIAL */
      /*! Rule::       RECORDSET */
      171: 80,

      /*! Conditions:: INITIAL */
      /*! Rule::       REDUCE */
      172: 'REDUCE',

      /*! Conditions:: INITIAL */
      /*! Rule::       REFERENCES */
      173: 184,

      /*! Conditions:: INITIAL */
      /*! Rule::       REGEXP */
      174: 149,

      /*! Conditions:: INITIAL */
      /*! Rule::       REINDEX */
      175: 235,

      /*! Conditions:: INITIAL */
      /*! Rule::       RELATIVE */
      176: 393,

      /*! Conditions:: INITIAL */
      /*! Rule::       REMOVE */
      177: 26,

      /*! Conditions:: INITIAL */
      /*! Rule::       RENAME */
      178: 192,

      /*! Conditions:: INITIAL */
      /*! Rule::       REPEAT */
      179: 68,

      /*! Conditions:: INITIAL */
      /*! Rule::       REPLACE */
      180: 131,

      /*! Conditions:: INITIAL */
      /*! Rule::       REQUIRE */
      181: 218,

      /*! Conditions:: INITIAL */
      /*! Rule::       RESTORE */
      182: 398,

      /*! Conditions:: INITIAL */
      /*! Rule::       RETURN */
      183: 67,

      /*! Conditions:: INITIAL */
      /*! Rule::       RETURNS */
      184: 67,

      /*! Conditions:: INITIAL */
      /*! Rule::       RIGHT */
      185: 92,

      /*! Conditions:: INITIAL */
      /*! Rule::       ROLLBACK */
      186: 212,

      /*! Conditions:: INITIAL */
      /*! Rule::       ROLLUP */
      187: 100,

      /*! Conditions:: INITIAL */
      /*! Rule::       ROW */
      188: 55,

      /*! Conditions:: INITIAL */
      /*! Rule::       ROWS */
      189: 476,

      /*! Conditions:: INITIAL */
      /*! Rule::       SCHEMA(S)? */
      190: 196,

      /*! Conditions:: INITIAL */
      /*! Rule::       SEARCH */
      191: 21,

      /*! Conditions:: INITIAL */
      /*! Rule::       SEMI */
      192: 94,

      /*! Conditions:: INITIAL */
      /*! Rule::       SET */
      193: 52,

      /*! Conditions:: INITIAL */
      /*! Rule::       SETS */
      194: 52,

      /*! Conditions:: INITIAL */
      /*! Rule::       SHOW */
      195: 199,

      /*! Conditions:: INITIAL */
      /*! Rule::       SOME */
      196: 169,

      /*! Conditions:: INITIAL */
      /*! Rule::       SOURCE */
      197: 204,

      /*! Conditions:: INITIAL */
      /*! Rule::       STRATEGY */
      198: 'STRATEGY',

      /*! Conditions:: INITIAL */
      /*! Rule::       STORE */
      199: 'STORE',

      /*! Conditions:: INITIAL */
      /*! Rule::       SUM */
      200: 123,

      /*! Conditions:: INITIAL */
      /*! Rule::       TOTAL */
      201: 124,

      /*! Conditions:: INITIAL */
      /*! Rule::       TABLE */
      202: 176,

      /*! Conditions:: INITIAL */
      /*! Rule::       TABLES */
      203: 176,

      /*! Conditions:: INITIAL */
      /*! Rule::       TARGET */
      204: 224,

      /*! Conditions:: INITIAL */
      /*! Rule::       TEMP */
      205: 178,

      /*! Conditions:: INITIAL */
      /*! Rule::       TEMPORARY */
      206: 178,

      /*! Conditions:: INITIAL */
      /*! Rule::       TEXTSTRING */
      207: 78,

      /*! Conditions:: INITIAL */
      /*! Rule::       THEN */
      208: 147,

      /*! Conditions:: INITIAL */
      /*! Rule::       TIMEOUT */
      209: 'TIMEOUT',

      /*! Conditions:: INITIAL */
      /*! Rule::       TO */
      210: 53,

      /*! Conditions:: INITIAL */
      /*! Rule::       TOP */
      211: 81,

      /*! Conditions:: INITIAL */
      /*! Rule::       TRAN */
      212: 211,

      /*! Conditions:: INITIAL */
      /*! Rule::       TRANSACTION */
      213: 211,

      /*! Conditions:: INITIAL */
      /*! Rule::       TRIGGER */
      214: 231,

      /*! Conditions:: INITIAL */
      /*! Rule::       TRUE */
      215: 136,

      /*! Conditions:: INITIAL */
      /*! Rule::       TRUNCATE */
      216: 221,

      /*! Conditions:: INITIAL */
      /*! Rule::       UNION */
      217: 59,

      /*! Conditions:: INITIAL */
      /*! Rule::       UNIQUE */
      218: 74,

      /*! Conditions:: INITIAL */
      /*! Rule::       UNPIVOT */
      219: 24,

      /*! Conditions:: INITIAL */
      /*! Rule::       UPDATE */
      220: 170,

      /*! Conditions:: INITIAL */
      /*! Rule::       USE */
      221: 198,

      /*! Conditions:: INITIAL */
      /*! Rule::       USING */
      222: 97,

      /*! Conditions:: INITIAL */
      /*! Rule::       VALUE */
      223: 54,

      /*! Conditions:: INITIAL */
      /*! Rule::       VALUES */
      224: 174,

      /*! Conditions:: INITIAL */
      /*! Rule::       VERTEX */
      225: 41,

      /*! Conditions:: INITIAL */
      /*! Rule::       VIEW */
      226: 200,

      /*! Conditions:: INITIAL */
      /*! Rule::       WHEN */
      227: 146,

      /*! Conditions:: INITIAL */
      /*! Rule::       WHERE */
      228: 35,

      /*! Conditions:: INITIAL */
      /*! Rule::       WHILE */
      229: 214,

      /*! Conditions:: INITIAL */
      /*! Rule::       WITH */
      230: 16,

      /*! Conditions:: INITIAL */
      /*! Rule::       (\d*[.])?\d+[eE]\d+ */
      232: 38,

      /*! Conditions:: INITIAL */
      /*! Rule::       (\d*[.])?\d+ */
      233: 38,

      /*! Conditions:: INITIAL */
      /*! Rule::       -> */
      234: 28,

      /*! Conditions:: INITIAL */
      /*! Rule::       # */
      235: 44,

      /*! Conditions:: INITIAL */
      /*! Rule::       \+ */
      236: 69,

      /*! Conditions:: INITIAL */
      /*! Rule::       - */
      237: 155,

      /*! Conditions:: INITIAL */
      /*! Rule::       \* */
      238: 70,

      /*! Conditions:: INITIAL */
      /*! Rule::       \/ */
      239: 40,

      /*! Conditions:: INITIAL */
      /*! Rule::       % */
      240: 45,

      /*! Conditions:: INITIAL */
      /*! Rule::       !=== */
      241: 164,

      /*! Conditions:: INITIAL */
      /*! Rule::       === */
      242: 161,

      /*! Conditions:: INITIAL */
      /*! Rule::       !== */
      243: 163,

      /*! Conditions:: INITIAL */
      /*! Rule::       == */
      244: 160,

      /*! Conditions:: INITIAL */
      /*! Rule::       >= */
      245: 158,

      /*! Conditions:: INITIAL */
      /*! Rule::       & */
      246: 156,

      /*! Conditions:: INITIAL */
      /*! Rule::       \| */
      247: 157,

      /*! Conditions:: INITIAL */
      /*! Rule::       << */
      248: 49,

      /*! Conditions:: INITIAL */
      /*! Rule::       >> */
      249: 48,

      /*! Conditions:: INITIAL */
      /*! Rule::       > */
      250: 46,

      /*! Conditions:: INITIAL */
      /*! Rule::       <= */
      251: 159,

      /*! Conditions:: INITIAL */
      /*! Rule::       <> */
      252: 162,

      /*! Conditions:: INITIAL */
      /*! Rule::       < */
      253: 47,

      /*! Conditions:: INITIAL */
      /*! Rule::       = */
      254: 34,

      /*! Conditions:: INITIAL */
      /*! Rule::       != */
      255: 162,

      /*! Conditions:: INITIAL */
      /*! Rule::       \( */
      256: 19,

      /*! Conditions:: INITIAL */
      /*! Rule::       \) */
      257: 20,

      /*! Conditions:: INITIAL */
      /*! Rule::       @ */
      258: 51,

      /*! Conditions:: INITIAL */
      /*! Rule::       \{ */
      259: 207,

      /*! Conditions:: INITIAL */
      /*! Rule::       \} */
      260: 208,

      /*! Conditions:: INITIAL */
      /*! Rule::       \] */
      261: 142,

      /*! Conditions:: INITIAL */
      /*! Rule::       :- */
      262: 228,

      /*! Conditions:: INITIAL */
      /*! Rule::       \?- */
      263: 229,

      /*! Conditions:: INITIAL */
      /*! Rule::       \.\. */
      264: 32,

      /*! Conditions:: INITIAL */
      /*! Rule::       \. */
      265: 29,

      /*! Conditions:: INITIAL */
      /*! Rule::       , */
      266: 17,

      /*! Conditions:: INITIAL */
      /*! Rule::       :: */
      267: 168,

      /*! Conditions:: INITIAL */
      /*! Rule::       : */
      268: 56,

      /*! Conditions:: INITIAL */
      /*! Rule::       ; */
      269: 474,

      /*! Conditions:: INITIAL */
      /*! Rule::       \$ */
      270: 50,

      /*! Conditions:: INITIAL */
      /*! Rule::       \? */
      271: 71,

      /*! Conditions:: INITIAL */
      /*! Rule::       ! */
      272: 43,

      /*! Conditions:: INITIAL */
      /*! Rule::       \^ */
      273: 33,

      /*! Conditions:: INITIAL */
      /*! Rule::       ~ */
      274: 150,

      /*! Conditions:: INITIAL */
      /*! Rule::       [0-9]*[a-zA-Z_]+[a-zA-Z_0-9]* */
      275: 10,

      /*! Conditions:: INITIAL */
      /*! Rule::       $ */
      276: 1,

      /*! Conditions:: INITIAL */
      /*! Rule::       . */
      277: 'INVALID'
    },

    rules: [
      /*   0: */  /^(?:``([^`])+``)/i,
      /*   1: */  /^(?:\[\?\])/i,
      /*   2: */  /^(?:@\[)/i,
      /*   3: */  /^(?:ARRAY\[)/i,
      /*   4: */  /^(?:\[([^\]'])*?\])/i,
      /*   5: */  /^(?:`([^'`])*?`)/i,
      /*   6: */  /^(?:N(['](\\.|[^']|\\')*?['])+)/i,
      /*   7: */  /^(?:X(['](\\.|[^']|\\')*?['])+)/i,
      /*   8: */  /^(?:(['](\\.|[^']|\\')*?['])+)/i,
      /*   9: */  /^(?:(["](\\.|[^"]|\\")*?["])+)/i,
      /*  10: */  /^(?:--(.*?)($|\r\n|\r|\n))/i,
      /*  11: */  /^(?:\s+)/i,
      /*  12: */  /^(?:\|\|)/i,
      /*  13: */  /^(?:\|)/i,
      /*  14: */  /^(?:VALUE\s+OF\s+SEARCH)/i,
      /*  15: */  /^(?:VALUE\s+OF\s+SELECT)/i,
      /*  16: */  /^(?:ROW\s+OF\s+SELECT)/i,
      /*  17: */  /^(?:COLUMN\s+OF\s+SELECT)/i,
      /*  18: */  /^(?:MATRIX\s+OF\s+SELECT)/i,
      /*  19: */  /^(?:INDEX\s+OF\s+SELECT)/i,
      /*  20: */  /^(?:RECORDSET\s+OF\s+SELECT)/i,
      /*  21: */  /^(?:TEXT\s+OF\s+SELECT)/i,
      /*  22: */  /^(?:SELECT)/i,
      /*  23: */  /^(?:ABSOLUTE)/i,
      /*  24: */  /^(?:ACTION)/i,
      /*  25: */  /^(?:ADD)/i,
      /*  26: */  /^(?:AFTER)/i,
      /*  27: */  /^(?:AGGR)/i,
      /*  28: */  /^(?:AGGREGATE)/i,
      /*  29: */  /^(?:AGGREGATOR)/i,
      /*  30: */  /^(?:ALL)/i,
      /*  31: */  /^(?:ALTER)/i,
      /*  32: */  /^(?:AND)/i,
      /*  33: */  /^(?:ANTI)/i,
      /*  34: */  /^(?:ANY)/i,
      /*  35: */  /^(?:APPLY)/i,
      /*  36: */  /^(?:ARRAY)/i,
      /*  37: */  /^(?:AS)/i,
      /*  38: */  /^(?:ASSERT)/i,
      /*  39: */  /^(?:ASC)/i,
      /*  40: */  /^(?:ATTACH)/i,
      /*  41: */  /^(?:AUTO(_)?INCREMENT)/i,
      /*  42: */  /^(?:AVG)/i,
      /*  43: */  /^(?:BEFORE)/i,
      /*  44: */  /^(?:BEGIN)/i,
      /*  45: */  /^(?:BETWEEN)/i,
      /*  46: */  /^(?:BREAK)/i,
      /*  47: */  /^(?:NOT\s+BETWEEN)/i,
      /*  48: */  /^(?:NOT\s+LIKE)/i,
      /*  49: */  /^(?:BY)/i,
      /*  50: */  /^(?:~~\*)/i,
      /*  51: */  /^(?:!~~\*)/i,
      /*  52: */  /^(?:~~)/i,
      /*  53: */  /^(?:!~~)/i,
      /*  54: */  /^(?:ILIKE)/i,
      /*  55: */  /^(?:NOT\s+ILIKE)/i,
      /*  56: */  /^(?:CALL)/i,
      /*  57: */  /^(?:CASE)/i,
      /*  58: */  /^(?:CAST)/i,
      /*  59: */  /^(?:CHECK)/i,
      /*  60: */  /^(?:CLASS)/i,
      /*  61: */  /^(?:CLOSE)/i,
      /*  62: */  /^(?:COLLATE)/i,
      /*  63: */  /^(?:COLUMN)/i,
      /*  64: */  /^(?:COLUMNS)/i,
      /*  65: */  /^(?:COMMIT)/i,
      /*  66: */  /^(?:CONSTRAINT)/i,
      /*  67: */  /^(?:CONTENT)/i,
      /*  68: */  /^(?:CONTINUE)/i,
      /*  69: */  /^(?:CONVERT)/i,
      /*  70: */  /^(?:CORRESPONDING)/i,
      /*  71: */  /^(?:COUNT)/i,
      /*  72: */  /^(?:CREATE)/i,
      /*  73: */  /^(?:CROSS)/i,
      /*  74: */  /^(?:CUBE)/i,
      /*  75: */  /^(?:CURRENT_TIMESTAMP)/i,
      /*  76: */  /^(?:CURSOR)/i,
      /*  77: */  /^(?:DATABASE(S)?)/i,
      /*  78: */  /^(?:DATEADD)/i,
      /*  79: */  /^(?:DATEDIFF)/i,
      /*  80: */  /^(?:TIMESTAMPDIFF)/i,
      /*  81: */  /^(?:DECLARE)/i,
      /*  82: */  /^(?:DEFAULT)/i,
      /*  83: */  /^(?:DELETE)/i,
      /*  84: */  /^(?:DELETED)/i,
      /*  85: */  /^(?:DESC)/i,
      /*  86: */  /^(?:DETACH)/i,
      /*  87: */  /^(?:DISTINCT)/i,
      /*  88: */  /^(?:DROP)/i,
      /*  89: */  /^(?:ECHO)/i,
      /*  90: */  /^(?:EDGE)/i,
      /*  91: */  /^(?:END)/i,
      /*  92: */  /^(?:ENUM)/i,
      /*  93: */  /^(?:ELSE)/i,
      /*  94: */  /^(?:ESCAPE)/i,
      /*  95: */  /^(?:EXCEPT)/i,
      /*  96: */  /^(?:EXEC)/i,
      /*  97: */  /^(?:EXECUTE)/i,
      /*  98: */  /^(?:EXISTS)/i,
      /*  99: */  /^(?:EXPLAIN)/i,
      /* 100: */  /^(?:FALSE)/i,
      /* 101: */  /^(?:FETCH)/i,
      /* 102: */  /^(?:FIRST)/i,
      /* 103: */  /^(?:FOR)/i,
      /* 104: */  /^(?:FOREIGN)/i,
      /* 105: */  /^(?:FROM)/i,
      /* 106: */  /^(?:FULL)/i,
      /* 107: */  /^(?:FUNCTION)/i,
      /* 108: */  /^(?:GLOB)/i,
      /* 109: */  /^(?:GO)/i,
      /* 110: */  /^(?:GRAPH)/i,
      /* 111: */  /^(?:GROUP)/i,
      /* 112: */  /^(?:GROUPING)/i,
      /* 113: */  /^(?:HAVING)/i,
      /* 114: */  /^(?:IF)/i,
      /* 115: */  /^(?:IDENTITY)/i,
      /* 116: */  /^(?:IS)/i,
      /* 117: */  /^(?:IN)/i,
      /* 118: */  /^(?:INDEX)/i,
      /* 119: */  /^(?:INDEXED)/i,
      /* 120: */  /^(?:INNER)/i,
      /* 121: */  /^(?:INSTEAD)/i,
      /* 122: */  /^(?:INSERT)/i,
      /* 123: */  /^(?:INSERTED)/i,
      /* 124: */  /^(?:INTERSECT)/i,
      /* 125: */  /^(?:INTERVAL)/i,
      /* 126: */  /^(?:INTO)/i,
      /* 127: */  /^(?:JOIN)/i,
      /* 128: */  /^(?:KEY)/i,
      /* 129: */  /^(?:LAST)/i,
      /* 130: */  /^(?:LET)/i,
      /* 131: */  /^(?:LEFT)/i,
      /* 132: */  /^(?:LIKE)/i,
      /* 133: */  /^(?:LIMIT)/i,
      /* 134: */  /^(?:MATCHED)/i,
      /* 135: */  /^(?:MATRIX)/i,
      /* 136: */  /^(?:MAX(\s+)?(?=\())/i,
      /* 137: */  /^(?:MAX(\s+)?(?=(,|\))))/i,
      /* 138: */  /^(?:MIN(\s+)?(?=\())/i,
      /* 139: */  /^(?:MERGE)/i,
      /* 140: */  /^(?:MINUS)/i,
      /* 141: */  /^(?:MODIFY)/i,
      /* 142: */  /^(?:NATURAL)/i,
      /* 143: */  /^(?:NEXT)/i,
      /* 144: */  /^(?:NEW)/i,
      /* 145: */  /^(?:NOCASE)/i,
      /* 146: */  /^(?:NO)/i,
      /* 147: */  /^(?:NOT)/i,
      /* 148: */  /^(?:NULL)/i,
      /* 149: */  /^(?:NULLS)/i,
      /* 150: */  /^(?:OFF)/i,
      /* 151: */  /^(?:ON)/i,
      /* 152: */  /^(?:ONLY)/i,
      /* 153: */  /^(?:OF)/i,
      /* 154: */  /^(?:OFFSET)/i,
      /* 155: */  /^(?:OPEN)/i,
      /* 156: */  /^(?:OPTION)/i,
      /* 157: */  /^(?:OR)/i,
      /* 158: */  /^(?:ORDER)/i,
      /* 159: */  /^(?:OUTER)/i,
      /* 160: */  /^(?:OVER)/i,
      /* 161: */  /^(?:PATH)/i,
      /* 162: */  /^(?:PARTITION)/i,
      /* 163: */  /^(?:PERCENT)/i,
      /* 164: */  /^(?:PIVOT)/i,
      /* 165: */  /^(?:PLAN)/i,
      /* 166: */  /^(?:PRIMARY)/i,
      /* 167: */  /^(?:PRINT)/i,
      /* 168: */  /^(?:PRIOR)/i,
      /* 169: */  /^(?:QUERY)/i,
      /* 170: */  /^(?:READ)/i,
      /* 171: */  /^(?:RECORDSET)/i,
      /* 172: */  /^(?:REDUCE)/i,
      /* 173: */  /^(?:REFERENCES)/i,
      /* 174: */  /^(?:REGEXP)/i,
      /* 175: */  /^(?:REINDEX)/i,
      /* 176: */  /^(?:RELATIVE)/i,
      /* 177: */  /^(?:REMOVE)/i,
      /* 178: */  /^(?:RENAME)/i,
      /* 179: */  /^(?:REPEAT)/i,
      /* 180: */  /^(?:REPLACE)/i,
      /* 181: */  /^(?:REQUIRE)/i,
      /* 182: */  /^(?:RESTORE)/i,
      /* 183: */  /^(?:RETURN)/i,
      /* 184: */  /^(?:RETURNS)/i,
      /* 185: */  /^(?:RIGHT)/i,
      /* 186: */  /^(?:ROLLBACK)/i,
      /* 187: */  /^(?:ROLLUP)/i,
      /* 188: */  /^(?:ROW)/i,
      /* 189: */  /^(?:ROWS)/i,
      /* 190: */  /^(?:SCHEMA(S)?)/i,
      /* 191: */  /^(?:SEARCH)/i,
      /* 192: */  /^(?:SEMI)/i,
      /* 193: */  /^(?:SET)/i,
      /* 194: */  /^(?:SETS)/i,
      /* 195: */  /^(?:SHOW)/i,
      /* 196: */  /^(?:SOME)/i,
      /* 197: */  /^(?:SOURCE)/i,
      /* 198: */  /^(?:STRATEGY)/i,
      /* 199: */  /^(?:STORE)/i,
      /* 200: */  /^(?:SUM)/i,
      /* 201: */  /^(?:TOTAL)/i,
      /* 202: */  /^(?:TABLE)/i,
      /* 203: */  /^(?:TABLES)/i,
      /* 204: */  /^(?:TARGET)/i,
      /* 205: */  /^(?:TEMP)/i,
      /* 206: */  /^(?:TEMPORARY)/i,
      /* 207: */  /^(?:TEXTSTRING)/i,
      /* 208: */  /^(?:THEN)/i,
      /* 209: */  /^(?:TIMEOUT)/i,
      /* 210: */  /^(?:TO)/i,
      /* 211: */  /^(?:TOP)/i,
      /* 212: */  /^(?:TRAN)/i,
      /* 213: */  /^(?:TRANSACTION)/i,
      /* 214: */  /^(?:TRIGGER)/i,
      /* 215: */  /^(?:TRUE)/i,
      /* 216: */  /^(?:TRUNCATE)/i,
      /* 217: */  /^(?:UNION)/i,
      /* 218: */  /^(?:UNIQUE)/i,
      /* 219: */  /^(?:UNPIVOT)/i,
      /* 220: */  /^(?:UPDATE)/i,
      /* 221: */  /^(?:USE)/i,
      /* 222: */  /^(?:USING)/i,
      /* 223: */  /^(?:VALUE)/i,
      /* 224: */  /^(?:VALUES)/i,
      /* 225: */  /^(?:VERTEX)/i,
      /* 226: */  /^(?:VIEW)/i,
      /* 227: */  /^(?:WHEN)/i,
      /* 228: */  /^(?:WHERE)/i,
      /* 229: */  /^(?:WHILE)/i,
      /* 230: */  /^(?:WITH)/i,
      /* 231: */  /^(?:WORK)/i,
      /* 232: */  /^(?:(\d*[.])?\d+[eE]\d+)/i,
      /* 233: */  /^(?:(\d*[.])?\d+)/i,
      /* 234: */  /^(?:->)/i,
      /* 235: */  /^(?:#)/i,
      /* 236: */  /^(?:\+)/i,
      /* 237: */  /^(?:-)/i,
      /* 238: */  /^(?:\*)/i,
      /* 239: */  /^(?:\/)/i,
      /* 240: */  /^(?:%)/i,
      /* 241: */  /^(?:!===)/i,
      /* 242: */  /^(?:===)/i,
      /* 243: */  /^(?:!==)/i,
      /* 244: */  /^(?:==)/i,
      /* 245: */  /^(?:>=)/i,
      /* 246: */  /^(?:&)/i,
      /* 247: */  /^(?:\|)/i,
      /* 248: */  /^(?:<<)/i,
      /* 249: */  /^(?:>>)/i,
      /* 250: */  /^(?:>)/i,
      /* 251: */  /^(?:<=)/i,
      /* 252: */  /^(?:<>)/i,
      /* 253: */  /^(?:<)/i,
      /* 254: */  /^(?:=)/i,
      /* 255: */  /^(?:!=)/i,
      /* 256: */  /^(?:\()/i,
      /* 257: */  /^(?:\))/i,
      /* 258: */  /^(?:@)/i,
      /* 259: */  /^(?:\{)/i,
      /* 260: */  /^(?:\})/i,
      /* 261: */  /^(?:\])/i,
      /* 262: */  /^(?::-)/i,
      /* 263: */  /^(?:\?-)/i,
      /* 264: */  /^(?:\.\.)/i,
      /* 265: */  /^(?:\.)/i,
      /* 266: */  /^(?:,)/i,
      /* 267: */  /^(?:::)/i,
      /* 268: */  /^(?::)/i,
      /* 269: */  /^(?:;)/i,
      /* 270: */  /^(?:\$)/i,
      /* 271: */  /^(?:\?)/i,
      /* 272: */  /^(?:!)/i,
      /* 273: */  /^(?:\^)/i,
      /* 274: */  /^(?:~)/i,
      /* 275: */  /^(?:\d*[^\W\d]+\w*)/i,
      /* 276: */  /^(?:$)/i,
      /* 277: */  /^(?:.)/i
    ],

    conditions: {
      'INITIAL': {
        rules: [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          84,
          85,
          86,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144,
          145,
          146,
          147,
          148,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          157,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          175,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          186,
          187,
          188,
          189,
          190,
          191,
          192,
          193,
          194,
          195,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          210,
          211,
          212,
          213,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          237,
          238,
          239,
          240,
          241,
          242,
          243,
          244,
          245,
          246,
          247,
          248,
          249,
          250,
          251,
          252,
          253,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          261,
          262,
          263,
          264,
          265,
          266,
          267,
          268,
          269,
          270,
          271,
          272,
          273,
          274,
          275,
          276,
          277
        ],

        inclusive: true
      }
    }
  };

  return lexer;
}();
parser.lexer = lexer;

// from https://www.postgresql.org/docs/current/static/sql-keywords-appendix.html
// JSON.stringify([].slice.call(document.querySelectorAll('tr')).filter(x => x.children.length == 5 && x.children[2].innerText == 'reserved').map(x => x.children[0].innerText))

var nonReserved = ["A","ABSENT","ABSOLUTE","ACCORDING","ACTION","ADA","ADD","ADMIN","AFTER","ALWAYS","ASC","ASSERTION","ASSIGNMENT","ATTRIBUTE","ATTRIBUTES","BASE64","BEFORE","BERNOULLI","BLOCKED","BOM","BREADTH","C","CASCADE","CATALOG","CATALOG_NAME","CHAIN","CHARACTERISTICS","CHARACTERS","CHARACTER_SET_CATALOG","CHARACTER_SET_NAME","CHARACTER_SET_SCHEMA","CLASS_ORIGIN","COBOL","COLLATION","COLLATION_CATALOG","COLLATION_NAME","COLLATION_SCHEMA","COLUMNS","COLUMN_NAME","COMMAND_FUNCTION","COMMAND_FUNCTION_CODE","COMMITTED","CONDITION_NUMBER","CONNECTION","CONNECTION_NAME","CONSTRAINTS","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONSTRUCTOR","CONTENT","CONTINUE","CONTROL","CURSOR_NAME","DATA","DATETIME_INTERVAL_CODE","DATETIME_INTERVAL_PRECISION","DB","DEFAULTS","DEFERRABLE","DEFERRED","DEFINED","DEFINER","DEGREE","DEPTH","DERIVED","DESC","DESCRIPTOR","DIAGNOSTICS","DISPATCH","DOCUMENT","DOMAIN","DYNAMIC_FUNCTION","DYNAMIC_FUNCTION_CODE","EMPTY","ENCODING","ENFORCED","EXCLUDE","EXCLUDING","EXPRESSION","FILE","FINAL","FIRST","FLAG","FOLLOWING","FORTRAN","FOUND","FS","G","GENERAL","GENERATED","GO","GOTO","GRANTED","HEX","HIERARCHY","ID","IGNORE","IMMEDIATE","IMMEDIATELY","IMPLEMENTATION","INCLUDING","INCREMENT","INDENT","INITIALLY","INPUT","INSTANCE","INSTANTIABLE","INSTEAD","INTEGRITY","INVOKER","ISOLATION","K","KEY","KEY_MEMBER","KEY_TYPE","LAST","LENGTH","LEVEL","LIBRARY","LIMIT","LINK","LOCATION","LOCATOR","M","MAP","MAPPING","MATCHED","MAXVALUE","MESSAGE_LENGTH","MESSAGE_OCTET_LENGTH","MESSAGE_TEXT","MINVALUE","MORE","MUMPS","NAME","NAMES","NAMESPACE","NESTING","NEXT","NFC","NFD","NFKC","NFKD","NIL","NORMALIZED","NULLABLE","NULLS","NUMBER","OBJECT","OCTETS","OFF","OPTION","OPTIONS","ORDERING","ORDINALITY","OTHERS","OUTPUT","OVERRIDING","P","PAD","PARAMETER_MODE","PARAMETER_NAME","PARAMETER_ORDINAL_POSITION","PARAMETER_SPECIFIC_CATALOG","PARAMETER_SPECIFIC_NAME","PARAMETER_SPECIFIC_SCHEMA","PARTIAL","PASCAL","PASSING","PASSTHROUGH","PATH","PERMISSION","PLACING","PLI","PRECEDING","PRESERVE","PRIOR","PRIVILEGES","PUBLIC","READ","RECOVERY","RELATIVE","REPEATABLE","REQUIRING","RESPECT","RESTART","RESTORE","RESTRICT","RETURNED_CARDINALITY","RETURNED_LENGTH","RETURNED_OCTET_LENGTH","RETURNED_SQLSTATE","RETURNING","ROLE","ROUTINE","ROUTINE_CATALOG","ROUTINE_NAME","ROUTINE_SCHEMA","ROW_COUNT","SCALE","SCHEMA","SCHEMA_NAME","SCOPE_CATALOG","SCOPE_NAME","SCOPE_SCHEMA","SECTION","SECURITY","SELECTIVE","SELF","SEQUENCE","SERIALIZABLE","SERVER","SERVER_NAME","SESSION","SETS","SIMPLE","SIZE","SOURCE","SPACE","SPECIFIC_NAME","STANDALONE","STATE","STATEMENT","STRIP","STRUCTURE","STYLE","SUBCLASS_ORIGIN","T","TABLE_NAME","TEMPORARY","TIES","TOKEN","TOP_LEVEL_COUNT","TRANSACTION","TRANSACTIONS_COMMITTED","TRANSACTIONS_ROLLED_BACK","TRANSACTION_ACTIVE","TRANSFORM","TRANSFORMS","TRIGGER_CATALOG","TRIGGER_NAME","TRIGGER_SCHEMA","TYPE","UNBOUNDED","UNCOMMITTED","UNDER","UNLINK","UNNAMED","UNTYPED","URI","USAGE","USER_DEFINED_TYPE_CATALOG","USER_DEFINED_TYPE_CODE","USER_DEFINED_TYPE_NAME","USER_DEFINED_TYPE_SCHEMA","VALID","VERSION","VIEW","WHITESPACE","WORK","WRAPPER","WRITE","XMLDECLARATION","XMLSCHEMA","YES","ZONE"]

parser.parseError = function(str, hash) {
	if (hash.expected && hash.expected.indexOf("'LITERAL'") > -1 && /[a-zA-Z_][a-zA-Z_0-9]*/.test(hash.token) && nonReserved.indexOf(hash.token) > -1) {
		return
	}
	throw new SyntaxError(str)
}

function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();

        


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = alasqlparser;
  exports.Parser = alasqlparser.Parser;
  exports.parse = function () {
    return alasqlparser.parse.apply(alasqlparser, arguments);
  };
  
}
